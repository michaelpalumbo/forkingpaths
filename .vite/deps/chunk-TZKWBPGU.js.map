{
  "version": 3,
  "sources": ["../../node_modules/@noble/hashes/src/_assert.ts", "../../node_modules/@noble/hashes/src/crypto.ts", "../../node_modules/@noble/hashes/src/utils.ts", "../../node_modules/@noble/hashes/src/_md.ts", "../../node_modules/@noble/hashes/src/sha256.ts", "../../node_modules/base-x/src/index.js", "../../node_modules/bs58/index.js", "../../node_modules/bs58check/base.js", "../../node_modules/bs58check/index.js", "../../node_modules/ms/index.js", "../../node_modules/debug/src/common.js", "../../node_modules/debug/src/browser.js", "../../node_modules/eventemitter3/index.js", "../../node_modules/fast-sha256/sha256.js", "../../node_modules/@automerge/automerge-repo/dist/AutomergeUrl.js", "../../node_modules/@automerge/automerge-repo/dist/helpers/cbor.js", "../../node_modules/cbor-x/decode.js", "../../node_modules/cbor-x/encode.js", "../../node_modules/@automerge/automerge-repo/dist/DocHandle.js", "../../node_modules/eventemitter3/index.mjs", "../../node_modules/xstate/dev/dist/xstate-dev.development.esm.js", "../../node_modules/xstate/dist/raise-5ea71f04.development.esm.js", "../../node_modules/xstate/actors/dist/xstate-actors.development.esm.js", "../../node_modules/xstate/dist/log-38475d87.development.esm.js", "../../node_modules/xstate/dist/xstate.development.esm.js", "../../node_modules/@automerge/automerge-repo/dist/helpers/arraysAreEqual.js", "../../node_modules/@automerge/automerge-repo/dist/helpers/headsAreSame.js", "../../node_modules/@automerge/automerge-repo/dist/helpers/withTimeout.js", "../../node_modules/@automerge/automerge-repo/dist/network/messages.js", "../../node_modules/@automerge/automerge-repo/dist/Repo.js", "../../node_modules/@automerge/automerge-repo/dist/RemoteHeadsSubscriptions.js", "../../node_modules/@automerge/automerge-repo/dist/helpers/throttle.js", "../../node_modules/@automerge/automerge-repo/dist/network/NetworkSubsystem.js", "../../node_modules/@automerge/automerge-repo/dist/storage/StorageSubsystem.js", "../../node_modules/@automerge/automerge-repo/dist/helpers/mergeArrays.js", "../../node_modules/@automerge/automerge-repo/dist/storage/keyHash.js", "../../node_modules/@automerge/automerge-repo/dist/storage/chunkTypeFromKey.js", "../../node_modules/@automerge/automerge-repo/dist/synchronizer/CollectionSynchronizer.js", "../../node_modules/@automerge/automerge-repo/dist/synchronizer/DocSynchronizer.js", "../../node_modules/@automerge/automerge-repo/dist/synchronizer/Synchronizer.js", "../../node_modules/@automerge/automerge-repo/dist/network/NetworkAdapter.js", "../../node_modules/@automerge/automerge-repo/dist/storage/StorageAdapter.js"],
  "sourcesContent": ["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n", "'use strict'\n\nvar base58 = require('bs58')\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var payloadU8 = Uint8Array.from(payload)\n    var checksum = checksumFn(payloadU8)\n    var length = payloadU8.length + 4\n    var both = new Uint8Array(length)\n    both.set(payloadU8, 0)\n    both.set(checksum.subarray(0, 4), payloadU8.length)\n    return base58.encode(both, length)\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n", "'use strict'\n\nvar { sha256 } = require('@noble/hashes/sha256')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  return sha256(sha256(buffer))\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n", "(function (root, factory) {\n    // Hack to make all exports of this module sha256 function object properties.\n    var exports = {};\n    factory(exports);\n    var sha256 = exports[\"default\"];\n    for (var k in exports) {\n        sha256[k] = exports[k];\n    }\n        \n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = sha256;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function() { return sha256; }); \n    } else {\n        root.sha256 = sha256;\n    }\n})(this, function(exports) {\n\"use strict\";\nexports.__esModule = true;\n// SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n//\n// Written in 2014-2016 by Dmitry Chestnykh.\n// Public domain, no warranty.\n//\n// Functions (accept and return Uint8Arrays):\n//\n//   sha256(message) -> hash\n//   sha256.hmac(key, message) -> mac\n//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n//\n//  Classes:\n//\n//   new sha256.Hash()\n//   new sha256.HMAC(key)\n//\nexports.digestLength = 32;\nexports.blockSize = 64;\n// SHA-256 constants\nvar K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;\n    while (len >= 64) {\n        a = v[0];\n        b = v[1];\n        c = v[2];\n        d = v[3];\n        e = v[4];\n        f = v[5];\n        g = v[6];\n        h = v[7];\n        for (i = 0; i < 16; i++) {\n            j = pos + i * 4;\n            w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |\n                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff));\n        }\n        for (i = 16; i < 64; i++) {\n            u = w[i - 2];\n            t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n            u = w[i - 15];\n            t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for (i = 0; i < 64; i++) {\n            t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n            t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\n// Hash implements SHA256 hash algorithm.\nvar Hash = /** @class */ (function () {\n    function Hash() {\n        this.digestLength = exports.digestLength;\n        this.blockSize = exports.blockSize;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this.state = new Int32Array(8); // hash state\n        this.temp = new Int32Array(64); // temporary state\n        this.buffer = new Uint8Array(128); // buffer for data to hash\n        this.bufferLength = 0; // number of bytes in buffer\n        this.bytesHashed = 0; // number of total bytes hashed\n        this.finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    // Resets hash state making it possible\n    // to re-use this instance to hash other data.\n    Hash.prototype.reset = function () {\n        this.state[0] = 0x6a09e667;\n        this.state[1] = 0xbb67ae85;\n        this.state[2] = 0x3c6ef372;\n        this.state[3] = 0xa54ff53a;\n        this.state[4] = 0x510e527f;\n        this.state[5] = 0x9b05688c;\n        this.state[6] = 0x1f83d9ab;\n        this.state[7] = 0x5be0cd19;\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        this.finished = false;\n        return this;\n    };\n    // Cleans internal buffers and re-initializes hash state.\n    Hash.prototype.clean = function () {\n        for (var i = 0; i < this.buffer.length; i++) {\n            this.buffer[i] = 0;\n        }\n        for (var i = 0; i < this.temp.length; i++) {\n            this.temp[i] = 0;\n        }\n        this.reset();\n    };\n    // Updates hash state with the given data.\n    //\n    // Optionally, length of the data can be specified to hash\n    // fewer bytes than data.length.\n    //\n    // Throws error when trying to update already finalized hash:\n    // instance must be reset to use it again.\n    Hash.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this.finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this.bytesHashed += dataLength;\n        if (this.bufferLength > 0) {\n            while (this.bufferLength < 64 && dataLength > 0) {\n                this.buffer[this.bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this.bufferLength === 64) {\n                hashBlocks(this.temp, this.state, this.buffer, 0, 64);\n                this.bufferLength = 0;\n            }\n        }\n        if (dataLength >= 64) {\n            dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\n            dataLength %= 64;\n        }\n        while (dataLength > 0) {\n            this.buffer[this.bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    // Finalizes hash state and puts hash into out.\n    //\n    // If hash was already finalized, puts the same value.\n    Hash.prototype.finish = function (out) {\n        if (!this.finished) {\n            var bytesHashed = this.bytesHashed;\n            var left = this.bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n            this.buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this.buffer[i] = 0;\n            }\n            this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;\n            this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;\n            this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;\n            this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;\n            this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;\n            this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;\n            this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;\n            this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;\n            hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\n            this.finished = true;\n        }\n        for (var i = 0; i < 8; i++) {\n            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n        }\n        return this;\n    };\n    // Returns the final hash digest.\n    Hash.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._saveState = function (out) {\n        for (var i = 0; i < this.state.length; i++) {\n            out[i] = this.state[i];\n        }\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._restoreState = function (from, bytesHashed) {\n        for (var i = 0; i < this.state.length; i++) {\n            this.state[i] = from[i];\n        }\n        this.bytesHashed = bytesHashed;\n        this.finished = false;\n        this.bufferLength = 0;\n    };\n    return Hash;\n}());\nexports.Hash = Hash;\n// HMAC implements HMAC-SHA256 message authentication algorithm.\nvar HMAC = /** @class */ (function () {\n    function HMAC(key) {\n        this.inner = new Hash();\n        this.outer = new Hash();\n        this.blockSize = this.inner.blockSize;\n        this.digestLength = this.inner.digestLength;\n        var pad = new Uint8Array(this.blockSize);\n        if (key.length > this.blockSize) {\n            (new Hash()).update(key).finish(pad).clean();\n        }\n        else {\n            for (var i = 0; i < key.length; i++) {\n                pad[i] = key[i];\n            }\n        }\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36;\n        }\n        this.inner.update(pad);\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36 ^ 0x5c;\n        }\n        this.outer.update(pad);\n        this.istate = new Uint32Array(8);\n        this.ostate = new Uint32Array(8);\n        this.inner._saveState(this.istate);\n        this.outer._saveState(this.ostate);\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] = 0;\n        }\n    }\n    // Returns HMAC state to the state initialized with key\n    // to make it possible to run HMAC over the other data with the same\n    // key without creating a new instance.\n    HMAC.prototype.reset = function () {\n        this.inner._restoreState(this.istate, this.inner.blockSize);\n        this.outer._restoreState(this.ostate, this.outer.blockSize);\n        return this;\n    };\n    // Cleans HMAC state.\n    HMAC.prototype.clean = function () {\n        for (var i = 0; i < this.istate.length; i++) {\n            this.ostate[i] = this.istate[i] = 0;\n        }\n        this.inner.clean();\n        this.outer.clean();\n    };\n    // Updates state with provided data.\n    HMAC.prototype.update = function (data) {\n        this.inner.update(data);\n        return this;\n    };\n    // Finalizes HMAC and puts the result in out.\n    HMAC.prototype.finish = function (out) {\n        if (this.outer.finished) {\n            this.outer.finish(out);\n        }\n        else {\n            this.inner.finish(out);\n            this.outer.update(out, this.digestLength).finish(out);\n        }\n        return this;\n    };\n    // Returns message authentication code.\n    HMAC.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    return HMAC;\n}());\nexports.HMAC = HMAC;\n// Returns SHA256 hash of data.\nfunction hash(data) {\n    var h = (new Hash()).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n// Function hash is both available as module.hash and as default export.\nexports[\"default\"] = hash;\n// Returns HMAC-SHA256 of data under the key.\nfunction hmac(key, data) {\n    var h = (new HMAC(key)).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hmac = hmac;\n// Fills hkdf buffer like this:\n// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\nfunction fillBuffer(buffer, hmac, info, counter) {\n    // Counter is a byte value: check if it overflowed.\n    var num = counter[0];\n    if (num === 0) {\n        throw new Error(\"hkdf: cannot expand more\");\n    }\n    // Prepare HMAC instance for new data with old key.\n    hmac.reset();\n    // Hash in previous output if it was generated\n    // (i.e. counter is greater than 1).\n    if (num > 1) {\n        hmac.update(buffer);\n    }\n    // Hash in info if it exists.\n    if (info) {\n        hmac.update(info);\n    }\n    // Hash in the counter.\n    hmac.update(counter);\n    // Output result to buffer and clean HMAC instance.\n    hmac.finish(buffer);\n    // Increment counter inside typed array, this works properly.\n    counter[0]++;\n}\nvar hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.\nfunction hkdf(key, salt, info, length) {\n    if (salt === void 0) { salt = hkdfSalt; }\n    if (length === void 0) { length = 32; }\n    var counter = new Uint8Array([1]);\n    // HKDF-Extract uses salt as HMAC key, and key as data.\n    var okm = hmac(salt, key);\n    // Initialize HMAC for expanding with extracted key.\n    // Ensure no collisions with `hmac` function.\n    var hmac_ = new HMAC(okm);\n    // Allocate buffer.\n    var buffer = new Uint8Array(hmac_.digestLength);\n    var bufpos = buffer.length;\n    var out = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n        if (bufpos === buffer.length) {\n            fillBuffer(buffer, hmac_, info, counter);\n            bufpos = 0;\n        }\n        out[i] = buffer[bufpos++];\n    }\n    hmac_.clean();\n    buffer.fill(0);\n    counter.fill(0);\n    return out;\n}\nexports.hkdf = hkdf;\n// Derives a key from password and salt using PBKDF2-HMAC-SHA256\n// with the given number of iterations.\n//\n// The number of bytes returned is equal to dkLen.\n//\n// (For better security, avoid dkLen greater than hash length - 32 bytes).\nfunction pbkdf2(password, salt, iterations, dkLen) {\n    var prf = new HMAC(password);\n    var len = prf.digestLength;\n    var ctr = new Uint8Array(4);\n    var t = new Uint8Array(len);\n    var u = new Uint8Array(len);\n    var dk = new Uint8Array(dkLen);\n    for (var i = 0; i * len < dkLen; i++) {\n        var c = i + 1;\n        ctr[0] = (c >>> 24) & 0xff;\n        ctr[1] = (c >>> 16) & 0xff;\n        ctr[2] = (c >>> 8) & 0xff;\n        ctr[3] = (c >>> 0) & 0xff;\n        prf.reset();\n        prf.update(salt);\n        prf.update(ctr);\n        prf.finish(u);\n        for (var j = 0; j < len; j++) {\n            t[j] = u[j];\n        }\n        for (var j = 2; j <= iterations; j++) {\n            prf.reset();\n            prf.update(u).finish(u);\n            for (var k = 0; k < len; k++) {\n                t[k] ^= u[k];\n            }\n        }\n        for (var j = 0; j < len && i * len + j < dkLen; j++) {\n            dk[i * len + j] = t[j];\n        }\n    }\n    for (var i = 0; i < len; i++) {\n        t[i] = u[i] = 0;\n    }\n    for (var i = 0; i < 4; i++) {\n        ctr[i] = 0;\n    }\n    prf.clean();\n    return dk;\n}\nexports.pbkdf2 = pbkdf2;\n});\n", "import * as Uuid from \"uuid\";\nimport bs58check from \"bs58check\";\nexport const urlPrefix = \"automerge:\";\n/** Given an Automerge URL, returns the DocumentId in both base58check-encoded form and binary form */\nexport const parseAutomergeUrl = (url) => {\n    const regex = new RegExp(`^${urlPrefix}(\\\\w+)$`);\n    const [, docMatch] = url.match(regex) || [];\n    const documentId = docMatch;\n    const binaryDocumentId = documentIdToBinary(documentId);\n    if (!binaryDocumentId)\n        throw new Error(\"Invalid document URL: \" + url);\n    return {\n        /** unencoded DocumentId */\n        binaryDocumentId,\n        /** encoded DocumentId */\n        documentId,\n    };\n};\n/**\n * Given a documentId in either binary or base58check-encoded form, returns an Automerge URL.\n * Throws on invalid input.\n */\nexport const stringifyAutomergeUrl = (arg) => {\n    const documentId = arg instanceof Uint8Array || typeof arg === \"string\"\n        ? arg\n        : \"documentId\" in arg\n            ? arg.documentId\n            : undefined;\n    const encodedDocumentId = documentId instanceof Uint8Array\n        ? binaryToDocumentId(documentId)\n        : typeof documentId === \"string\"\n            ? documentId\n            : undefined;\n    if (encodedDocumentId === undefined)\n        throw new Error(\"Invalid documentId: \" + documentId);\n    return (urlPrefix + encodedDocumentId);\n};\n/**\n * Given a string, returns true if it is a valid Automerge URL. This function also acts as a type\n * discriminator in Typescript.\n */\nexport const isValidAutomergeUrl = (str) => {\n    if (!str || !str.startsWith(urlPrefix))\n        return false;\n    const automergeUrl = str;\n    try {\n        const { documentId } = parseAutomergeUrl(automergeUrl);\n        return isValidDocumentId(documentId);\n    }\n    catch {\n        return false;\n    }\n};\nexport const isValidDocumentId = (str) => {\n    // try to decode from base58\n    const binaryDocumentID = documentIdToBinary(str);\n    if (binaryDocumentID === undefined)\n        return false; // invalid base58check encoding\n    // confirm that the document ID is a valid UUID\n    const documentId = Uuid.stringify(binaryDocumentID);\n    return Uuid.validate(documentId);\n};\nexport const isValidUuid = (str) => Uuid.validate(str);\n/**\n * Returns a new Automerge URL with a random UUID documentId. Called by Repo.create(), and also used by tests.\n */\nexport const generateAutomergeUrl = () => {\n    const documentId = Uuid.v4(null, new Uint8Array(16));\n    return stringifyAutomergeUrl({ documentId });\n};\nexport const documentIdToBinary = (docId) => bs58check.decodeUnsafe(docId);\nexport const binaryToDocumentId = (docId) => bs58check.encode(docId);\nexport const parseLegacyUUID = (str) => {\n    if (!Uuid.validate(str))\n        return undefined;\n    const documentId = Uuid.parse(str);\n    return stringifyAutomergeUrl({ documentId });\n};\n/**\n * Given any valid expression of a document ID, returns a DocumentId in base58check-encoded form.\n *\n * Currently supports:\n * - base58check-encoded DocumentId\n * - Automerge URL\n * - legacy UUID\n * - binary DocumentId\n *\n * Throws on invalid input.\n */\nexport const interpretAsDocumentId = (id) => {\n    // binary\n    if (id instanceof Uint8Array)\n        return binaryToDocumentId(id);\n    // url\n    if (isValidAutomergeUrl(id))\n        return parseAutomergeUrl(id).documentId;\n    // base58check\n    if (isValidDocumentId(id))\n        return id;\n    // legacy UUID\n    if (isValidUuid(id)) {\n        console.warn(\"Future versions will not support UUIDs as document IDs; use Automerge URLs instead.\");\n        const binaryDocumentID = Uuid.parse(id);\n        return binaryToDocumentId(binaryDocumentID);\n    }\n    // none of the above\n    throw new Error(`Invalid AutomergeUrl: '${id}'`);\n};\n", "import { Encoder, decode as cborXdecode } from \"cbor-x\";\nexport function encode(obj) {\n    const encoder = new Encoder({ tagUint8Array: false, useRecords: false });\n    return encoder.encode(obj);\n}\nexport function decode(buf) {\n    return cborXdecode(buf);\n}\n", "let decoder\ntry {\n\tdecoder = new TextDecoder()\n} catch(error) {}\nlet src\nlet srcEnd\nlet position = 0\nlet alreadySet\nconst EMPTY_ARRAY = []\nconst LEGACY_RECORD_INLINE_ID = 105\nconst RECORD_DEFINITIONS_ID = 0xdffe\nconst RECORD_INLINE_ID = 0xdfff // temporary first-come first-serve tag // proposed tag: 0x7265 // 're'\nconst BUNDLED_STRINGS_ID = 0xdff9\nconst PACKED_TABLE_TAG_ID = 51\nconst PACKED_REFERENCE_TAG_ID = 6\nconst STOP_CODE = {}\nlet maxArraySize = 112810000 // This is the maximum array size in V8. We would potentially detect and set it higher\n// for JSC, but this is pretty large and should be sufficient for most use cases\nlet maxMapSize = 16810000 // JavaScript has a fixed maximum map size of about 16710000, but JS itself enforces this,\n// so we don't need to\n\nlet maxObjectSize = 16710000; // This is the maximum number of keys in a Map. It takes over a minute to create this\n// many keys in an object, so also probably a reasonable choice there.\nlet strings = EMPTY_ARRAY\nlet stringPosition = 0\nlet currentDecoder = {}\nlet currentStructures\nlet srcString\nlet srcStringStart = 0\nlet srcStringEnd = 0\nlet bundledStrings\nlet referenceMap\nlet currentExtensions = []\nlet currentExtensionRanges = []\nlet packedValues\nlet dataView\nlet restoreMapsAsObject\nlet defaultOptions = {\n\tuseRecords: false,\n\tmapsAsObjects: true\n}\nlet sequentialMode = false\nlet inlineObjectReadThreshold = 2;\nvar BlockedFunction // we use search and replace to change the next call to BlockedFunction to avoid CSP issues for\n// no-eval build\ntry {\n\tnew Function('')\n} catch(error) {\n\t// if eval variants are not supported, do not create inline object readers ever\n\tinlineObjectReadThreshold = Infinity\n}\n\n\n\nexport class Decoder {\n\tconstructor(options) {\n\t\tif (options) {\n\t\t\tif ((options.keyMap || options._keyMap) && !options.useRecords) {\n\t\t\t\toptions.useRecords = false\n\t\t\t\toptions.mapsAsObjects = true\n\t\t\t}\n\t\t\tif (options.useRecords === false && options.mapsAsObjects === undefined)\n\t\t\t\toptions.mapsAsObjects = true\n\t\t\tif (options.getStructures)\n\t\t\t\toptions.getShared = options.getStructures\n\t\t\tif (options.getShared && !options.structures)\n\t\t\t\t(options.structures = []).uninitialized = true // this is what we use to denote an uninitialized structures\n\t\t\tif (options.keyMap) {\n\t\t\t\tthis.mapKey = new Map()\n\t\t\t\tfor (let [k,v] of Object.entries(options.keyMap)) this.mapKey.set(v,k)\n\t\t\t}\n\t\t}\n\t\tObject.assign(this, options)\n\t}\n\t/*\n\tdecodeKey(key) {\n\t\treturn this.keyMap\n\t\t\t? Object.keys(this.keyMap)[Object.values(this.keyMap).indexOf(key)] || key\n\t\t\t: key\n\t}\n\t*/\n\tdecodeKey(key) {\n\t\treturn this.keyMap ? this.mapKey.get(key) || key : key\n\t}\n\t\n\tencodeKey(key) {\n\t\treturn this.keyMap && this.keyMap.hasOwnProperty(key) ? this.keyMap[key] : key\n\t}\n\n\tencodeKeys(rec) {\n\t\tif (!this._keyMap) return rec\n\t\tlet map = new Map()\n\t\tfor (let [k,v] of Object.entries(rec)) map.set((this._keyMap.hasOwnProperty(k) ? this._keyMap[k] : k), v)\n\t\treturn map\n\t}\n\n\tdecodeKeys(map) {\n\t\tif (!this._keyMap || map.constructor.name != 'Map') return map\n\t\tif (!this._mapKey) {\n\t\t\tthis._mapKey = new Map()\n\t\t\tfor (let [k,v] of Object.entries(this._keyMap)) this._mapKey.set(v,k)\n\t\t}\n\t\tlet res = {}\n\t\t//map.forEach((v,k) => res[Object.keys(this._keyMap)[Object.values(this._keyMap).indexOf(k)] || k] = v)\n\t\tmap.forEach((v,k) => res[safeKey(this._mapKey.has(k) ? this._mapKey.get(k) : k)] =  v)\n\t\treturn res\n\t}\n\t\n\tmapDecode(source, end) {\n\t\n\t\tlet res = this.decode(source)\n\t\tif (this._keyMap) { \n\t\t\t//Experiemntal support for Optimised KeyMap  decoding \n\t\t\tswitch (res.constructor.name) {\n\t\t\t\tcase 'Array': return res.map(r => this.decodeKeys(r))\n\t\t\t\t//case 'Map': return this.decodeKeys(res)\n\t\t\t}\n\t\t}\n\t\treturn res\n\t}\n\n\tdecode(source, end) {\n\t\tif (src) {\n\t\t\t// re-entrant execution, save the state and restore it after we do this decode\n\t\t\treturn saveState(() => {\n\t\t\t\tclearSource()\n\t\t\t\treturn this ? this.decode(source, end) : Decoder.prototype.decode.call(defaultOptions, source, end)\n\t\t\t})\n\t\t}\n\t\tsrcEnd = end > -1 ? end : source.length\n\t\tposition = 0\n\t\tstringPosition = 0\n\t\tsrcStringEnd = 0\n\t\tsrcString = null\n\t\tstrings = EMPTY_ARRAY\n\t\tbundledStrings = null\n\t\tsrc = source\n\t\t// this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n\t\t// technique for getting data from a database where it can be copied into an existing buffer instead of creating\n\t\t// new ones\n\t\ttry {\n\t\t\tdataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength))\n\t\t} catch(error) {\n\t\t\t// if it doesn't have a buffer, maybe it is the wrong type of object\n\t\t\tsrc = null\n\t\t\tif (source instanceof Uint8Array)\n\t\t\t\tthrow error\n\t\t\tthrow new Error('Source must be a Uint8Array or Buffer but was a ' + ((source && typeof source == 'object') ? source.constructor.name : typeof source))\n\t\t}\n\t\tif (this instanceof Decoder) {\n\t\t\tcurrentDecoder = this\n\t\t\tpackedValues = this.sharedValues &&\n\t\t\t\t(this.pack ? new Array(this.maxPrivatePackedValues || 16).concat(this.sharedValues) :\n\t\t\t\tthis.sharedValues)\n\t\t\tif (this.structures) {\n\t\t\t\tcurrentStructures = this.structures\n\t\t\t\treturn checkedRead()\n\t\t\t} else if (!currentStructures || currentStructures.length > 0) {\n\t\t\t\tcurrentStructures = []\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentDecoder = defaultOptions\n\t\t\tif (!currentStructures || currentStructures.length > 0)\n\t\t\t\tcurrentStructures = []\n\t\t\tpackedValues = null\n\t\t}\n\t\treturn checkedRead()\n\t}\n\tdecodeMultiple(source, forEach) {\n\t\tlet values, lastPosition = 0\n\t\ttry {\n\t\t\tlet size = source.length\n\t\t\tsequentialMode = true\n\t\t\tlet value = this ? this.decode(source, size) : defaultDecoder.decode(source, size)\n\t\t\tif (forEach) {\n\t\t\t\tif (forEach(value) === false) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\twhile(position < size) {\n\t\t\t\t\tlastPosition = position\n\t\t\t\t\tif (forEach(checkedRead()) === false) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvalues = [ value ]\n\t\t\t\twhile(position < size) {\n\t\t\t\t\tlastPosition = position\n\t\t\t\t\tvalues.push(checkedRead())\n\t\t\t\t}\n\t\t\t\treturn values\n\t\t\t}\n\t\t} catch(error) {\n\t\t\terror.lastPosition = lastPosition\n\t\t\terror.values = values\n\t\t\tthrow error\n\t\t} finally {\n\t\t\tsequentialMode = false\n\t\t\tclearSource()\n\t\t}\n\t}\n}\nexport function getPosition() {\n\treturn position\n}\nexport function checkedRead() {\n\ttry {\n\t\tlet result = read()\n\t\tif (bundledStrings) {\n\t\t\tif (position >= bundledStrings.postBundlePosition) {\n\t\t\t\tlet error = new Error('Unexpected bundle position');\n\t\t\t\terror.incomplete = true;\n\t\t\t\tthrow error\n\t\t\t}\n\t\t\t// bundled strings to skip past\n\t\t\tposition = bundledStrings.postBundlePosition;\n\t\t\tbundledStrings = null;\n\t\t}\n\n\t\tif (position == srcEnd) {\n\t\t\t// finished reading this source, cleanup references\n\t\t\tcurrentStructures = null\n\t\t\tsrc = null\n\t\t\tif (referenceMap)\n\t\t\t\treferenceMap = null\n\t\t} else if (position > srcEnd) {\n\t\t\t// over read\n\t\t\tlet error = new Error('Unexpected end of CBOR data')\n\t\t\terror.incomplete = true\n\t\t\tthrow error\n\t\t} else if (!sequentialMode) {\n\t\t\tthrow new Error('Data read, but end of buffer not reached')\n\t\t}\n\t\t// else more to read, but we are reading sequentially, so don't clear source yet\n\t\treturn result\n\t} catch(error) {\n\t\tclearSource()\n\t\tif (error instanceof RangeError || error.message.startsWith('Unexpected end of buffer')) {\n\t\t\terror.incomplete = true\n\t\t}\n\t\tthrow error\n\t}\n}\n\nexport function read() {\n\tlet token = src[position++]\n\tlet majorType = token >> 5\n\ttoken = token & 0x1f\n\tif (token > 0x17) {\n\t\tswitch (token) {\n\t\t\tcase 0x18:\n\t\t\t\ttoken = src[position++]\n\t\t\t\tbreak\n\t\t\tcase 0x19:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\treturn getFloat16()\n\t\t\t\t}\n\t\t\t\ttoken = dataView.getUint16(position)\n\t\t\t\tposition += 2\n\t\t\t\tbreak\n\t\t\tcase 0x1a:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\tlet value = dataView.getFloat32(position)\n\t\t\t\t\tif (currentDecoder.useFloat32 > 2) {\n\t\t\t\t\t\t// this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n\t\t\t\t\t\tlet multiplier = mult10[((src[position] & 0x7f) << 1) | (src[position + 1] >> 7)]\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\treturn ((multiplier * value + (value > 0 ? 0.5 : -0.5)) >> 0) / multiplier\n\t\t\t\t\t}\n\t\t\t\t\tposition += 4\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\ttoken = dataView.getUint32(position)\n\t\t\t\tposition += 4\n\t\t\t\tbreak\n\t\t\tcase 0x1b:\n\t\t\t\tif (majorType == 7) {\n\t\t\t\t\tlet value = dataView.getFloat64(position)\n\t\t\t\t\tposition += 8\n\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\tif (majorType > 1) {\n\t\t\t\t\tif (dataView.getUint32(position) > 0)\n\t\t\t\t\t\tthrow new Error('JavaScript does not support arrays, maps, or strings with length over 4294967295')\n\t\t\t\t\ttoken = dataView.getUint32(position + 4)\n\t\t\t\t} else if (currentDecoder.int64AsNumber) {\n\t\t\t\t\ttoken = dataView.getUint32(position) * 0x100000000\n\t\t\t\t\ttoken += dataView.getUint32(position + 4)\n\t\t\t\t} else\n\t\t\t\t\ttoken = dataView.getBigUint64(position)\n\t\t\t\tposition += 8\n\t\t\t\tbreak\n\t\t\tcase 0x1f: \n\t\t\t\t// indefinite length\n\t\t\t\tswitch(majorType) {\n\t\t\t\t\tcase 2: // byte string\n\t\t\t\t\tcase 3: // text string\n\t\t\t\t\t\tthrow new Error('Indefinite length not supported for byte or text strings')\n\t\t\t\t\tcase 4: // array\n\t\t\t\t\t\tlet array = []\n\t\t\t\t\t\tlet value, i = 0\n\t\t\t\t\t\twhile ((value = read()) != STOP_CODE) {\n\t\t\t\t\t\t\tif (i >= maxArraySize) throw new Error(`Array length exceeds ${maxArraySize}`)\n\t\t\t\t\t\t\tarray[i++] = value\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn majorType == 4 ? array : majorType == 3 ? array.join('') : Buffer.concat(array)\n\t\t\t\t\tcase 5: // map\n\t\t\t\t\t\tlet key\n\t\t\t\t\t\tif (currentDecoder.mapsAsObjects) {\n\t\t\t\t\t\t\tlet object = {}\n\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\tif (currentDecoder.keyMap) {\n\t\t\t\t\t\t\t\twhile((key = read()) != STOP_CODE) {\n\t\t\t\t\t\t\t\t\tif (i++ >= maxMapSize) throw new Error(`Property count exceeds ${maxMapSize}`)\n\t\t\t\t\t\t\t\t\tobject[safeKey(currentDecoder.decodeKey(key))] = read()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\twhile ((key = read()) != STOP_CODE) {\n\t\t\t\t\t\t\t\t\tif (i++ >= maxMapSize) throw new Error(`Property count exceeds ${maxMapSize}`)\n\t\t\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn object\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (restoreMapsAsObject) {\n\t\t\t\t\t\t\t\tcurrentDecoder.mapsAsObjects = true\n\t\t\t\t\t\t\t\trestoreMapsAsObject = false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet map = new Map()\n\t\t\t\t\t\t\tif (currentDecoder.keyMap) {\n\t\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\t\twhile((key = read()) != STOP_CODE) {\n\t\t\t\t\t\t\t\t\tif (i++ >= maxMapSize) {\n\t\t\t\t\t\t\t\t\t\tthrow new Error(`Map size exceeds ${maxMapSize}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tmap.set(currentDecoder.decodeKey(key), read())\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\t\t\twhile ((key = read()) != STOP_CODE) {\n\t\t\t\t\t\t\t\t\tif (i++ >= maxMapSize) {\n\t\t\t\t\t\t\t\t\t\tthrow new Error(`Map size exceeds ${maxMapSize}`);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tmap.set(key, read())\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn map\n\t\t\t\t\t\t}\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\treturn STOP_CODE\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Invalid major type for indefinite length ' + majorType)\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown token ' + token)\n\t\t}\n\t}\n\tswitch (majorType) {\n\t\tcase 0: // positive int\n\t\t\treturn token\n\t\tcase 1: // negative int\n\t\t\treturn ~token\n\t\tcase 2: // buffer\n\t\t\treturn readBin(token)\n\t\tcase 3: // string\n\t\t\tif (srcStringEnd >= position) {\n\t\t\t\treturn srcString.slice(position - srcStringStart, (position += token) - srcStringStart)\n\t\t\t}\n\t\t\tif (srcStringEnd == 0 && srcEnd < 140 && token < 32) {\n\t\t\t\t// for small blocks, avoiding the overhead of the extract call is helpful\n\t\t\t\tlet string = token < 16 ? shortStringInJS(token) : longStringInJS(token)\n\t\t\t\tif (string != null)\n\t\t\t\t\treturn string\n\t\t\t}\n\t\t\treturn readFixedString(token)\n\t\tcase 4: // array\n\t\t\tif (token >= maxArraySize) throw new Error(`Array length exceeds ${maxArraySize}`)\n\t\t\tlet array = new Array(token)\n\t\t  //if (currentDecoder.keyMap) for (let i = 0; i < token; i++) array[i] = currentDecoder.decodeKey(read())\t\n\t\t\t//else \n\t\t\tfor (let i = 0; i < token; i++) array[i] = read()\n\t\t\treturn array\n\t\tcase 5: // map\n\t\t\tif (token >= maxMapSize) throw new Error(`Map size exceeds ${maxArraySize}`)\n\t\t\tif (currentDecoder.mapsAsObjects) {\n\t\t\t\tlet object = {}\n\t\t\t\tif (currentDecoder.keyMap) for (let i = 0; i < token; i++) object[safeKey(currentDecoder.decodeKey(read()))] = read()\n\t\t\t\telse for (let i = 0; i < token; i++) object[safeKey(read())] = read()\n\t\t\t\treturn object\n\t\t\t} else {\n\t\t\t\tif (restoreMapsAsObject) {\n\t\t\t\t\tcurrentDecoder.mapsAsObjects = true\n\t\t\t\t\trestoreMapsAsObject = false\n\t\t\t\t}\n\t\t\t\tlet map = new Map()\n\t\t\t\tif (currentDecoder.keyMap) for (let i = 0; i < token; i++) map.set(currentDecoder.decodeKey(read()),read())\n\t\t\t\telse for (let i = 0; i < token; i++) map.set(read(), read())\n\t\t\t\treturn map\n\t\t\t}\n\t\tcase 6: // extension\n\t\t\tif (token >= BUNDLED_STRINGS_ID) {\n\t\t\t\tlet structure = currentStructures[token & 0x1fff] // check record structures first\n\t\t\t\t// At some point we may provide an option for dynamic tag assignment with a range like token >= 8 && (token < 16 || (token > 0x80 && token < 0xc0) || (token > 0x130 && token < 0x4000))\n\t\t\t\tif (structure) {\n\t\t\t\t\tif (!structure.read) structure.read = createStructureReader(structure)\n\t\t\t\t\treturn structure.read()\n\t\t\t\t}\n\t\t\t\tif (token < 0x10000) {\n\t\t\t\t\tif (token == RECORD_INLINE_ID) { // we do a special check for this so that we can keep the\n\t\t\t\t\t\t// currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n\t\t\t\t\t\tlet length = readJustLength()\n\t\t\t\t\t\tlet id = read()\n\t\t\t\t\t\tlet structure = read()\n\t\t\t\t\t\trecordDefinition(id, structure)\n\t\t\t\t\t\tlet object = {}\n\t\t\t\t\t\tif (currentDecoder.keyMap) for (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\tlet key = currentDecoder.decodeKey(structure[i - 2])\n\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse for (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\tlet key = structure[i - 2]\n\t\t\t\t\t\t\tobject[safeKey(key)] = read()\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn object\n\t\t\t\t\t}\n\t\t\t\t\telse if (token == RECORD_DEFINITIONS_ID) {\n\t\t\t\t\t\tlet length = readJustLength()\n\t\t\t\t\t\tlet id = read()\n\t\t\t\t\t\tfor (let i = 2; i < length; i++) {\n\t\t\t\t\t\t\trecordDefinition(id++, read())\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn read()\n\t\t\t\t\t} else if (token == BUNDLED_STRINGS_ID) {\n\t\t\t\t\t\treturn readBundleExt()\n\t\t\t\t\t}\n\t\t\t\t\tif (currentDecoder.getShared) {\n\t\t\t\t\t\tloadShared()\n\t\t\t\t\t\tstructure = currentStructures[token & 0x1fff]\n\t\t\t\t\t\tif (structure) {\n\t\t\t\t\t\t\tif (!structure.read)\n\t\t\t\t\t\t\t\tstructure.read = createStructureReader(structure)\n\t\t\t\t\t\t\treturn structure.read()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet extension = currentExtensions[token]\n\t\t\tif (extension) {\n\t\t\t\tif (extension.handlesRead)\n\t\t\t\t\treturn extension(read)\n\t\t\t\telse\n\t\t\t\t\treturn extension(read())\n\t\t\t} else {\n\t\t\t\tlet input = read()\n\t\t\t\tfor (let i = 0; i < currentExtensionRanges.length; i++) {\n\t\t\t\t\tlet value = currentExtensionRanges[i](token, input)\n\t\t\t\t\tif (value !== undefined)\n\t\t\t\t\t\treturn value\n\t\t\t\t}\n\t\t\t\treturn new Tag(input, token)\n\t\t\t}\n\t\tcase 7: // fixed value\n\t\t\tswitch (token) {\n\t\t\t\tcase 0x14: return false\n\t\t\t\tcase 0x15: return true\n\t\t\t\tcase 0x16: return null\n\t\t\t\tcase 0x17: return; // undefined\n\t\t\t\tcase 0x1f:\n\t\t\t\tdefault:\n\t\t\t\t\tlet packedValue = (packedValues || getPackedValues())[token]\n\t\t\t\t\tif (packedValue !== undefined)\n\t\t\t\t\t\treturn packedValue\n\t\t\t\t\tthrow new Error('Unknown token ' + token)\n\t\t\t}\n\t\tdefault: // negative int\n\t\t\tif (isNaN(token)) {\n\t\t\t\tlet error = new Error('Unexpected end of CBOR data')\n\t\t\t\terror.incomplete = true\n\t\t\t\tthrow error\n\t\t\t}\n\t\t\tthrow new Error('Unknown CBOR token ' + token)\n\t}\n}\nconst validName = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/\nfunction createStructureReader(structure) {\n\tif (!structure) throw new Error('Structure is required in record definition');\n\tfunction readObject() {\n\t\t// get the array size from the header\n\t\tlet length = src[position++]\n\t\t//let majorType = token >> 5\n\t\tlength = length & 0x1f\n\t\tif (length > 0x17) {\n\t\t\tswitch (length) {\n\t\t\t\tcase 0x18:\n\t\t\t\t\tlength = src[position++]\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x19:\n\t\t\t\t\tlength = dataView.getUint16(position)\n\t\t\t\t\tposition += 2\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x1a:\n\t\t\t\t\tlength = dataView.getUint32(position)\n\t\t\t\t\tposition += 4\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Expected array header, but got ' + src[position - 1])\n\t\t\t}\n\t\t}\n\t\t// This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function\n\t\tlet compiledReader = this.compiledReader // first look to see if we have the fast compiled function\n\t\twhile(compiledReader) {\n\t\t\t// we have a fast compiled object literal reader\n\t\t\tif (compiledReader.propertyCount === length)\n\t\t\t\treturn compiledReader(read) // with the right length, so we use it\n\t\t\tcompiledReader = compiledReader.next // see if there is another reader with the right length\n\t\t}\n\t\tif (this.slowReads++ >= inlineObjectReadThreshold) { // create a fast compiled reader\n\t\t\tlet array = this.length == length ? this : this.slice(0, length)\n\t\t\tcompiledReader = currentDecoder.keyMap \n\t\t\t? new Function('r', 'return {' + array.map(k => currentDecoder.decodeKey(k)).map(k => validName.test(k) ? safeKey(k) + ':r()' : ('[' + JSON.stringify(k) + ']:r()')).join(',') + '}')\n\t\t\t: new Function('r', 'return {' + array.map(key => validName.test(key) ? safeKey(key) + ':r()' : ('[' + JSON.stringify(key) + ']:r()')).join(',') + '}')\n\t\t\tif (this.compiledReader)\n\t\t\t\tcompiledReader.next = this.compiledReader // if there is an existing one, we store multiple readers as a linked list because it is usually pretty rare to have multiple readers (of different length) for the same structure\n\t\t\tcompiledReader.propertyCount = length\n\t\t\tthis.compiledReader = compiledReader\n\t\t\treturn compiledReader(read)\n\t\t}\n\t\tlet object = {}\n\t\tif (currentDecoder.keyMap) for (let i = 0; i < length; i++) object[safeKey(currentDecoder.decodeKey(this[i]))] = read()\n\t\telse for (let i = 0; i < length; i++) {\n\t\t\tobject[safeKey(this[i])] = read();\n\t\t}\n\t\treturn object\n\t}\n\tstructure.slowReads = 0\n\treturn readObject\n}\n\nfunction safeKey(key) {\n\t// protect against prototype pollution\n\tif (typeof key === 'string') return key === '__proto__' ? '__proto_' : key\n\tif (typeof key === 'number' || typeof key === 'boolean' || typeof key === 'bigint') return key.toString();\n\tif (key == null) return key + '';\n\t// protect against expensive (DoS) string conversions\n\tthrow new Error('Invalid property name type ' + typeof key);\n}\n\nlet readFixedString = readStringJS\nlet readString8 = readStringJS\nlet readString16 = readStringJS\nlet readString32 = readStringJS\n\nexport let isNativeAccelerationEnabled = false\nexport function setExtractor(extractStrings) {\n\tisNativeAccelerationEnabled = true\n\treadFixedString = readString(1)\n\treadString8 = readString(2)\n\treadString16 = readString(3)\n\treadString32 = readString(5)\n\tfunction readString(headerLength) {\n\t\treturn function readString(length) {\n\t\t\tlet string = strings[stringPosition++]\n\t\t\tif (string == null) {\n\t\t\t\tif (bundledStrings)\n\t\t\t\t\treturn readStringJS(length)\n\t\t\t\tlet extraction = extractStrings(position, srcEnd, length, src)\n\t\t\t\tif (typeof extraction == 'string') {\n\t\t\t\t\tstring = extraction\n\t\t\t\t\tstrings = EMPTY_ARRAY\n\t\t\t\t} else {\n\t\t\t\t\tstrings = extraction\n\t\t\t\t\tstringPosition = 1\n\t\t\t\t\tsrcStringEnd = 1 // even if a utf-8 string was decoded, must indicate we are in the midst of extracted strings and can't skip strings\n\t\t\t\t\tstring = strings[0]\n\t\t\t\t\tif (string === undefined)\n\t\t\t\t\t\tthrow new Error('Unexpected end of buffer')\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet srcStringLength = string.length\n\t\t\tif (srcStringLength <= length) {\n\t\t\t\tposition += length\n\t\t\t\treturn string\n\t\t\t}\n\t\t\tsrcString = string\n\t\t\tsrcStringStart = position\n\t\t\tsrcStringEnd = position + srcStringLength\n\t\t\tposition += length\n\t\t\treturn string.slice(0, length) // we know we just want the beginning\n\t\t}\n\t}\n}\nfunction readStringJS(length) {\n\tlet result\n\tif (length < 16) {\n\t\tif (result = shortStringInJS(length))\n\t\t\treturn result\n\t}\n\tif (length > 64 && decoder)\n\t\treturn decoder.decode(src.subarray(position, position += length))\n\tconst end = position + length\n\tconst units = []\n\tresult = ''\n\twhile (position < end) {\n\t\tconst byte1 = src[position++]\n\t\tif ((byte1 & 0x80) === 0) {\n\t\t\t// 1 byte\n\t\t\tunits.push(byte1)\n\t\t} else if ((byte1 & 0xe0) === 0xc0) {\n\t\t\t// 2 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tunits.push(((byte1 & 0x1f) << 6) | byte2)\n\t\t} else if ((byte1 & 0xf0) === 0xe0) {\n\t\t\t// 3 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tconst byte3 = src[position++] & 0x3f\n\t\t\tunits.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3)\n\t\t} else if ((byte1 & 0xf8) === 0xf0) {\n\t\t\t// 4 bytes\n\t\t\tconst byte2 = src[position++] & 0x3f\n\t\t\tconst byte3 = src[position++] & 0x3f\n\t\t\tconst byte4 = src[position++] & 0x3f\n\t\t\tlet unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4\n\t\t\tif (unit > 0xffff) {\n\t\t\t\tunit -= 0x10000\n\t\t\t\tunits.push(((unit >>> 10) & 0x3ff) | 0xd800)\n\t\t\t\tunit = 0xdc00 | (unit & 0x3ff)\n\t\t\t}\n\t\t\tunits.push(unit)\n\t\t} else {\n\t\t\tunits.push(byte1)\n\t\t}\n\n\t\tif (units.length >= 0x1000) {\n\t\t\tresult += fromCharCode.apply(String, units)\n\t\t\tunits.length = 0\n\t\t}\n\t}\n\n\tif (units.length > 0) {\n\t\tresult += fromCharCode.apply(String, units)\n\t}\n\n\treturn result\n}\nlet fromCharCode = String.fromCharCode\nfunction longStringInJS(length) {\n\tlet start = position\n\tlet bytes = new Array(length)\n\tfor (let i = 0; i < length; i++) {\n\t\tconst byte = src[position++];\n\t\tif ((byte & 0x80) > 0) {\n\t\t\tposition = start\n    \t\t\treturn\n    \t\t}\n    \t\tbytes[i] = byte\n    \t}\n    \treturn fromCharCode.apply(String, bytes)\n}\nfunction shortStringInJS(length) {\n\tif (length < 4) {\n\t\tif (length < 2) {\n\t\t\tif (length === 0)\n\t\t\t\treturn ''\n\t\t\telse {\n\t\t\t\tlet a = src[position++]\n\t\t\t\tif ((a & 0x80) > 1) {\n\t\t\t\t\tposition -= 1\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a)\n\t\t\t}\n\t\t} else {\n\t\t\tlet a = src[position++]\n\t\t\tlet b = src[position++]\n\t\t\tif ((a & 0x80) > 0 || (b & 0x80) > 0) {\n\t\t\t\tposition -= 2\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 3)\n\t\t\t\treturn fromCharCode(a, b)\n\t\t\tlet c = src[position++]\n\t\t\tif ((c & 0x80) > 0) {\n\t\t\t\tposition -= 3\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn fromCharCode(a, b, c)\n\t\t}\n\t} else {\n\t\tlet a = src[position++]\n\t\tlet b = src[position++]\n\t\tlet c = src[position++]\n\t\tlet d = src[position++]\n\t\tif ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n\t\t\tposition -= 4\n\t\t\treturn\n\t\t}\n\t\tif (length < 6) {\n\t\t\tif (length === 4)\n\t\t\t\treturn fromCharCode(a, b, c, d)\n\t\t\telse {\n\t\t\t\tlet e = src[position++]\n\t\t\t\tif ((e & 0x80) > 0) {\n\t\t\t\t\tposition -= 5\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a, b, c, d, e)\n\t\t\t}\n\t\t} else if (length < 8) {\n\t\t\tlet e = src[position++]\n\t\t\tlet f = src[position++]\n\t\t\tif ((e & 0x80) > 0 || (f & 0x80) > 0) {\n\t\t\t\tposition -= 6\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 7)\n\t\t\t\treturn fromCharCode(a, b, c, d, e, f)\n\t\t\tlet g = src[position++]\n\t\t\tif ((g & 0x80) > 0) {\n\t\t\t\tposition -= 7\n\t\t\t\treturn\n\t\t\t}\n\t\t\treturn fromCharCode(a, b, c, d, e, f, g)\n\t\t} else {\n\t\t\tlet e = src[position++]\n\t\t\tlet f = src[position++]\n\t\t\tlet g = src[position++]\n\t\t\tlet h = src[position++]\n\t\t\tif ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n\t\t\t\tposition -= 8\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (length < 10) {\n\t\t\t\tif (length === 8)\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h)\n\t\t\t\telse {\n\t\t\t\t\tlet i = src[position++]\n\t\t\t\t\tif ((i & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 9\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i)\n\t\t\t\t}\n\t\t\t} else if (length < 12) {\n\t\t\t\tlet i = src[position++]\n\t\t\t\tlet j = src[position++]\n\t\t\t\tif ((i & 0x80) > 0 || (j & 0x80) > 0) {\n\t\t\t\t\tposition -= 10\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (length < 11)\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j)\n\t\t\t\tlet k = src[position++]\n\t\t\t\tif ((k & 0x80) > 0) {\n\t\t\t\t\tposition -= 11\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k)\n\t\t\t} else {\n\t\t\t\tlet i = src[position++]\n\t\t\t\tlet j = src[position++]\n\t\t\t\tlet k = src[position++]\n\t\t\t\tlet l = src[position++]\n\t\t\t\tif ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n\t\t\t\t\tposition -= 12\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (length < 14) {\n\t\t\t\t\tif (length === 12)\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l)\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet m = src[position++]\n\t\t\t\t\t\tif ((m & 0x80) > 0) {\n\t\t\t\t\t\t\tposition -= 13\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet m = src[position++]\n\t\t\t\t\tlet n = src[position++]\n\t\t\t\t\tif ((m & 0x80) > 0 || (n & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 14\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif (length < 15)\n\t\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n)\n\t\t\t\t\tlet o = src[position++]\n\t\t\t\t\tif ((o & 0x80) > 0) {\n\t\t\t\t\t\tposition -= 15\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\treturn fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction readBin(length) {\n\treturn currentDecoder.copyBuffers ?\n\t\t// specifically use the copying slice (not the node one)\n\t\tUint8Array.prototype.slice.call(src, position, position += length) :\n\t\tsrc.subarray(position, position += length)\n}\nfunction readExt(length) {\n\tlet type = src[position++]\n\tif (currentExtensions[type]) {\n\t\treturn currentExtensions[type](src.subarray(position, position += length))\n\t}\n\telse\n\t\tthrow new Error('Unknown extension type ' + type)\n}\nlet f32Array = new Float32Array(1)\nlet u8Array = new Uint8Array(f32Array.buffer, 0, 4)\nfunction getFloat16() {\n\tlet byte0 = src[position++]\n\tlet byte1 = src[position++]\n\tlet exponent = (byte0 & 0x7f) >> 2;\n\tif (exponent === 0x1f) { // specials\n\t\tif (byte1 || (byte0 & 3))\n\t\t\treturn NaN;\n\t\treturn (byte0 & 0x80) ? -Infinity : Infinity;\n\t}\n\tif (exponent === 0) { // sub-normals\n\t\t// significand with 10 fractional bits and divided by 2^14\n\t\tlet abs = (((byte0 & 3) << 8) | byte1) / (1 << 24)\n\t\treturn (byte0 & 0x80) ? -abs : abs\n\t}\n\n\tu8Array[3] = (byte0 & 0x80) | // sign bit\n\t\t((exponent >> 1) + 56) // 4 of 5 of the exponent bits, re-offset-ed\n\tu8Array[2] = ((byte0 & 7) << 5) | // last exponent bit and first two mantissa bits\n\t\t(byte1 >> 3) // next 5 bits of mantissa\n\tu8Array[1] = byte1 << 5; // last three bits of mantissa\n\tu8Array[0] = 0;\n\treturn f32Array[0];\n}\n\nlet keyCache = new Array(4096)\nfunction readKey() {\n\tlet length = src[position++]\n\tif (length >= 0x60 && length < 0x78) {\n\t\t// fixstr, potentially use key cache\n\t\tlength = length - 0x60\n\t\tif (srcStringEnd >= position) // if it has been extracted, must use it (and faster anyway)\n\t\t\treturn srcString.slice(position - srcStringStart, (position += length) - srcStringStart)\n\t\telse if (!(srcStringEnd == 0 && srcEnd < 180))\n\t\t\treturn readFixedString(length)\n\t} else { // not cacheable, go back and do a standard read\n\t\tposition--\n\t\treturn read()\n\t}\n\tlet key = ((length << 5) ^ (length > 1 ? dataView.getUint16(position) : length > 0 ? src[position] : 0)) & 0xfff\n\tlet entry = keyCache[key]\n\tlet checkPosition = position\n\tlet end = position + length - 3\n\tlet chunk\n\tlet i = 0\n\tif (entry && entry.bytes == length) {\n\t\twhile (checkPosition < end) {\n\t\t\tchunk = dataView.getUint32(checkPosition)\n\t\t\tif (chunk != entry[i++]) {\n\t\t\t\tcheckPosition = 0x70000000\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcheckPosition += 4\n\t\t}\n\t\tend += 3\n\t\twhile (checkPosition < end) {\n\t\t\tchunk = src[checkPosition++]\n\t\t\tif (chunk != entry[i++]) {\n\t\t\t\tcheckPosition = 0x70000000\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (checkPosition === end) {\n\t\t\tposition = checkPosition\n\t\t\treturn entry.string\n\t\t}\n\t\tend -= 3\n\t\tcheckPosition = position\n\t}\n\tentry = []\n\tkeyCache[key] = entry\n\tentry.bytes = length\n\twhile (checkPosition < end) {\n\t\tchunk = dataView.getUint32(checkPosition)\n\t\tentry.push(chunk)\n\t\tcheckPosition += 4\n\t}\n\tend += 3\n\twhile (checkPosition < end) {\n\t\tchunk = src[checkPosition++]\n\t\tentry.push(chunk)\n\t}\n\t// for small blocks, avoiding the overhead of the extract call is helpful\n\tlet string = length < 16 ? shortStringInJS(length) : longStringInJS(length)\n\tif (string != null)\n\t\treturn entry.string = string\n\treturn entry.string = readFixedString(length)\n}\n\nexport class Tag {\n\tconstructor(value, tag) {\n\t\tthis.value = value\n\t\tthis.tag = tag\n\t}\n}\n\ncurrentExtensions[0] = (dateString) => {\n\t// string date extension\n\treturn new Date(dateString)\n}\n\ncurrentExtensions[1] = (epochSec) => {\n\t// numeric date extension\n\treturn new Date(Math.round(epochSec * 1000))\n}\n\ncurrentExtensions[2] = (buffer) => {\n\t// bigint extension\n\tlet value = BigInt(0)\n\tfor (let i = 0, l = buffer.byteLength; i < l; i++) {\n\t\tvalue = BigInt(buffer[i]) + (value << BigInt(8))\n\t}\n\treturn value\n}\n\ncurrentExtensions[3] = (buffer) => {\n\t// negative bigint extension\n\treturn BigInt(-1) - currentExtensions[2](buffer)\n}\ncurrentExtensions[4] = (fraction) => {\n\t// best to reparse to maintain accuracy\n\treturn +(fraction[1] + 'e' + fraction[0])\n}\n\ncurrentExtensions[5] = (fraction) => {\n\t// probably not sufficiently accurate\n\treturn fraction[1] * Math.exp(fraction[0] * Math.log(2))\n}\n\n// the registration of the record definition extension\nconst recordDefinition = (id, structure) => {\n\tid = id - 0xe000\n\tlet existingStructure = currentStructures[id]\n\tif (existingStructure && existingStructure.isShared) {\n\t\t(currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure\n\t}\n\tcurrentStructures[id] = structure\n\n\tstructure.read = createStructureReader(structure)\n}\ncurrentExtensions[LEGACY_RECORD_INLINE_ID] = (data) => {\n\tlet length = data.length\n\tlet structure = data[1]\n\trecordDefinition(data[0], structure)\n\tlet object = {}\n\tfor (let i = 2; i < length; i++) {\n\t\tlet key = structure[i - 2]\n\t\tobject[safeKey(key)] = data[i]\n\t}\n\treturn object\n}\ncurrentExtensions[14] = (value) => {\n\tif (bundledStrings)\n\t\treturn bundledStrings[0].slice(bundledStrings.position0, bundledStrings.position0 += value)\n\treturn new Tag(value, 14)\n}\ncurrentExtensions[15] = (value) => {\n\tif (bundledStrings)\n\t\treturn bundledStrings[1].slice(bundledStrings.position1, bundledStrings.position1 += value)\n\treturn new Tag(value, 15)\n}\nlet glbl = { Error, RegExp }\ncurrentExtensions[27] = (data) => { // http://cbor.schmorp.de/generic-object\n\treturn (glbl[data[0]] || Error)(data[1], data[2])\n}\nconst packedTable = (read) => {\n\tif (src[position++] != 0x84) {\n\t\tlet error = new Error('Packed values structure must be followed by a 4 element array')\n\t\tif (src.length < position)\n\t\t\terror.incomplete = true\n\t\tthrow error\n\t}\n\tlet newPackedValues = read() // packed values\n\tif (!newPackedValues || !newPackedValues.length) {\n\t\tlet error = new Error('Packed values structure must be followed by a 4 element array')\n\t\terror.incomplete = true\n\t\tthrow error\n\t}\n\tpackedValues = packedValues ? newPackedValues.concat(packedValues.slice(newPackedValues.length)) : newPackedValues\n\tpackedValues.prefixes = read()\n\tpackedValues.suffixes = read()\n\treturn read() // read the rump\n}\npackedTable.handlesRead = true\ncurrentExtensions[51] = packedTable\n\ncurrentExtensions[PACKED_REFERENCE_TAG_ID] = (data) => { // packed reference\n\tif (!packedValues) {\n\t\tif (currentDecoder.getShared)\n\t\t\tloadShared()\n\t\telse\n\t\t\treturn new Tag(data, PACKED_REFERENCE_TAG_ID)\n\t}\n\tif (typeof data == 'number')\n\t\treturn packedValues[16 + (data >= 0 ? 2 * data : (-2 * data - 1))]\n\tlet error = new Error('No support for non-integer packed references yet')\n\tif (data === undefined)\n\t\terror.incomplete = true\n\tthrow error\n}\n\n// The following code is an incomplete implementation of http://cbor.schmorp.de/stringref\n// the real thing would need to implemennt more logic to populate the stringRefs table and\n// maintain a stack of stringRef \"namespaces\".\n//\n// currentExtensions[25] = (id) => {\n// \treturn stringRefs[id]\n// }\n// currentExtensions[256] = (read) => {\n// \tstringRefs = []\n// \ttry {\n// \t\treturn read()\n// \t} finally {\n// \t\tstringRefs = null\n// \t}\n// }\n// currentExtensions[256].handlesRead = true\n\ncurrentExtensions[28] = (read) => { \n\t// shareable http://cbor.schmorp.de/value-sharing (for structured clones)\n\tif (!referenceMap) {\n\t\treferenceMap = new Map()\n\t\treferenceMap.id = 0\n\t}\n\tlet id = referenceMap.id++\n\tlet startingPosition = position\n\tlet token = src[position]\n\tlet target\n\t// TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n\t// ahead past references to record structure definitions\n\tif ((token >> 5) == 4)\n\t\ttarget = []\n\telse\n\t\ttarget = {}\n\n\tlet refEntry = { target } // a placeholder object\n\treferenceMap.set(id, refEntry)\n\tlet targetProperties = read() // read the next value as the target object to id\n\tif (refEntry.used) {// there is a cycle, so we have to assign properties to original target\n\t\tif (Object.getPrototypeOf(target) !== Object.getPrototypeOf(targetProperties)) {\n\t\t\t// this means that the returned target does not match the targetProperties, so we need rerun the read to\n\t\t\t// have the correctly create instance be assigned as a reference, then we do the copy the properties back to the\n\t\t\t// target\n\t\t\t// reset the position so that the read can be repeated\n\t\t\tposition = startingPosition\n\t\t\t// the returned instance is our new target for references\n\t\t\ttarget = targetProperties\n\t\t\treferenceMap.set(id, { target })\n\t\t\ttargetProperties = read()\n\t\t}\n\t\treturn Object.assign(target, targetProperties)\n\t}\n\trefEntry.target = targetProperties // the placeholder wasn't used, replace with the deserialized one\n\treturn targetProperties // no cycle, can just use the returned read object\n}\ncurrentExtensions[28].handlesRead = true\n\ncurrentExtensions[29] = (id) => {\n\t// sharedref http://cbor.schmorp.de/value-sharing (for structured clones)\n\tlet refEntry = referenceMap.get(id)\n\trefEntry.used = true\n\treturn refEntry.target\n}\n\ncurrentExtensions[258] = (array) => new Set(array); // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n(currentExtensions[259] = (read) => {\n\t// https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec\n\t// for decoding as a standard Map\n\tif (currentDecoder.mapsAsObjects) {\n\t\tcurrentDecoder.mapsAsObjects = false\n\t\trestoreMapsAsObject = true\n\t}\n\treturn read()\n}).handlesRead = true\nfunction combine(a, b) {\n\tif (typeof a === 'string')\n\t\treturn a + b\n\tif (a instanceof Array)\n\t\treturn a.concat(b)\n\treturn Object.assign({}, a, b)\n}\nfunction getPackedValues() {\n\tif (!packedValues) {\n\t\tif (currentDecoder.getShared)\n\t\t\tloadShared()\n\t\telse\n\t\t\tthrow new Error('No packed values available')\n\t}\n\treturn packedValues\n}\nconst SHARED_DATA_TAG_ID = 0x53687264 // ascii 'Shrd'\ncurrentExtensionRanges.push((tag, input) => {\n\tif (tag >= 225 && tag <= 255)\n\t\treturn combine(getPackedValues().prefixes[tag - 224], input)\n\tif (tag >= 28704 && tag <= 32767)\n\t\treturn combine(getPackedValues().prefixes[tag - 28672], input)\n\tif (tag >= 1879052288 && tag <= 2147483647)\n\t\treturn combine(getPackedValues().prefixes[tag - 1879048192], input)\n\tif (tag >= 216 && tag <= 223)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 216])\n\tif (tag >= 27647 && tag <= 28671)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 27639])\n\tif (tag >= 1811940352 && tag <= 1879048191)\n\t\treturn combine(input, getPackedValues().suffixes[tag - 1811939328])\n\tif (tag == SHARED_DATA_TAG_ID) {// we do a special check for this so that we can keep the currentExtensions as densely stored array (v8 stores arrays densely under about 3000 elements)\n\t\treturn {\n\t\t\tpackedValues: packedValues,\n\t\t\tstructures: currentStructures.slice(0),\n\t\t\tversion: input,\n\t\t}\n\t}\n\tif (tag == 55799) // self-descriptive CBOR tag, just return input value\n\t\treturn input\n})\n\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1\nexport const typedArrays = [Uint8Array, Uint8ClampedArray, Uint16Array, Uint32Array,\n\ttypeof BigUint64Array == 'undefined' ? { name:'BigUint64Array' } : BigUint64Array, Int8Array, Int16Array, Int32Array,\n\ttypeof BigInt64Array == 'undefined' ? { name:'BigInt64Array' } : BigInt64Array, Float32Array, Float64Array]\nconst typedArrayTags = [64, 68, 69, 70, 71, 72, 77, 78, 79, 85, 86]\nfor (let i = 0; i < typedArrays.length; i++) {\n\tregisterTypedArray(typedArrays[i], typedArrayTags[i])\n}\nfunction registerTypedArray(TypedArray, tag) {\n\tlet dvMethod = 'get' + TypedArray.name.slice(0, -5)\n\tlet bytesPerElement;\n\tif (typeof TypedArray === 'function')\n\t\tbytesPerElement = TypedArray.BYTES_PER_ELEMENT;\n\telse\n\t\tTypedArray = null;\n\tfor (let littleEndian = 0; littleEndian < 2; littleEndian++) {\n\t\tif (!littleEndian && bytesPerElement == 1)\n\t\t\tcontinue\n\t\tlet sizeShift = bytesPerElement == 2 ? 1 : bytesPerElement == 4 ? 2 : bytesPerElement == 8 ? 3 : 0\n\t\tcurrentExtensions[littleEndian ? tag : (tag - 4)] = (bytesPerElement == 1 || littleEndian == isLittleEndianMachine) ? (buffer) => {\n\t\t\tif (!TypedArray)\n\t\t\t\tthrow new Error('Could not find typed array for code ' + tag)\n\t\t\tif (!currentDecoder.copyBuffers) {\n\t\t\t\t// try provide a direct view, but will only work if we are byte-aligned\n\t\t\t\tif (bytesPerElement === 1 ||\n\t\t\t\t\tbytesPerElement === 2 && !(buffer.byteOffset & 1) ||\n\t\t\t\t\tbytesPerElement === 4 && !(buffer.byteOffset & 3) ||\n\t\t\t\t\tbytesPerElement === 8 && !(buffer.byteOffset & 7))\n\t\t\t\t\treturn new TypedArray(buffer.buffer, buffer.byteOffset, buffer.byteLength >> sizeShift);\n\t\t\t}\n\t\t\t// we have to slice/copy here to get a new ArrayBuffer, if we are not word/byte aligned\n\t\t\treturn new TypedArray(Uint8Array.prototype.slice.call(buffer, 0).buffer)\n\t\t} : buffer => {\n\t\t\tif (!TypedArray)\n\t\t\t\tthrow new Error('Could not find typed array for code ' + tag)\n\t\t\tlet dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n\t\t\tlet elements = buffer.length >> sizeShift\n\t\t\tlet ta = new TypedArray(elements)\n\t\t\tlet method = dv[dvMethod]\n\t\t\tfor (let i = 0; i < elements; i++) {\n\t\t\t\tta[i] = method.call(dv, i << sizeShift, littleEndian)\n\t\t\t}\n\t\t\treturn ta\n\t\t}\n\t}\n}\n\nfunction readBundleExt() {\n\tlet length = readJustLength()\n\tlet bundlePosition = position + read()\n\tfor (let i = 2; i < length; i++) {\n\t\t// skip past bundles that were already read\n\t\tlet bundleLength = readJustLength() // this will increment position, so must add to position afterwards\n\t\tposition += bundleLength\n\t}\n\tlet dataPosition = position\n\tposition = bundlePosition\n\tbundledStrings = [readStringJS(readJustLength()), readStringJS(readJustLength())]\n\tbundledStrings.position0 = 0\n\tbundledStrings.position1 = 0\n\tbundledStrings.postBundlePosition = position\n\tposition = dataPosition\n\treturn read()\n}\n\nfunction readJustLength() {\n\tlet token = src[position++] & 0x1f\n\tif (token > 0x17) {\n\t\tswitch (token) {\n\t\t\tcase 0x18:\n\t\t\t\ttoken = src[position++]\n\t\t\t\tbreak\n\t\t\tcase 0x19:\n\t\t\t\ttoken = dataView.getUint16(position)\n\t\t\t\tposition += 2\n\t\t\t\tbreak\n\t\t\tcase 0x1a:\n\t\t\t\ttoken = dataView.getUint32(position)\n\t\t\t\tposition += 4\n\t\t\t\tbreak\n\t\t}\n\t}\n\treturn token\n}\n\nfunction loadShared() {\n\tif (currentDecoder.getShared) {\n\t\tlet sharedData = saveState(() => {\n\t\t\t// save the state in case getShared modifies our buffer\n\t\t\tsrc = null\n\t\t\treturn currentDecoder.getShared()\n\t\t}) || {}\n\t\tlet updatedStructures = sharedData.structures || []\n\t\tcurrentDecoder.sharedVersion = sharedData.version\n\t\tpackedValues = currentDecoder.sharedValues = sharedData.packedValues\n\t\tif (currentStructures === true)\n\t\t\tcurrentDecoder.structures = currentStructures = updatedStructures\n\t\telse\n\t\t\tcurrentStructures.splice.apply(currentStructures, [0, updatedStructures.length].concat(updatedStructures))\n\t}\n}\n\nfunction saveState(callback) {\n\tlet savedSrcEnd = srcEnd\n\tlet savedPosition = position\n\tlet savedStringPosition = stringPosition\n\tlet savedSrcStringStart = srcStringStart\n\tlet savedSrcStringEnd = srcStringEnd\n\tlet savedSrcString = srcString\n\tlet savedStrings = strings\n\tlet savedReferenceMap = referenceMap\n\tlet savedBundledStrings = bundledStrings\n\n\t// TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)\n\tlet savedSrc = new Uint8Array(src.slice(0, srcEnd)) // we copy the data in case it changes while external data is processed\n\tlet savedStructures = currentStructures\n\tlet savedDecoder = currentDecoder\n\tlet savedSequentialMode = sequentialMode\n\tlet value = callback()\n\tsrcEnd = savedSrcEnd\n\tposition = savedPosition\n\tstringPosition = savedStringPosition\n\tsrcStringStart = savedSrcStringStart\n\tsrcStringEnd = savedSrcStringEnd\n\tsrcString = savedSrcString\n\tstrings = savedStrings\n\treferenceMap = savedReferenceMap\n\tbundledStrings = savedBundledStrings\n\tsrc = savedSrc\n\tsequentialMode = savedSequentialMode\n\tcurrentStructures = savedStructures\n\tcurrentDecoder = savedDecoder\n\tdataView = new DataView(src.buffer, src.byteOffset, src.byteLength)\n\treturn value\n}\nexport function clearSource() {\n\tsrc = null\n\treferenceMap = null\n\tcurrentStructures = null\n}\n\nexport function addExtension(extension) {\n\tcurrentExtensions[extension.tag] = extension.decode\n}\n\nexport function setSizeLimits(limits) {\n\tif (limits.maxMapSize) maxMapSize = limits.maxMapSize;\n\tif (limits.maxArraySize) maxArraySize = limits.maxArraySize;\n\tif (limits.maxObjectSize) maxObjectSize = limits.maxObjectSize;\n}\n\nexport const mult10 = new Array(147) // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor (let i = 0; i < 256; i++) {\n\tmult10[i] = +('1e' + Math.floor(45.15 - i * 0.30103))\n}\nlet defaultDecoder = new Decoder({ useRecords: false })\nexport const decode = defaultDecoder.decode\nexport const decodeMultiple = defaultDecoder.decodeMultiple\nexport const FLOAT32_OPTIONS = {\n\tNEVER: 0,\n\tALWAYS: 1,\n\tDECIMAL_ROUND: 3,\n\tDECIMAL_FIT: 4\n}\nexport function roundFloat32(float32Number) {\n\tf32Array[0] = float32Number\n\tlet multiplier = mult10[((u8Array[3] & 0x7f) << 1) | (u8Array[2] >> 7)]\n\treturn ((multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5)) >> 0) / multiplier\n}\n", "import { Decoder, mult10, Tag, typedArrays, addExtension as decodeAddExtension } from './decode.js'\nlet textEncoder\ntry {\n\ttextEncoder = new TextEncoder()\n} catch (error) {}\nlet extensions, extensionClasses\nconst Buffer = typeof globalThis === 'object' && globalThis.Buffer;\nconst hasNodeBuffer = typeof Buffer !== 'undefined'\nconst ByteArrayAllocate = hasNodeBuffer ? Buffer.allocUnsafeSlow : Uint8Array\nconst ByteArray = hasNodeBuffer ? Buffer : Uint8Array\nconst MAX_STRUCTURES = 0x100\nconst MAX_BUFFER_SIZE = hasNodeBuffer ? 0x100000000 : 0x7fd00000\nlet serializationId = 1\nlet throwOnIterable\nlet target\nlet targetView\nlet position = 0\nlet safeEnd\nlet bundledStrings = null\nconst MAX_BUNDLE_SIZE = 0xf000\nconst hasNonLatin = /[\\u0080-\\uFFFF]/\nconst RECORD_SYMBOL = Symbol('record-id')\nexport class Encoder extends Decoder {\n\tconstructor(options) {\n\t\tsuper(options)\n\t\tthis.offset = 0\n\t\tlet typeBuffer\n\t\tlet start\n\t\tlet sharedStructures\n\t\tlet hasSharedUpdate\n\t\tlet structures\n\t\tlet referenceMap\n\t\toptions = options || {}\n\t\tlet encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position, maxBytes) {\n\t\t\treturn target.utf8Write(string, position, maxBytes)\n\t\t} : (textEncoder && textEncoder.encodeInto) ?\n\t\t\tfunction(string, position) {\n\t\t\t\treturn textEncoder.encodeInto(string, target.subarray(position)).written\n\t\t\t} : false\n\n\t\tlet encoder = this\n\t\tlet hasSharedStructures = options.structures || options.saveStructures\n\t\tlet maxSharedStructures = options.maxSharedStructures\n\t\tif (maxSharedStructures == null)\n\t\t\tmaxSharedStructures = hasSharedStructures ? 128 : 0\n\t\tif (maxSharedStructures > 8190)\n\t\t\tthrow new Error('Maximum maxSharedStructure is 8190')\n\t\tlet isSequential = options.sequential\n\t\tif (isSequential) {\n\t\t\tmaxSharedStructures = 0\n\t\t}\n\t\tif (!this.structures)\n\t\t\tthis.structures = []\n\t\tif (this.saveStructures)\n\t\t\tthis.saveShared = this.saveStructures\n\t\tlet samplingPackedValues, packedObjectMap, sharedValues = options.sharedValues\n\t\tlet sharedPackedObjectMap\n\t\tif (sharedValues) {\n\t\t\tsharedPackedObjectMap = Object.create(null)\n\t\t\tfor (let i = 0, l = sharedValues.length; i < l; i++) {\n\t\t\t\tsharedPackedObjectMap[sharedValues[i]] = i\n\t\t\t}\n\t\t}\n\t\tlet recordIdsToRemove = []\n\t\tlet transitionsCount = 0\n\t\tlet serializationsSinceTransitionRebuild = 0\n\t\t\n\t\tthis.mapEncode = function(value, encodeOptions) {\n\t\t\t// Experimental support for premapping keys using _keyMap instad of keyMap - not optiimised yet)\n\t\t\tif (this._keyMap && !this._mapped) {\n\t\t\t\t//console.log('encoding ', value)\n\t\t\t\tswitch (value.constructor.name) {\n\t\t\t\t\tcase 'Array': \n\t\t\t\t\t\tvalue = value.map(r => this.encodeKeys(r))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t//case 'Map': \n\t\t\t\t\t//\tvalue = this.encodeKeys(value)\n\t\t\t\t\t//\tbreak\n\t\t\t\t}\n\t\t\t\t//this._mapped = true\n\t\t\t}\n\t\t\treturn this.encode(value, encodeOptions)\n\t\t}\n\t\t\n\t\tthis.encode = function(value, encodeOptions)\t{\n\t\t\tif (!target) {\n\t\t\t\ttarget = new ByteArrayAllocate(8192)\n\t\t\t\ttargetView = new DataView(target.buffer, 0, 8192)\n\t\t\t\tposition = 0\n\t\t\t}\n\t\t\tsafeEnd = target.length - 10\n\t\t\tif (safeEnd - position < 0x800) {\n\t\t\t\t// don't start too close to the end, \n\t\t\t\ttarget = new ByteArrayAllocate(target.length)\n\t\t\t\ttargetView = new DataView(target.buffer, 0, target.length)\n\t\t\t\tsafeEnd = target.length - 10\n\t\t\t\tposition = 0\n\t\t\t} else if (encodeOptions === REUSE_BUFFER_MODE)\n\t\t\t\tposition = (position + 7) & 0x7ffffff8 // Word align to make any future copying of this buffer faster\n\t\t\tstart = position\n\t\t\tif (encoder.useSelfDescribedHeader) {\n\t\t\t\ttargetView.setUint32(position, 0xd9d9f700) // tag two byte, then self-descriptive tag\n\t\t\t\tposition += 3\n\t\t\t}\n\t\t\treferenceMap = encoder.structuredClone ? new Map() : null\n\t\t\tif (encoder.bundleStrings && typeof value !== 'string') {\n\t\t\t\tbundledStrings = []\n\t\t\t\tbundledStrings.size = Infinity // force a new bundle start on first string\n\t\t\t} else\n\t\t\t\tbundledStrings = null\n\n\t\t\tsharedStructures = encoder.structures\n\t\t\tif (sharedStructures) {\n\t\t\t\tif (sharedStructures.uninitialized) {\n\t\t\t\t\tlet sharedData = encoder.getShared() || {}\n\t\t\t\t\tencoder.structures = sharedStructures = sharedData.structures || []\n\t\t\t\t\tencoder.sharedVersion = sharedData.version\n\t\t\t\t\tlet sharedValues = encoder.sharedValues = sharedData.packedValues\n\t\t\t\t\tif (sharedValues) {\n\t\t\t\t\t\tsharedPackedObjectMap = {}\n\t\t\t\t\t\tfor (let i = 0, l = sharedValues.length; i < l; i++)\n\t\t\t\t\t\t\tsharedPackedObjectMap[sharedValues[i]] = i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet sharedStructuresLength = sharedStructures.length\n\t\t\t\tif (sharedStructuresLength > maxSharedStructures && !isSequential)\n\t\t\t\t\tsharedStructuresLength = maxSharedStructures\n\t\t\t\tif (!sharedStructures.transitions) {\n\t\t\t\t\t// rebuild our structure transitions\n\t\t\t\t\tsharedStructures.transitions = Object.create(null)\n\t\t\t\t\tfor (let i = 0; i < sharedStructuresLength; i++) {\n\t\t\t\t\t\tlet keys = sharedStructures[i]\n\t\t\t\t\t\t//console.log('shared struct keys:', keys)\n\t\t\t\t\t\tif (!keys)\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\tlet nextTransition, transition = sharedStructures.transitions\n\t\t\t\t\t\tfor (let j = 0, l = keys.length; j < l; j++) {\n\t\t\t\t\t\t\tif (transition[RECORD_SYMBOL] === undefined)\n\t\t\t\t\t\t\t\ttransition[RECORD_SYMBOL] = i\n\t\t\t\t\t\t\tlet key = keys[j]\n\t\t\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttransition = nextTransition\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransition[RECORD_SYMBOL] = i | 0x100000\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!isSequential)\n\t\t\t\t\tsharedStructures.nextId = sharedStructuresLength\n\t\t\t}\n\t\t\tif (hasSharedUpdate)\n\t\t\t\thasSharedUpdate = false\n\t\t\tstructures = sharedStructures || []\n\t\t\tpackedObjectMap = sharedPackedObjectMap\n\t\t\tif (options.pack) {\n\t\t\t\tlet packedValues = new Map()\n\t\t\t\tpackedValues.values = []\n\t\t\t\tpackedValues.encoder = encoder\n\t\t\t\tpackedValues.maxValues = options.maxPrivatePackedValues || (sharedPackedObjectMap ? 16 : Infinity)\n\t\t\t\tpackedValues.objectMap = sharedPackedObjectMap || false\n\t\t\t\tpackedValues.samplingPackedValues = samplingPackedValues\n\t\t\t\tfindRepetitiveStrings(value, packedValues)\n\t\t\t\tif (packedValues.values.length > 0) {\n\t\t\t\t\ttarget[position++] = 0xd8 // one-byte tag\n\t\t\t\t\ttarget[position++] = 51 // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\twriteArrayHeader(4)\n\t\t\t\t\tlet valuesArray = packedValues.values\n\t\t\t\t\tencode(valuesArray)\n\t\t\t\t\twriteArrayHeader(0) // prefixes\n\t\t\t\t\twriteArrayHeader(0) // suffixes\n\t\t\t\t\tpackedObjectMap = Object.create(sharedPackedObjectMap || null)\n\t\t\t\t\tfor (let i = 0, l = valuesArray.length; i < l; i++) {\n\t\t\t\t\t\tpackedObjectMap[valuesArray[i]] = i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrowOnIterable = encodeOptions & THROW_ON_ITERABLE;\n\t\t\ttry {\n\t\t\t\tif (throwOnIterable)\n\t\t\t\t\treturn;\n\t\t\t\tencode(value)\n\t\t\t\tif (bundledStrings) {\n\t\t\t\t\twriteBundles(start, encode)\n\t\t\t\t}\n\t\t\t\tencoder.offset = position // update the offset so next serialization doesn't write over our buffer, but can continue writing to same buffer sequentially\n\t\t\t\tif (referenceMap && referenceMap.idsToInsert) {\n\t\t\t\t\tposition += referenceMap.idsToInsert.length * 2\n\t\t\t\t\tif (position > safeEnd)\n\t\t\t\t\t\tmakeRoom(position)\n\t\t\t\t\tencoder.offset = position\n\t\t\t\t\tlet serialized = insertIds(target.subarray(start, position), referenceMap.idsToInsert)\n\t\t\t\t\treferenceMap = null\n\t\t\t\t\treturn serialized\n\t\t\t\t}\n\t\t\t\tif (encodeOptions & REUSE_BUFFER_MODE) {\n\t\t\t\t\ttarget.start = start\n\t\t\t\t\ttarget.end = position\n\t\t\t\t\treturn target\n\t\t\t\t}\n\t\t\t\treturn target.subarray(start, position) // position can change if we call encode again in saveShared, so we get the buffer now\n\t\t\t} finally {\n\t\t\t\tif (sharedStructures) {\n\t\t\t\t\tif (serializationsSinceTransitionRebuild < 10)\n\t\t\t\t\t\tserializationsSinceTransitionRebuild++\n\t\t\t\t\tif (sharedStructures.length > maxSharedStructures)\n\t\t\t\t\t\tsharedStructures.length = maxSharedStructures\n\t\t\t\t\tif (transitionsCount > 10000) {\n\t\t\t\t\t\t// force a rebuild occasionally after a lot of transitions so it can get cleaned up\n\t\t\t\t\t\tsharedStructures.transitions = null\n\t\t\t\t\t\tserializationsSinceTransitionRebuild = 0\n\t\t\t\t\t\ttransitionsCount = 0\n\t\t\t\t\t\tif (recordIdsToRemove.length > 0)\n\t\t\t\t\t\t\trecordIdsToRemove = []\n\t\t\t\t\t} else if (recordIdsToRemove.length > 0 && !isSequential) {\n\t\t\t\t\t\tfor (let i = 0, l = recordIdsToRemove.length; i < l; i++) {\n\t\t\t\t\t\t\trecordIdsToRemove[i][RECORD_SYMBOL] = undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\trecordIdsToRemove = []\n\t\t\t\t\t\t//sharedStructures.nextId = maxSharedStructures\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (hasSharedUpdate && encoder.saveShared) {\n\t\t\t\t\tif (encoder.structures.length > maxSharedStructures) {\n\t\t\t\t\t\tencoder.structures = encoder.structures.slice(0, maxSharedStructures)\n\t\t\t\t\t}\n\t\t\t\t\t// we can't rely on start/end with REUSE_BUFFER_MODE since they will (probably) change when we save\n\t\t\t\t\tlet returnBuffer = target.subarray(start, position)\n\t\t\t\t\tif (encoder.updateSharedData() === false)\n\t\t\t\t\t\treturn encoder.encode(value) // re-encode if it fails\n\t\t\t\t\treturn returnBuffer\n\t\t\t\t}\n\t\t\t\tif (encodeOptions & RESET_BUFFER_MODE)\n\t\t\t\t\tposition = start\n\t\t\t}\n\t\t}\n\t\tthis.findCommonStringsToPack = () => {\n\t\t\tsamplingPackedValues = new Map()\n\t\t\tif (!sharedPackedObjectMap)\n\t\t\t\tsharedPackedObjectMap = Object.create(null)\n\t\t\treturn (options) => {\n\t\t\t\tlet threshold = options && options.threshold || 4\n\t\t\t\tlet position = this.pack ? options.maxPrivatePackedValues || 16 : 0\n\t\t\t\tif (!sharedValues)\n\t\t\t\t\tsharedValues = this.sharedValues = []\n\t\t\t\tfor (let [ key, status ] of samplingPackedValues) {\n\t\t\t\t\tif (status.count > threshold) {\n\t\t\t\t\t\tsharedPackedObjectMap[key] = position++\n\t\t\t\t\t\tsharedValues.push(key)\n\t\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (this.saveShared && this.updateSharedData() === false) {}\n\t\t\t\tsamplingPackedValues = null\n\t\t\t}\n\t\t}\n\t\tconst encode = (value) => {\n\t\t\tif (position > safeEnd)\n\t\t\t\ttarget = makeRoom(position)\n\n\t\t\tvar type = typeof value\n\t\t\tvar length\n\t\t\tif (type === 'string') {\n\t\t\t\tif (packedObjectMap) {\n\t\t\t\t\tlet packedPosition = packedObjectMap[value]\n\t\t\t\t\tif (packedPosition >= 0) {\n\t\t\t\t\t\tif (packedPosition < 16)\n\t\t\t\t\t\t\ttarget[position++] = packedPosition + 0xe0 // simple values, defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttarget[position++] = 0xc6 // tag 6 defined in https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\t\t\t\t\tif (packedPosition & 1)\n\t\t\t\t\t\t\t\tencode((15 - packedPosition) >> 1)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tencode((packedPosition - 16) >> 1)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn\n/*\t\t\t\t\t\t} else if (packedStatus.serializationId != serializationId) {\n\t\t\t\t\t\t\tpackedStatus.serializationId = serializationId\n\t\t\t\t\t\t\tpackedStatus.count = 1\n\t\t\t\t\t\t\tif (options.sharedPack) {\n\t\t\t\t\t\t\t\tlet sharedCount = packedStatus.sharedCount = (packedStatus.sharedCount || 0) + 1\n\t\t\t\t\t\t\t\tif (shareCount > (options.sharedPack.threshold || 5)) {\n\t\t\t\t\t\t\t\t\tlet sharedPosition = packedStatus.position = packedStatus.nextSharedPosition\n\t\t\t\t\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t\t\t\t\t\tif (sharedPosition < 16)\n\t\t\t\t\t\t\t\t\t\ttarget[position++] = sharedPosition + 0xc0\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} // else any in-doc incrementation?*/\n\t\t\t\t\t} else if (samplingPackedValues && !options.pack) {\n\t\t\t\t\t\tlet status = samplingPackedValues.get(value)\n\t\t\t\t\t\tif (status)\n\t\t\t\t\t\t\tstatus.count++\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tsamplingPackedValues.set(value, {\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet strLength = value.length\n\t\t\t\tif (bundledStrings && strLength >= 4 && strLength < 0x400) {\n\t\t\t\t\tif ((bundledStrings.size += strLength) > MAX_BUNDLE_SIZE) {\n\t\t\t\t\t\tlet extStart\n\t\t\t\t\t\tlet maxBytes = (bundledStrings[0] ? bundledStrings[0].length * 3 + bundledStrings[1].length : 0) + 10\n\t\t\t\t\t\tif (position + maxBytes > safeEnd)\n\t\t\t\t\t\t\ttarget = makeRoom(position + maxBytes)\n\t\t\t\t\t\ttarget[position++] = 0xd9 // tag 16-bit\n\t\t\t\t\t\ttarget[position++] = 0xdf // tag 0xdff9\n\t\t\t\t\t\ttarget[position++] = 0xf9\n\t\t\t\t\t\t// TODO: If we only have one bundle with any string data, only write one string bundle\n\t\t\t\t\t\ttarget[position++] = bundledStrings.position ? 0x84 : 0x82 // array of 4 or 2 elements depending on if we write bundles\n\t\t\t\t\t\ttarget[position++] = 0x1a // 32-bit unsigned int\n\t\t\t\t\t\textStart = position - start\n\t\t\t\t\t\tposition += 4 // reserve for writing bundle reference\n\t\t\t\t\t\tif (bundledStrings.position) {\n\t\t\t\t\t\t\twriteBundles(start, encode) // write the last bundles\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbundledStrings = ['', ''] // create new ones\n\t\t\t\t\t\tbundledStrings.size = 0\n\t\t\t\t\t\tbundledStrings.position = extStart\n\t\t\t\t\t}\n\t\t\t\t\tlet twoByte = hasNonLatin.test(value)\n\t\t\t\t\tbundledStrings[twoByte ? 0 : 1] += value\n\t\t\t\t\ttarget[position++] = twoByte ? 0xce : 0xcf\n\t\t\t\t\tencode(strLength);\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlet headerSize\n\t\t\t\t// first we estimate the header size, so we can write to the correct location\n\t\t\t\tif (strLength < 0x20) {\n\t\t\t\t\theaderSize = 1\n\t\t\t\t} else if (strLength < 0x100) {\n\t\t\t\t\theaderSize = 2\n\t\t\t\t} else if (strLength < 0x10000) {\n\t\t\t\t\theaderSize = 3\n\t\t\t\t} else {\n\t\t\t\t\theaderSize = 5\n\t\t\t\t}\n\t\t\t\tlet maxBytes = strLength * 3\n\t\t\t\tif (position + maxBytes > safeEnd)\n\t\t\t\t\ttarget = makeRoom(position + maxBytes)\n\n\t\t\t\tif (strLength < 0x40 || !encodeUtf8) {\n\t\t\t\t\tlet i, c1, c2, strPosition = position + headerSize\n\t\t\t\t\tfor (i = 0; i < strLength; i++) {\n\t\t\t\t\t\tc1 = value.charCodeAt(i)\n\t\t\t\t\t\tif (c1 < 0x80) {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1\n\t\t\t\t\t\t} else if (c1 < 0x800) {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 | 0xc0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t(c1 & 0xfc00) === 0xd800 &&\n\t\t\t\t\t\t\t((c2 = value.charCodeAt(i + 1)) & 0xfc00) === 0xdc00\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tc1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff)\n\t\t\t\t\t\t\ti++\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 18 | 0xf0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 12 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 12 | 0xe0\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 >> 6 & 0x3f | 0x80\n\t\t\t\t\t\t\ttarget[strPosition++] = c1 & 0x3f | 0x80\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlength = strPosition - position - headerSize\n\t\t\t\t} else {\n\t\t\t\t\tlength = encodeUtf8(value, position + headerSize, maxBytes)\n\t\t\t\t}\n\n\t\t\t\tif (length < 0x18) {\n\t\t\t\t\ttarget[position++] = 0x60 | length\n\t\t\t\t} else if (length < 0x100) {\n\t\t\t\t\tif (headerSize < 2) {\n\t\t\t\t\t\ttarget.copyWithin(position + 2, position + 1, position + 1 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x78\n\t\t\t\t\ttarget[position++] = length\n\t\t\t\t} else if (length < 0x10000) {\n\t\t\t\t\tif (headerSize < 3) {\n\t\t\t\t\t\ttarget.copyWithin(position + 3, position + 2, position + 2 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x79\n\t\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t\t} else {\n\t\t\t\t\tif (headerSize < 5) {\n\t\t\t\t\t\ttarget.copyWithin(position + 5, position + 3, position + 3 + length)\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0x7a\n\t\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\t\tposition += 4\n\t\t\t\t}\n\t\t\t\tposition += length\n\t\t\t} else if (type === 'number') {\n\t\t\t\tif (!this.alwaysUseFloat && value >>> 0 === value) {// positive integer, 32-bit or less\n\t\t\t\t\t// positive uint\n\t\t\t\t\tif (value < 0x18) {\n\t\t\t\t\t\ttarget[position++] = value\n\t\t\t\t\t} else if (value < 0x100) {\n\t\t\t\t\t\ttarget[position++] = 0x18\n\t\t\t\t\t\ttarget[position++] = value\n\t\t\t\t\t} else if (value < 0x10000) {\n\t\t\t\t\t\ttarget[position++] = 0x19\n\t\t\t\t\t\ttarget[position++] = value >> 8\n\t\t\t\t\t\ttarget[position++] = value & 0xff\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[position++] = 0x1a\n\t\t\t\t\t\ttargetView.setUint32(position, value)\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t}\n\t\t\t\t} else if (!this.alwaysUseFloat && value >> 0 === value) { // negative integer\n\t\t\t\t\tif (value >= -0x18) {\n\t\t\t\t\t\ttarget[position++] = 0x1f - value\n\t\t\t\t\t} else if (value >= -0x100) {\n\t\t\t\t\t\ttarget[position++] = 0x38\n\t\t\t\t\t\ttarget[position++] = ~value\n\t\t\t\t\t} else if (value >= -0x10000) {\n\t\t\t\t\t\ttarget[position++] = 0x39\n\t\t\t\t\t\ttargetView.setUint16(position, ~value)\n\t\t\t\t\t\tposition += 2\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[position++] = 0x3a\n\t\t\t\t\t\ttargetView.setUint32(position, ~value)\n\t\t\t\t\t\tposition += 4\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet useFloat32\n\t\t\t\t\tif ((useFloat32 = this.useFloat32) > 0 && value < 0x100000000 && value >= -0x80000000) {\n\t\t\t\t\t\ttarget[position++] = 0xfa\n\t\t\t\t\t\ttargetView.setFloat32(position, value)\n\t\t\t\t\t\tlet xShifted\n\t\t\t\t\t\tif (useFloat32 < 4 ||\n\t\t\t\t\t\t\t\t// this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n\t\t\t\t\t\t\t\t((xShifted = value * mult10[((target[position] & 0x7f) << 1) | (target[position + 1] >> 7)]) >> 0) === xShifted) {\n\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tposition-- // move back into position for writing a double\n\t\t\t\t\t}\n\t\t\t\t\ttarget[position++] = 0xfb\n\t\t\t\t\ttargetView.setFloat64(position, value)\n\t\t\t\t\tposition += 8\n\t\t\t\t}\n\t\t\t} else if (type === 'object') {\n\t\t\t\tif (!value)\n\t\t\t\t\ttarget[position++] = 0xf6\n\t\t\t\telse {\n\t\t\t\t\tif (referenceMap) {\n\t\t\t\t\t\tlet referee = referenceMap.get(value)\n\t\t\t\t\t\tif (referee) {\n\t\t\t\t\t\t\ttarget[position++] = 0xd8\n\t\t\t\t\t\t\ttarget[position++] = 29 // http://cbor.schmorp.de/value-sharing\n\t\t\t\t\t\t\ttarget[position++] = 0x19 // 16-bit uint\n\t\t\t\t\t\t\tif (!referee.references) {\n\t\t\t\t\t\t\t\tlet idsToInsert = referenceMap.idsToInsert || (referenceMap.idsToInsert = [])\n\t\t\t\t\t\t\t\treferee.references = []\n\t\t\t\t\t\t\t\tidsToInsert.push(referee)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treferee.references.push(position - start)\n\t\t\t\t\t\t\tposition += 2 // TODO: also support 32-bit\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else \n\t\t\t\t\t\t\treferenceMap.set(value, { offset: position - start })\n\t\t\t\t\t}\n\t\t\t\t\tlet constructor = value.constructor\n\t\t\t\t\tif (constructor === Object) {\n\t\t\t\t\t\twriteObject(value)\n\t\t\t\t\t} else if (constructor === Array) {\n\t\t\t\t\t\tlength = value.length\n\t\t\t\t\t\tif (length < 0x18) {\n\t\t\t\t\t\t\ttarget[position++] = 0x80 | length\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriteArrayHeader(length)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\t\tencode(value[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (constructor === Map) {\n\t\t\t\t\t\tif (this.mapsAsObjects ? this.useTag259ForMaps !== false : this.useTag259ForMaps) {\n\t\t\t\t\t\t\t// use Tag 259 (https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec--explicit-maps.md) for maps if the user wants it that way\n\t\t\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\t\t\ttarget[position++] = 1\n\t\t\t\t\t\t\ttarget[position++] = 3\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlength = value.size\n\t\t\t\t\t\tif (length < 0x18) {\n\t\t\t\t\t\t\ttarget[position++] = 0xa0 | length\n\t\t\t\t\t\t} else if (length < 0x100) {\n\t\t\t\t\t\t\ttarget[position++] = 0xb8\n\t\t\t\t\t\t\ttarget[position++] = length\n\t\t\t\t\t\t} else if (length < 0x10000) {\n\t\t\t\t\t\t\ttarget[position++] = 0xb9\n\t\t\t\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget[position++] = 0xba\n\t\t\t\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (encoder.keyMap) { \n\t\t\t\t\t\t\tfor (let [ key, entryValue ] of value) {\n\t\t\t\t\t\t\t\tencode(encoder.encodeKey(key))\n\t\t\t\t\t\t\t\tencode(entryValue)\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} else { \n\t\t\t\t\t\t\tfor (let [ key, entryValue ] of value) {\n\t\t\t\t\t\t\t\tencode(key) \n\t\t\t\t\t\t\t\tencode(entryValue)\n\t\t\t\t\t\t\t} \t\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = 0, l = extensions.length; i < l; i++) {\n\t\t\t\t\t\t\tlet extensionClass = extensionClasses[i]\n\t\t\t\t\t\t\tif (value instanceof extensionClass) {\n\t\t\t\t\t\t\t\tlet extension = extensions[i]\n\t\t\t\t\t\t\t\tlet tag = extension.tag\n\t\t\t\t\t\t\t\tif (tag == undefined)\n\t\t\t\t\t\t\t\t\ttag = extension.getTag && extension.getTag.call(this, value)\n\t\t\t\t\t\t\t\tif (tag < 0x18) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xc0 | tag\n\t\t\t\t\t\t\t\t} else if (tag < 0x100) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xd8\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag\n\t\t\t\t\t\t\t\t} else if (tag < 0x10000) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag >> 8\n\t\t\t\t\t\t\t\t\ttarget[position++] = tag & 0xff\n\t\t\t\t\t\t\t\t} else if (tag > -1) {\n\t\t\t\t\t\t\t\t\ttarget[position++] = 0xda\n\t\t\t\t\t\t\t\t\ttargetView.setUint32(position, tag)\n\t\t\t\t\t\t\t\t\tposition += 4\n\t\t\t\t\t\t\t\t} // else undefined, don't write tag\n\t\t\t\t\t\t\t\textension.encode.call(this, value, encode, makeRoom)\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value[Symbol.iterator]) {\n\t\t\t\t\t\t\tif (throwOnIterable) {\n\t\t\t\t\t\t\t\tlet error = new Error('Iterable should be serialized as iterator')\n\t\t\t\t\t\t\t\terror.iteratorNotHandled = true;\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttarget[position++] = 0x9f // indefinite length array\n\t\t\t\t\t\t\tfor (let entry of value) {\n\t\t\t\t\t\t\t\tencode(entry)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttarget[position++] = 0xff // stop-code\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value[Symbol.asyncIterator] || isBlob(value)) {\n\t\t\t\t\t\t\tlet error = new Error('Iterable/blob should be serialized as iterator')\n\t\t\t\t\t\t\terror.iteratorNotHandled = true;\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.useToJSON && value.toJSON) {\n\t\t\t\t\t\t\tconst json = value.toJSON()\n\t\t\t\t\t\t\t// if for some reason value.toJSON returns itself it'll loop forever\n\t\t\t\t\t\t\tif (json !== value)\n\t\t\t\t\t\t\t\treturn encode(json)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// no extension found, write as a plain object\n\t\t\t\t\t\twriteObject(value)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (type === 'boolean') {\n\t\t\t\ttarget[position++] = value ? 0xf5 : 0xf4\n\t\t\t} else if (type === 'bigint') {\n\t\t\t\tif (value < (BigInt(1)<<BigInt(64)) && value >= 0) {\n\t\t\t\t\t// use an unsigned int as long as it fits\n\t\t\t\t\ttarget[position++] = 0x1b\n\t\t\t\t\ttargetView.setBigUint64(position, value)\n\t\t\t\t} else if (value > -(BigInt(1)<<BigInt(64)) && value < 0) {\n\t\t\t\t\t// if we can fit an unsigned int, use that\n\t\t\t\t\ttarget[position++] = 0x3b\n\t\t\t\t\ttargetView.setBigUint64(position, -value - BigInt(1))\n\t\t\t\t} else {\n\t\t\t\t\t// overflow\n\t\t\t\t\tif (this.largeBigIntToFloat) {\n\t\t\t\t\t\ttarget[position++] = 0xfb\n\t\t\t\t\t\ttargetView.setFloat64(position, Number(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (value >= BigInt(0))\n\t\t\t\t\t\t\ttarget[position++] = 0xc2 // tag 2\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttarget[position++] = 0xc3 // tag 2\n\t\t\t\t\t\t\tvalue = BigInt(-1) - value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet bytes = [];\n\t\t\t\t\t\twhile (value) {\n\t\t\t\t\t\t\tbytes.push(Number(value & BigInt(0xff)));\n\t\t\t\t\t\t\tvalue >>= BigInt(8);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twriteBuffer(new Uint8Array(bytes.reverse()), makeRoom);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tposition += 8\n\t\t\t} else if (type === 'undefined') {\n\t\t\t\ttarget[position++] = 0xf7\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown type: ' + type)\n\t\t\t}\n\t\t}\n\n\t\tconst writeObject = this.useRecords === false ? this.variableMapSize ? (object) => {\n\t\t\t// this method is slightly slower, but generates \"preferred serialization\" (optimally small for smaller objects)\n\t\t\tlet keys = Object.keys(object)\n\t\t\tlet vals = Object.values(object)\n\t\t\tlet length = keys.length\n\t\t\tif (length < 0x18) {\n\t\t\t\ttarget[position++] = 0xa0 | length\n\t\t\t} else if (length < 0x100) {\n\t\t\t\ttarget[position++] = 0xb8\n\t\t\t\ttarget[position++] = length\n\t\t\t} else if (length < 0x10000) {\n\t\t\t\ttarget[position++] = 0xb9\n\t\t\t\ttarget[position++] = length >> 8\n\t\t\t\ttarget[position++] = length & 0xff\n\t\t\t} else {\n\t\t\t\ttarget[position++] = 0xba\n\t\t\t\ttargetView.setUint32(position, length)\n\t\t\t\tposition += 4\n\t\t\t}\n\t\t\tlet key\n\t\t\tif (encoder.keyMap) { \n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tencode(encoder.encodeKey(keys[i]))\n\t\t\t\t\tencode(vals[i])\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tencode(keys[i])\n\t\t\t\t\tencode(vals[i])\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\t\t(object) => {\n\t\t\ttarget[position++] = 0xb9 // always use map 16, so we can preallocate and set the length afterwards\n\t\t\tlet objectOffset = position - start\n\t\t\tposition += 2\n\t\t\tlet size = 0\n\t\t\tif (encoder.keyMap) {\n\t\t\t\tfor (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {\n\t\t\t\t\tencode(encoder.encodeKey(key))\n\t\t\t\t\tencode(object[key])\n\t\t\t\t\tsize++\n\t\t\t\t}\n\t\t\t} else { \n\t\t\t\tfor (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {\n\t\t\t\t\t\tencode(key)\n\t\t\t\t\t\tencode(object[key])\n\t\t\t\t\tsize++\n\t\t\t\t}\n\t\t\t}\n\t\t\ttarget[objectOffset++ + start] = size >> 8\n\t\t\ttarget[objectOffset + start] = size & 0xff\n\t\t} :\n\t\t(object, skipValues) => {\n\t\t\tlet nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null))\n\t\t\tlet newTransitions = 0\n\t\t\tlet length = 0\n\t\t\tlet parentRecordId\n\t\t\tlet keys\n\t\t\tif (this.keyMap) {\n\t\t\t\tkeys = Object.keys(object).map(k => this.encodeKey(k))\n\t\t\t\tlength = keys.length\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet key = keys[i]\n\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\tnewTransitions++\n\t\t\t\t\t}\n\t\t\t\t\ttransition = nextTransition\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\tfor (let key in object) if (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key)) {\n\t\t\t\t\tnextTransition = transition[key]\n\t\t\t\t\tif (!nextTransition) {\n\t\t\t\t\t\tif (transition[RECORD_SYMBOL] & 0x100000) {// this indicates it is a brancheable/extendable terminal node, so we will use this record id and extend it\n\t\t\t\t\t\t\tparentRecordId = transition[RECORD_SYMBOL] & 0xffff\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextTransition = transition[key] = Object.create(null)\n\t\t\t\t\t\tnewTransitions++\n\t\t\t\t\t}\n\t\t\t\t\ttransition = nextTransition\n\t\t\t\t\tlength++\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet recordId = transition[RECORD_SYMBOL]\n\t\t\tif (recordId !== undefined) {\n\t\t\t\trecordId &= 0xffff\n\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\ttarget[position++] = (recordId >> 8) | 0xe0\n\t\t\t\ttarget[position++] = recordId & 0xff\n\t\t\t} else {\n\t\t\t\tif (!keys)\n\t\t\t\t\tkeys = transition.__keys__ || (transition.__keys__ = Object.keys(object))\n\t\t\t\tif (parentRecordId === undefined) {\n\t\t\t\t\trecordId = structures.nextId++\n\t\t\t\t\tif (!recordId) {\n\t\t\t\t\t\trecordId = 0\n\t\t\t\t\t\tstructures.nextId = 1\n\t\t\t\t\t}\n\t\t\t\t\tif (recordId >= MAX_STRUCTURES) {// cycle back around\n\t\t\t\t\t\tstructures.nextId = (recordId = maxSharedStructures) + 1\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trecordId = parentRecordId\n\t\t\t\t}\n\t\t\t\tstructures[recordId] = keys\n\t\t\t\tif (recordId < maxSharedStructures) {\n\t\t\t\t\ttarget[position++] = 0xd9\n\t\t\t\t\ttarget[position++] = (recordId >> 8) | 0xe0\n\t\t\t\t\ttarget[position++] = recordId & 0xff\n\t\t\t\t\ttransition = structures.transitions\n\t\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\t\tif (transition[RECORD_SYMBOL] === undefined || (transition[RECORD_SYMBOL] & 0x100000))\n\t\t\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId\n\t\t\t\t\t\ttransition = transition[keys[i]]\n\t\t\t\t\t}\n\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId | 0x100000 // indicates it is a extendable terminal\n\t\t\t\t\thasSharedUpdate = true\n\t\t\t\t} else {\n\t\t\t\t\ttransition[RECORD_SYMBOL] = recordId\n\t\t\t\t\ttargetView.setUint32(position, 0xd9dfff00) // tag two byte, then record definition id\n\t\t\t\t\tposition += 3\n\t\t\t\t\tif (newTransitions)\n\t\t\t\t\t\ttransitionsCount += serializationsSinceTransitionRebuild * newTransitions\n\t\t\t\t\t// record the removal of the id, we can maintain our shared structure\n\t\t\t\t\tif (recordIdsToRemove.length >= MAX_STRUCTURES - maxSharedStructures)\n\t\t\t\t\t\trecordIdsToRemove.shift()[RECORD_SYMBOL] = undefined // we are cycling back through, and have to remove old ones\n\t\t\t\t\trecordIdsToRemove.push(transition)\n\t\t\t\t\twriteArrayHeader(length + 2)\n\t\t\t\t\tencode(0xe000 + recordId)\n\t\t\t\t\tencode(keys)\n\t\t\t\t\tif (skipValues) return; // special exit for iterator\n\t\t\t\t\tfor (let key in object)\n\t\t\t\t\t\tif (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key))\n\t\t\t\t\t\t\tencode(object[key])\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (length < 0x18) { // write the array header\n\t\t\t\ttarget[position++] = 0x80 | length\n\t\t\t} else {\n\t\t\t\twriteArrayHeader(length)\n\t\t\t}\n\t\t\tif (skipValues) return; // special exit for iterator\n\t\t\tfor (let key in object)\n\t\t\t\tif (typeof object.hasOwnProperty !== 'function' || object.hasOwnProperty(key))\n\t\t\t\t\tencode(object[key])\n\t\t}\n\t\tconst makeRoom = (end) => {\n\t\t\tlet newSize\n\t\t\tif (end > 0x1000000) {\n\t\t\t\t// special handling for really large buffers\n\t\t\t\tif ((end - start) > MAX_BUFFER_SIZE)\n\t\t\t\t\tthrow new Error('Encoded buffer would be larger than maximum buffer size')\n\t\t\t\tnewSize = Math.min(MAX_BUFFER_SIZE,\n\t\t\t\t\tMath.round(Math.max((end - start) * (end > 0x4000000 ? 1.25 : 2), 0x400000) / 0x1000) * 0x1000)\n\t\t\t} else // faster handling for smaller buffers\n\t\t\t\tnewSize = ((Math.max((end - start) << 2, target.length - 1) >> 12) + 1) << 12\n\t\t\tlet newBuffer = new ByteArrayAllocate(newSize)\n\t\t\ttargetView = new DataView(newBuffer.buffer, 0, newSize)\n\t\t\tif (target.copy)\n\t\t\t\ttarget.copy(newBuffer, 0, start, end)\n\t\t\telse\n\t\t\t\tnewBuffer.set(target.slice(start, end))\n\t\t\tposition -= start\n\t\t\tstart = 0\n\t\t\tsafeEnd = newBuffer.length - 10\n\t\t\treturn target = newBuffer\n\t\t}\n\t\tlet chunkThreshold = 100;\n\t\tlet continuedChunkThreshold = 1000;\n\t\tthis.encodeAsIterable = function(value, options) {\n\t\t\treturn startEncoding(value, options, encodeObjectAsIterable);\n\t\t}\n\t\tthis.encodeAsAsyncIterable = function(value, options) {\n\t\t\treturn startEncoding(value, options, encodeObjectAsAsyncIterable);\n\t\t}\n\n\t\tfunction* encodeObjectAsIterable(object, iterateProperties, finalIterable) {\n\t\t\tlet constructor = object.constructor;\n\t\t\tif (constructor === Object) {\n\t\t\t\tlet useRecords = encoder.useRecords !== false;\n\t\t\t\tif (useRecords)\n\t\t\t\t\twriteObject(object, true); // write the record identifier\n\t\t\t\telse\n\t\t\t\t\twriteEntityLength(Object.keys(object).length, 0xa0);\n\t\t\t\tfor (let key in object) {\n\t\t\t\t\tlet value = object[key];\n\t\t\t\t\tif (!useRecords) encode(key);\n\t\t\t\t\tif (value && typeof value === 'object') {\n\t\t\t\t\t\tif (iterateProperties[key])\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties[key]);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, key);\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t} else if (constructor === Array) {\n\t\t\t\tlet length = object.length;\n\t\t\t\twriteArrayHeader(length);\n\t\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\t\tlet value = object[i];\n\t\t\t\t\tif (value && (typeof value === 'object' || position - start > chunkThreshold)) {\n\t\t\t\t\t\tif (iterateProperties.element)\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties.element);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, 'element');\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t} else if (object[Symbol.iterator] && !object.buffer) { // iterator, but exclude typed arrays\n\t\t\t\ttarget[position++] = 0x9f; // start indefinite array\n\t\t\t\tfor (let value of object) {\n\t\t\t\t\tif (value && (typeof value === 'object' || position - start > chunkThreshold)) {\n\t\t\t\t\t\tif (iterateProperties.element)\n\t\t\t\t\t\t\tyield* encodeObjectAsIterable(value, iterateProperties.element);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tyield* tryEncode(value, iterateProperties, 'element');\n\t\t\t\t\t} else encode(value);\n\t\t\t\t}\n\t\t\t\ttarget[position++] = 0xff; // stop byte\n\t\t\t} else if (isBlob(object)){\n\t\t\t\twriteEntityLength(object.size, 0x40); // encode as binary data\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\tyield object; // directly return blobs, they have to be encoded asynchronously\n\t\t\t\trestartEncoding();\n\t\t\t} else if (object[Symbol.asyncIterator]) {\n\t\t\t\ttarget[position++] = 0x9f; // start indefinite array\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\tyield object; // directly return async iterators, they have to be encoded asynchronously\n\t\t\t\trestartEncoding();\n\t\t\t\ttarget[position++] = 0xff; // stop byte\n\t\t\t} else {\n\t\t\t\tencode(object);\n\t\t\t}\n\t\t\tif (finalIterable && position > start) yield target.subarray(start, position);\n\t\t\telse if (position - start > chunkThreshold) {\n\t\t\t\tyield target.subarray(start, position);\n\t\t\t\trestartEncoding();\n\t\t\t}\n\t\t}\n\t\tfunction* tryEncode(value, iterateProperties, key) {\n\t\t\tlet restart = position - start;\n\t\t\ttry {\n\t\t\t\tencode(value);\n\t\t\t\tif (position - start > chunkThreshold) {\n\t\t\t\t\tyield target.subarray(start, position);\n\t\t\t\t\trestartEncoding();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (error.iteratorNotHandled) {\n\t\t\t\t\titerateProperties[key] = {};\n\t\t\t\t\tposition = start + restart; // restart our position so we don't have partial data from last encode\n\t\t\t\t\tyield* encodeObjectAsIterable.call(this, value, iterateProperties[key]);\n\t\t\t\t} else throw error;\n\t\t\t}\n\t\t}\n\t\tfunction restartEncoding() {\n\t\t\tchunkThreshold = continuedChunkThreshold;\n\t\t\tencoder.encode(null, THROW_ON_ITERABLE); // restart encoding\n\t\t}\n\t\tfunction startEncoding(value, options, encodeIterable) {\n\t\t\tif (options && options.chunkThreshold) // explicitly specified chunk sizes\n\t\t\t\tchunkThreshold = continuedChunkThreshold = options.chunkThreshold;\n\t\t\telse // we start with a smaller threshold to get initial bytes sent quickly\n\t\t\t\tchunkThreshold = 100;\n\t\t\tif (value && typeof value === 'object') {\n\t\t\t\tencoder.encode(null, THROW_ON_ITERABLE); // start encoding\n\t\t\t\treturn encodeIterable(value, encoder.iterateProperties || (encoder.iterateProperties = {}), true);\n\t\t\t}\n\t\t\treturn [encoder.encode(value)];\n\t\t}\n\n\t\tasync function* encodeObjectAsAsyncIterable(value, iterateProperties) {\n\t\t\tfor (let encodedValue of encodeObjectAsIterable(value, iterateProperties, true)) {\n\t\t\t\tlet constructor = encodedValue.constructor;\n\t\t\t\tif (constructor === ByteArray || constructor === Uint8Array)\n\t\t\t\t\tyield encodedValue;\n\t\t\t\telse if (isBlob(encodedValue)) {\n\t\t\t\t\tlet reader = encodedValue.stream().getReader();\n\t\t\t\t\tlet next;\n\t\t\t\t\twhile (!(next = await reader.read()).done) {\n\t\t\t\t\t\tyield next.value;\n\t\t\t\t\t}\n\t\t\t\t} else if (encodedValue[Symbol.asyncIterator]) {\n\t\t\t\t\tfor await (let asyncValue of encodedValue) {\n\t\t\t\t\t\trestartEncoding();\n\t\t\t\t\t\tif (asyncValue)\n\t\t\t\t\t\t\tyield* encodeObjectAsAsyncIterable(asyncValue, iterateProperties.async || (iterateProperties.async = {}));\n\t\t\t\t\t\telse yield encoder.encode(asyncValue);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tyield encodedValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tuseBuffer(buffer) {\n\t\t// this means we are finished using our own buffer and we can write over it safely\n\t\ttarget = buffer\n\t\ttargetView = new DataView(target.buffer, target.byteOffset, target.byteLength)\n\t\tposition = 0\n\t}\n\tclearSharedData() {\n\t\tif (this.structures)\n\t\t\tthis.structures = []\n\t\tif (this.sharedValues)\n\t\t\tthis.sharedValues = undefined\n\t}\n\tupdateSharedData() {\n\t\tlet lastVersion = this.sharedVersion || 0\n\t\tthis.sharedVersion = lastVersion + 1\n\t\tlet structuresCopy = this.structures.slice(0)\n\t\tlet sharedData = new SharedData(structuresCopy, this.sharedValues, this.sharedVersion)\n\t\tlet saveResults = this.saveShared(sharedData,\n\t\t\t\texistingShared => (existingShared && existingShared.version || 0) == lastVersion)\n\t\tif (saveResults === false) {\n\t\t\t// get updated structures and try again if the update failed\n\t\t\tsharedData = this.getShared() || {}\n\t\t\tthis.structures = sharedData.structures || []\n\t\t\tthis.sharedValues = sharedData.packedValues\n\t\t\tthis.sharedVersion = sharedData.version\n\t\t\tthis.structures.nextId = this.structures.length\n\t\t} else {\n\t\t\t// restore structures\n\t\t\tstructuresCopy.forEach((structure, i) => this.structures[i] = structure)\n\t\t}\n\t\t// saveShared may fail to write and reload, or may have reloaded to check compatibility and overwrite saved data, either way load the correct shared data\n\t\treturn saveResults\n\t}\n}\nfunction writeEntityLength(length, majorValue) {\n\tif (length < 0x18)\n\t\ttarget[position++] = majorValue | length\n\telse if (length < 0x100) {\n\t\ttarget[position++] = majorValue | 0x18\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = majorValue | 0x19\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = majorValue | 0x1a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n\n}\nclass SharedData {\n\tconstructor(structures, values, version) {\n\t\tthis.structures = structures\n\t\tthis.packedValues = values\n\t\tthis.version = version\n\t}\n}\n\nfunction writeArrayHeader(length) {\n\tif (length < 0x18)\n\t\ttarget[position++] = 0x80 | length\n\telse if (length < 0x100) {\n\t\ttarget[position++] = 0x98\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = 0x99\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = 0x9a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n}\n\nconst BlobConstructor = typeof Blob === 'undefined' ? function(){} : Blob;\nfunction isBlob(object) {\n\tif (object instanceof BlobConstructor)\n\t\treturn true;\n\tlet tag = object[Symbol.toStringTag];\n\treturn tag === 'Blob' || tag === 'File';\n}\nfunction findRepetitiveStrings(value, packedValues) {\n\tswitch(typeof value) {\n\t\tcase 'string':\n\t\t\tif (value.length > 3) {\n\t\t\t\tif (packedValues.objectMap[value] > -1 || packedValues.values.length >= packedValues.maxValues)\n\t\t\t\t\treturn\n\t\t\t\tlet packedStatus = packedValues.get(value)\n\t\t\t\tif (packedStatus) {\n\t\t\t\t\tif (++packedStatus.count == 2) {\n\t\t\t\t\t\tpackedValues.values.push(value)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpackedValues.set(value, {\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t})\n\t\t\t\t\tif (packedValues.samplingPackedValues) {\n\t\t\t\t\t\tlet status = packedValues.samplingPackedValues.get(value)\n\t\t\t\t\t\tif (status)\n\t\t\t\t\t\t\tstatus.count++\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tpackedValues.samplingPackedValues.set(value, {\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'object':\n\t\t\tif (value) {\n\t\t\t\tif (value instanceof Array) {\n\t\t\t\t\tfor (let i = 0, l = value.length; i < l; i++) {\n\t\t\t\t\t\tfindRepetitiveStrings(value[i], packedValues)\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tlet includeKeys = !packedValues.encoder.useRecords\n\t\t\t\t\tfor (var key in value) {\n\t\t\t\t\t\tif (value.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tif (includeKeys)\n\t\t\t\t\t\t\t\tfindRepetitiveStrings(key, packedValues)\n\t\t\t\t\t\t\tfindRepetitiveStrings(value[key], packedValues)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'function': console.log(value)\n\t}\n}\nconst isLittleEndianMachine = new Uint8Array(new Uint16Array([1]).buffer)[0] == 1\nextensionClasses = [ Date, Set, Error, RegExp, Tag, ArrayBuffer,\n\tUint8Array, Uint8ClampedArray, Uint16Array, Uint32Array,\n\ttypeof BigUint64Array == 'undefined' ? function() {} : BigUint64Array, Int8Array, Int16Array, Int32Array,\n\ttypeof BigInt64Array == 'undefined' ? function() {} : BigInt64Array,\n\tFloat32Array, Float64Array, SharedData ]\n\n//Object.getPrototypeOf(Uint8Array.prototype).constructor /*TypedArray*/\nextensions = [{ // Date\n\ttag: 1,\n\tencode(date, encode) {\n\t\tlet seconds = date.getTime() / 1000\n\t\tif ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 0x100000000) {\n\t\t\t// Timestamp 32\n\t\t\ttarget[position++] = 0x1a\n\t\t\ttargetView.setUint32(position, seconds)\n\t\t\tposition += 4\n\t\t} else {\n\t\t\t// Timestamp float64\n\t\t\ttarget[position++] = 0xfb\n\t\t\ttargetView.setFloat64(position, seconds)\n\t\t\tposition += 8\n\t\t}\n\t}\n}, { // Set\n\ttag: 258, // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md\n\tencode(set, encode) {\n\t\tlet array = Array.from(set)\n\t\tencode(array)\n\t}\n}, { // Error\n\ttag: 27, // http://cbor.schmorp.de/generic-object\n\tencode(error, encode) {\n\t\tencode([ error.name, error.message ])\n\t}\n}, { // RegExp\n\ttag: 27, // http://cbor.schmorp.de/generic-object\n\tencode(regex, encode) {\n\t\tencode([ 'RegExp', regex.source, regex.flags ])\n\t}\n}, { // Tag\n\tgetTag(tag) {\n\t\treturn tag.tag\n\t},\n\tencode(tag, encode) {\n\t\tencode(tag.value)\n\t}\n}, { // ArrayBuffer\n\tencode(arrayBuffer, encode, makeRoom) {\n\t\twriteBuffer(arrayBuffer, makeRoom)\n\t}\n}, { // Uint8Array\n\tgetTag(typedArray) {\n\t\tif (typedArray.constructor === Uint8Array) {\n\t\t\tif (this.tagUint8Array || hasNodeBuffer && this.tagUint8Array !== false)\n\t\t\t\treturn 64;\n\t\t} // else no tag\n\t},\n\tencode(typedArray, encode, makeRoom) {\n\t\twriteBuffer(typedArray, makeRoom)\n\t}\n},\n\ttypedArrayEncoder(68, 1),\n\ttypedArrayEncoder(69, 2),\n\ttypedArrayEncoder(70, 4),\n\ttypedArrayEncoder(71, 8),\n\ttypedArrayEncoder(72, 1),\n\ttypedArrayEncoder(77, 2),\n\ttypedArrayEncoder(78, 4),\n\ttypedArrayEncoder(79, 8),\n\ttypedArrayEncoder(85, 4),\n\ttypedArrayEncoder(86, 8),\n{\n\tencode(sharedData, encode) { // write SharedData\n\t\tlet packedValues = sharedData.packedValues || []\n\t\tlet sharedStructures = sharedData.structures || []\n\t\tif (packedValues.values.length > 0) {\n\t\t\ttarget[position++] = 0xd8 // one-byte tag\n\t\t\ttarget[position++] = 51 // tag 51 for packed shared structures https://www.potaroo.net/ietf/ids/draft-ietf-cbor-packed-03.txt\n\t\t\twriteArrayHeader(4)\n\t\t\tlet valuesArray = packedValues.values\n\t\t\tencode(valuesArray)\n\t\t\twriteArrayHeader(0) // prefixes\n\t\t\twriteArrayHeader(0) // suffixes\n\t\t\tpackedObjectMap = Object.create(sharedPackedObjectMap || null)\n\t\t\tfor (let i = 0, l = valuesArray.length; i < l; i++) {\n\t\t\t\tpackedObjectMap[valuesArray[i]] = i\n\t\t\t}\n\t\t}\n\t\tif (sharedStructures) {\n\t\t\ttargetView.setUint32(position, 0xd9dffe00)\n\t\t\tposition += 3\n\t\t\tlet definitions = sharedStructures.slice(0)\n\t\t\tdefinitions.unshift(0xe000)\n\t\t\tdefinitions.push(new Tag(sharedData.version, 0x53687264))\n\t\t\tencode(definitions)\n\t\t} else\n\t\t\tencode(new Tag(sharedData.version, 0x53687264))\n\t\t}\n\t}]\nfunction typedArrayEncoder(tag, size) {\n\tif (!isLittleEndianMachine && size > 1)\n\t\ttag -= 4 // the big endian equivalents are 4 less\n\treturn {\n\t\ttag: tag,\n\t\tencode: function writeExtBuffer(typedArray, encode) {\n\t\t\tlet length = typedArray.byteLength\n\t\t\tlet offset = typedArray.byteOffset || 0\n\t\t\tlet buffer = typedArray.buffer || typedArray\n\t\t\tencode(hasNodeBuffer ? Buffer.from(buffer, offset, length) :\n\t\t\t\tnew Uint8Array(buffer, offset, length))\n\t\t}\n\t}\n}\nfunction writeBuffer(buffer, makeRoom) {\n\tlet length = buffer.byteLength\n\tif (length < 0x18) {\n\t\ttarget[position++] = 0x40 + length\n\t} else if (length < 0x100) {\n\t\ttarget[position++] = 0x58\n\t\ttarget[position++] = length\n\t} else if (length < 0x10000) {\n\t\ttarget[position++] = 0x59\n\t\ttarget[position++] = length >> 8\n\t\ttarget[position++] = length & 0xff\n\t} else {\n\t\ttarget[position++] = 0x5a\n\t\ttargetView.setUint32(position, length)\n\t\tposition += 4\n\t}\n\tif (position + length >= target.length) {\n\t\tmakeRoom(position + length)\n\t}\n\t// if it is already a typed array (has an ArrayBuffer), use that, but if it is an ArrayBuffer itself,\n\t// must wrap it to set it.\n\ttarget.set(buffer.buffer ? buffer : new Uint8Array(buffer), position)\n\tposition += length\n}\n\nfunction insertIds(serialized, idsToInsert) {\n\t// insert the ids that need to be referenced for structured clones\n\tlet nextId\n\tlet distanceToMove = idsToInsert.length * 2\n\tlet lastEnd = serialized.length - distanceToMove\n\tidsToInsert.sort((a, b) => a.offset > b.offset ? 1 : -1)\n\tfor (let id = 0; id < idsToInsert.length; id++) {\n\t\tlet referee = idsToInsert[id]\n\t\treferee.id = id\n\t\tfor (let position of referee.references) {\n\t\t\tserialized[position++] = id >> 8\n\t\t\tserialized[position] = id & 0xff\n\t\t}\n\t}\n\twhile (nextId = idsToInsert.pop()) {\n\t\tlet offset = nextId.offset\n\t\tserialized.copyWithin(offset + distanceToMove, offset, lastEnd)\n\t\tdistanceToMove -= 2\n\t\tlet position = offset + distanceToMove\n\t\tserialized[position++] = 0xd8\n\t\tserialized[position++] = 28 // http://cbor.schmorp.de/value-sharing\n\t\tlastEnd = offset\n\t}\n\treturn serialized\n}\nfunction writeBundles(start, encode) {\n\ttargetView.setUint32(bundledStrings.position + start, position - bundledStrings.position - start + 1) // the offset to bundle\n\tlet writeStrings = bundledStrings\n\tbundledStrings = null\n\tencode(writeStrings[0])\n\tencode(writeStrings[1])\n}\n\nexport function addExtension(extension) {\n\tif (extension.Class) {\n\t\tif (!extension.encode)\n\t\t\tthrow new Error('Extension has no encode function')\n\t\textensionClasses.unshift(extension.Class)\n\t\textensions.unshift(extension)\n\t}\n\tdecodeAddExtension(extension)\n}\nlet defaultEncoder = new Encoder({ useRecords: false })\nexport const encode = defaultEncoder.encode\nexport const encodeAsIterable = defaultEncoder.encodeAsIterable\nexport const encodeAsAsyncIterable = defaultEncoder.encodeAsAsyncIterable\nexport { FLOAT32_OPTIONS } from './decode.js'\nimport { FLOAT32_OPTIONS } from './decode.js'\nexport const { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS\nexport const REUSE_BUFFER_MODE = 512\nexport const RESET_BUFFER_MODE = 1024\nexport const THROW_ON_ITERABLE = 2048\n\n\n", "import * as A from \"@automerge/automerge/slim/next\";\nimport debug from \"debug\";\nimport { EventEmitter } from \"eventemitter3\";\nimport { assertEvent, assign, createActor, setup, waitFor } from \"xstate\";\nimport { stringifyAutomergeUrl } from \"./AutomergeUrl.js\";\nimport { encode } from \"./helpers/cbor.js\";\nimport { headsAreSame } from \"./helpers/headsAreSame.js\";\nimport { withTimeout } from \"./helpers/withTimeout.js\";\n/**\n * A DocHandle is a wrapper around a single Automerge document that lets us listen for changes and\n * notify the network and storage of new changes.\n *\n * @remarks\n * A `DocHandle` represents a document which is being managed by a {@link Repo}. You shouldn't ever\n * instantiate this yourself. To obtain `DocHandle` use {@link Repo.find} or {@link Repo.create}.\n *\n * To modify the underlying document use either {@link DocHandle.change} or\n * {@link DocHandle.changeAt}. These methods will notify the `Repo` that some change has occured and\n * the `Repo` will save any new changes to the attached {@link StorageAdapter} and send sync\n * messages to connected peers.\n */\nexport class DocHandle extends EventEmitter {\n    documentId;\n    #log;\n    /** The XState actor running our state machine.  */\n    #machine;\n    /** The last known state of our document. */\n    #prevDocState;\n    /** How long to wait before giving up on a document. (Note that a document will be marked\n     * unavailable much sooner if all known peers respond that they don't have it.) */\n    #timeoutDelay = 60_000;\n    /** A dictionary mapping each peer to the last heads we know they have. */\n    #remoteHeads = {};\n    /** @hidden */\n    constructor(documentId, options = {}) {\n        super();\n        this.documentId = documentId;\n        if (\"timeoutDelay\" in options && options.timeoutDelay) {\n            this.#timeoutDelay = options.timeoutDelay;\n        }\n        let doc;\n        const isNew = \"isNew\" in options && options.isNew;\n        if (isNew) {\n            // T should really be constrained to extend `Record<string, unknown>` (an automerge doc can't be\n            // e.g. a primitive, an array, etc. - it must be an object). But adding that constraint creates\n            // a bunch of other problems elsewhere so for now we'll just cast it here to make Automerge happy.\n            doc = A.from(options.initialValue);\n            doc = A.emptyChange(doc);\n        }\n        else {\n            doc = A.init();\n        }\n        this.#log = debug(`automerge-repo:dochandle:${this.documentId.slice(0, 5)}`);\n        const delay = this.#timeoutDelay;\n        const machine = setup({\n            types: {\n                context: {},\n                events: {},\n            },\n            actions: {\n                /** Update the doc using the given callback and put the modified doc in context */\n                onUpdate: assign(({ context, event }) => {\n                    const oldDoc = context.doc;\n                    assertEvent(event, UPDATE);\n                    const { callback } = event.payload;\n                    const doc = callback(oldDoc);\n                    return { doc };\n                }),\n                onDelete: assign(() => {\n                    this.emit(\"delete\", { handle: this });\n                    return { doc: undefined };\n                }),\n                onUnavailable: () => {\n                    this.emit(\"unavailable\", { handle: this });\n                },\n            },\n        }).createMachine({\n            /** @xstate-layout N4IgpgJg5mDOIC5QAoC2BDAxgCwJYDswBKAYgFUAFAEQEEAVAUQG0AGAXUVAAcB7WXAC64e+TiAAeiAOwAOAKwA6ACxSAzKqks1ATjlTdAGhABPRAFolAJksKN2y1KtKAbFLla5AX09G0WPISkVAwAMgyMrBxIILz8QiJikggAjCzOijKqLEqqybJyLizaRqYIFpbJtro5Uo7J2o5S3r4YOATECrgQADZgJADCAEoM9MzsYrGCwqLRSeoyCtra8pa5adquySXmDjY5ac7JljLJeepKzSB+bYGdPX0AYgCSAHJUkRN8UwmziM7HCgqyVcUnqcmScmcMm2ZV2yiyzkOx1OalUFx8V1aAQ63R46AgBCgJGGAEUyAwAMp0D7RSbxGagJKHFgKOSWJTJGRSCosCpKaEmRCqbQKU5yXINeTaer6LwY67YogKXH4wkkKgAeX6AH1hjQqABNGncL70xKIJQ5RY5BHOJag6wwpRyEWImQVeT1aWrVSXBXtJUqgn4Ik0ADqNCedG1L3CYY1gwA0saYqbpuaEG4pKLksKpFDgcsCjDhTnxTKpTLdH6sQGFOgAO7oKYhl5gAQNngAJwA1iRY3R40ndSNDSm6enfpm5BkWAVkvy7bpuTCKq7ndZnfVeSwuTX-HWu2AAI4AVzgQhD6q12rILxoADVIyEaAAhMLjtM-RmIE4LVSQi4nLLDIGzOCWwLKA0cgyLBoFWNy+43B0R5nheaqajqepjuMtJfgyEh-FoixqMCoKqOyhzgYKCDOq6UIeuCSxHOoSGKgop74OgABuzbdOgABGvTXlho5GrhJpxJOP4pLulT6KoMhpJY2hzsWNF0QobqMV6LG+pc+A8BAcBiP6gSfFJ36EQgKksksKxrHamwwmY7gLKB85QjBzoAWxdZdL0FnfARST8ooLC7qoTnWBU4pyC5ViVMKBQaHUDQuM4fm3EGhJBWaU7-CysEAUp3LpEpWw0WYRw2LmqzgqciIsCxWUdI2zaXlAbYdt2PZ5dJ1n5jY2iJY1ikOIcMJHCyUWHC62hRZkUVNPKta3Kh56wJ1-VWUyzhFc64JWJCtQNBBzhQW4cHwbsrVKpxPF8YJgV4ZZIWIKkiKiiNSkqZYWjzCWaQ5hFh0AcCuR3QoR74qUknBRmzholpv3OkpRQNNRpTzaKTWKbIWR5FDxm9AIkA7e9skUYCWayLILBZGoLkUSKbIyIdpxHPoyTeN4QA */\n            // You can use the XState extension for VS Code to visualize this machine.\n            // Or, you can see this static visualization (last updated April 2024): https://stately.ai/registry/editor/d7af9b58-c518-44f1-9c36-92a238b04a7a?machineId=91c387e7-0f01-42c9-a21d-293e9bf95bb7\n            initial: \"idle\",\n            context: { documentId, doc },\n            on: {\n                UPDATE: { actions: \"onUpdate\" },\n                DELETE: \".deleted\",\n            },\n            states: {\n                idle: {\n                    on: {\n                        CREATE: \"ready\",\n                        FIND: \"loading\",\n                    },\n                },\n                loading: {\n                    on: {\n                        REQUEST: \"requesting\",\n                        DOC_READY: \"ready\",\n                        AWAIT_NETWORK: \"awaitingNetwork\",\n                    },\n                    after: { [delay]: \"unavailable\" },\n                },\n                awaitingNetwork: {\n                    on: { NETWORK_READY: \"requesting\" },\n                },\n                requesting: {\n                    on: {\n                        DOC_UNAVAILABLE: \"unavailable\",\n                        DOC_READY: \"ready\",\n                    },\n                    after: { [delay]: \"unavailable\" },\n                },\n                unavailable: {\n                    entry: \"onUnavailable\",\n                    on: { DOC_READY: \"ready\" },\n                },\n                ready: {},\n                deleted: { entry: \"onDelete\", type: \"final\" },\n            },\n        });\n        // Instantiate the state machine\n        this.#machine = createActor(machine);\n        // Listen for state transitions\n        this.#machine.subscribe(state => {\n            const before = this.#prevDocState;\n            const after = state.context.doc;\n            this.#log(`→ ${state.value} %o`, after);\n            // if the document has changed, emit a change event\n            this.#checkForChanges(before, after);\n        });\n        // Start the machine, and send a create or find event to get things going\n        this.#machine.start();\n        this.#machine.send(isNew ? { type: CREATE } : { type: FIND });\n    }\n    // PRIVATE\n    /** Returns the current document, regardless of state */\n    get #doc() {\n        return this.#machine?.getSnapshot().context.doc;\n    }\n    /** Returns the docHandle's state (READY, etc.) */\n    get #state() {\n        return this.#machine?.getSnapshot().value;\n    }\n    /** Returns a promise that resolves when the docHandle is in one of the given states */\n    #statePromise(awaitStates) {\n        const awaitStatesArray = Array.isArray(awaitStates)\n            ? awaitStates\n            : [awaitStates];\n        return waitFor(this.#machine, s => awaitStatesArray.some(state => s.matches(state)), \n        // use a longer delay here so as not to race with other delays\n        { timeout: this.#timeoutDelay * 2 });\n    }\n    /**\n     * Called after state transitions. If the document has changed, emits a change event. If we just\n     * received the document for the first time, signal that our request has been completed.\n     */\n    #checkForChanges(before, after) {\n        const docChanged = after && before && !headsAreSame(A.getHeads(after), A.getHeads(before));\n        if (docChanged) {\n            this.emit(\"heads-changed\", { handle: this, doc: after });\n            const patches = A.diff(after, A.getHeads(before), A.getHeads(after));\n            if (patches.length > 0) {\n                this.emit(\"change\", {\n                    handle: this,\n                    doc: after,\n                    patches,\n                    // TODO: pass along the source (load/change/network)\n                    patchInfo: { before, after, source: \"change\" },\n                });\n            }\n            // If we didn't have the document yet, signal that we now do\n            if (!this.isReady())\n                this.#machine.send({ type: DOC_READY });\n        }\n        this.#prevDocState = after;\n    }\n    // PUBLIC\n    /** Our documentId in Automerge URL form.\n     */\n    get url() {\n        return stringifyAutomergeUrl({ documentId: this.documentId });\n    }\n    /**\n     * @returns true if the document is ready for accessing or changes.\n     *\n     * Note that for documents already stored locally this occurs before synchronization with any\n     * peers. We do not currently have an equivalent `whenSynced()`.\n     */\n    isReady = () => this.inState([\"ready\"]);\n    /**\n     * @returns true if the document has been marked as deleted.\n     *\n     * Deleted documents are removed from local storage and the sync process. It's not currently\n     * possible at runtime to undelete a document.\n     */\n    isDeleted = () => this.inState([\"deleted\"]);\n    /**\n     * @returns true if the document is currently unavailable.\n     *\n     * This will be the case if the document is not found in storage and no peers have shared it with us.\n     */\n    isUnavailable = () => this.inState([\"unavailable\"]);\n    /**\n     * @returns true if the handle is in one of the given states.\n     */\n    inState = (states) => states.some(s => this.#machine.getSnapshot().matches(s));\n    /** @hidden */\n    get state() {\n        return this.#machine.getSnapshot().value;\n    }\n    /**\n     * @returns a promise that resolves when the document is in one of the given states (if no states\n     * are passed, when the document is ready)\n     *\n     * Use this to block until the document handle has finished loading. The async equivalent to\n     * checking `inState()`.\n     */\n    async whenReady(awaitStates = [\"ready\"]) {\n        await withTimeout(this.#statePromise(awaitStates), this.#timeoutDelay);\n    }\n    /**\n     * @returns the current state of this handle's Automerge document.\n     *\n     * This is the recommended way to access a handle's document. Note that this waits for the handle\n     * to be ready if necessary. If loading (or synchronization) fails, this will never resolve.\n     */\n    async doc(\n    /** states to wait for, such as \"LOADING\". mostly for internal use. */\n    awaitStates = [\"ready\", \"unavailable\"]) {\n        try {\n            // wait for the document to enter one of the desired states\n            await this.#statePromise(awaitStates);\n        }\n        catch (error) {\n            // if we timed out, return undefined\n            return undefined;\n        }\n        // Return the document\n        return !this.isUnavailable() ? this.#doc : undefined;\n    }\n    /**\n     * Synchronously returns the current state of the Automerge document this handle manages, or\n     * undefined. Consider using `await handle.doc()` instead. Check `isReady()`, or use `whenReady()`\n     * if you want to make sure loading is complete first.\n     *\n     * Not to be confused with the SyncState of the document, which describes the state of the\n     * synchronization process.\n     *\n     * Note that `undefined` is not a valid Automerge document, so the return from this function is\n     * unambigous.\n     *\n     * @returns the current document, or undefined if the document is not ready.\n     */\n    docSync() {\n        if (!this.isReady())\n            return undefined;\n        else\n            return this.#doc;\n    }\n    /**\n     * Returns the current \"heads\" of the document, akin to a git commit.\n     * This precisely defines the state of a document.\n     * @returns the current document's heads, or undefined if the document is not ready\n     */\n    heads() {\n        if (!this.isReady()) {\n            return undefined;\n        }\n        return A.getHeads(this.#doc);\n    }\n    /**\n     * `update` is called by the repo when we receive changes from the network\n     * Called by the repo when we receive changes from the network.\n     * @hidden\n     */\n    update(callback) {\n        this.#machine.send({ type: UPDATE, payload: { callback } });\n    }\n    /**\n     * Called by the repo either when a doc handle changes or we receive new remote heads.\n     * @hidden\n     */\n    setRemoteHeads(storageId, heads) {\n        this.#remoteHeads[storageId] = heads;\n        this.emit(\"remote-heads\", { storageId, heads });\n    }\n    /** Returns the heads of the storageId. */\n    getRemoteHeads(storageId) {\n        return this.#remoteHeads[storageId];\n    }\n    /**\n     * All changes to an Automerge document should be made through this method.\n     * Inside the callback, the document should be treated as mutable: all edits will be recorded\n     * using a Proxy and translated into operations as part of a single recorded \"change\".\n     *\n     * Note that assignment via ES6 spread operators will result in *replacing* the object\n     * instead of mutating it which will prevent clean merges. This may be what you want, but\n     * `doc.foo = { ...doc.foo, bar: \"baz\" }` is not equivalent to `doc.foo.bar = \"baz\"`.\n     *\n     * Local changes will be stored (by the StorageSubsystem) and synchronized (by the\n     * DocSynchronizer) to any peers you are sharing it with.\n     *\n     * @param callback - A function that takes the current document and mutates it.\n     *\n     */\n    change(callback, options = {}) {\n        if (!this.isReady()) {\n            throw new Error(`DocHandle#${this.documentId} is not ready. Check \\`handle.isReady()\\` before accessing the document.`);\n        }\n        this.#machine.send({\n            type: UPDATE,\n            payload: { callback: doc => A.change(doc, options, callback) },\n        });\n    }\n    /**\n     * Makes a change as if the document were at `heads`.\n     *\n     * @returns A set of heads representing the concurrent change that was made.\n     */\n    changeAt(heads, callback, options = {}) {\n        if (!this.isReady()) {\n            throw new Error(`DocHandle#${this.documentId} is not ready. Check \\`handle.isReady()\\` before accessing the document.`);\n        }\n        let resultHeads = undefined;\n        this.#machine.send({\n            type: UPDATE,\n            payload: {\n                callback: doc => {\n                    const result = A.changeAt(doc, heads, options, callback);\n                    resultHeads = result.newHeads || undefined;\n                    return result.newDoc;\n                },\n            },\n        });\n        // the callback above will always run before we get here, so this should always contain the new heads\n        return resultHeads;\n    }\n    /**\n     * Merges another document into this document. Any peers we are sharing changes with will be\n     * notified of the changes resulting from the merge.\n     *\n     * @returns the merged document.\n     *\n     * @throws if either document is not ready or if `otherHandle` is unavailable.\n     */\n    merge(\n    /** the handle of the document to merge into this one */\n    otherHandle) {\n        if (!this.isReady() || !otherHandle.isReady()) {\n            throw new Error(\"Both handles must be ready to merge\");\n        }\n        const mergingDoc = otherHandle.docSync();\n        if (!mergingDoc) {\n            throw new Error(\"The document to be merged in is falsy, aborting.\");\n        }\n        this.update(doc => {\n            return A.merge(doc, mergingDoc);\n        });\n    }\n    /**\n     * Used in testing to mark this document as unavailable.\n     * @hidden\n     */\n    unavailable() {\n        this.#machine.send({ type: DOC_UNAVAILABLE });\n    }\n    /** Called by the repo when the document is not found in storage.\n     * @hidden\n     * */\n    request() {\n        if (this.#state === \"loading\")\n            this.#machine.send({ type: REQUEST });\n    }\n    /** @hidden */\n    awaitNetwork() {\n        if (this.#state === \"loading\")\n            this.#machine.send({ type: AWAIT_NETWORK });\n    }\n    /** @hidden */\n    networkReady() {\n        if (this.#state === \"awaitingNetwork\")\n            this.#machine.send({ type: NETWORK_READY });\n    }\n    /** Called by the repo when the document is deleted. */\n    delete() {\n        this.#machine.send({ type: DELETE });\n    }\n    /**\n     * Sends an arbitrary ephemeral message out to all reachable peers who would receive sync messages\n     * from you. It has no guarantee of delivery, and is not persisted to the underlying automerge doc\n     * in any way. Messages will have a sending PeerId but this is *not* a useful user identifier (a\n     * user could have multiple tabs open and would appear as multiple PeerIds). Every message source\n     * must have a unique PeerId.\n     */\n    broadcast(message) {\n        this.emit(\"ephemeral-message-outbound\", {\n            handle: this,\n            data: encode(message),\n        });\n    }\n}\n// STATE MACHINE TYPES & CONSTANTS\n// state\n/**\n * Possible internal states for a DocHandle\n */\nexport const HandleState = {\n    /** The handle has been created but not yet loaded or requested */\n    IDLE: \"idle\",\n    /** We are waiting for storage to finish loading */\n    LOADING: \"loading\",\n    /** We are waiting for the network to be come ready */\n    AWAITING_NETWORK: \"awaitingNetwork\",\n    /** We are waiting for someone in the network to respond to a sync request */\n    REQUESTING: \"requesting\",\n    /** The document is available */\n    READY: \"ready\",\n    /** The document has been deleted from the repo */\n    DELETED: \"deleted\",\n    /** The document was not available in storage or from any connected peers */\n    UNAVAILABLE: \"unavailable\",\n};\nexport const { IDLE, LOADING, AWAITING_NETWORK, REQUESTING, READY, DELETED, UNAVAILABLE, } = HandleState;\nconst CREATE = \"CREATE\";\nconst FIND = \"FIND\";\nconst REQUEST = \"REQUEST\";\nconst DOC_READY = \"DOC_READY\";\nconst AWAIT_NETWORK = \"AWAIT_NETWORK\";\nconst NETWORK_READY = \"NETWORK_READY\";\nconst UPDATE = \"UPDATE\";\nconst DELETE = \"DELETE\";\nconst TIMEOUT = \"TIMEOUT\";\nconst DOC_UNAVAILABLE = \"DOC_UNAVAILABLE\";\n", "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n", "// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  {\n    console.warn('XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues');\n  }\n}\nfunction getDevTools() {\n  const w = getGlobal();\n  if (!!w.__xstate__) {\n    return w.__xstate__;\n  }\n  return undefined;\n}\nfunction registerService(service) {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n}\nconst devToolsAdapter = service => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const devTools = getDevTools();\n  if (devTools) {\n    devTools.register(service);\n  }\n};\n\nexport { devToolsAdapter, getGlobal, registerService };\n", "import { devToolsAdapter } from '../dev/dist/xstate-dev.development.esm.js';\n\nclass Mailbox {\n  constructor(_process) {\n    this._process = _process;\n    this._active = false;\n    this._current = null;\n    this._last = null;\n  }\n  start() {\n    this._active = true;\n    this.flush();\n  }\n  clear() {\n    // we can't set _current to null because we might be currently processing\n    // and enqueue following clear shouldnt start processing the enqueued item immediately\n    if (this._current) {\n      this._current.next = null;\n      this._last = this._current;\n    }\n  }\n  enqueue(event) {\n    const enqueued = {\n      value: event,\n      next: null\n    };\n    if (this._current) {\n      this._last.next = enqueued;\n      this._last = enqueued;\n      return;\n    }\n    this._current = enqueued;\n    this._last = enqueued;\n    if (this._active) {\n      this.flush();\n    }\n  }\n  flush() {\n    while (this._current) {\n      // atm the given _process is responsible for implementing proper try/catch handling\n      // we assume here that this won't throw in a way that can affect this mailbox\n      const consumed = this._current;\n      this._process(consumed.value);\n      this._current = consumed.next;\n    }\n    this._last = null;\n  }\n}\n\nconst STATE_DELIMITER = '.';\nconst TARGETLESS_KEY = '';\nconst NULL_EVENT = '';\nconst STATE_IDENTIFIER = '#';\nconst WILDCARD = '*';\nconst XSTATE_INIT = 'xstate.init';\nconst XSTATE_ERROR = 'xstate.error';\nconst XSTATE_STOP = 'xstate.stop';\n\n/**\n * Returns an event that represents an implicit event that is sent after the\n * specified `delay`.\n *\n * @param delayRef The delay in milliseconds\n * @param id The state node ID where this event is handled\n */\nfunction createAfterEvent(delayRef, id) {\n  return {\n    type: `xstate.after.${delayRef}.${id}`\n  };\n}\n\n/**\n * Returns an event that represents that a final state node has been reached in\n * the parent state node.\n *\n * @param id The final state node's parent state node `id`\n * @param output The data to pass into the event\n */\nfunction createDoneStateEvent(id, output) {\n  return {\n    type: `xstate.done.state.${id}`,\n    output\n  };\n}\n\n/**\n * Returns an event that represents that an invoked service has terminated.\n *\n * An invoked service is terminated when it has reached a top-level final state\n * node, but not when it is canceled.\n *\n * @param invokeId The invoked service ID\n * @param output The data to pass into the event\n */\nfunction createDoneActorEvent(invokeId, output) {\n  return {\n    type: `xstate.done.actor.${invokeId}`,\n    output,\n    actorId: invokeId\n  };\n}\nfunction createErrorActorEvent(id, error) {\n  return {\n    type: `xstate.error.actor.${id}`,\n    error,\n    actorId: id\n  };\n}\nfunction createInitEvent(input) {\n  return {\n    type: XSTATE_INIT,\n    input\n  };\n}\n\n/**\n * This function makes sure that unhandled errors are thrown in a separate\n * macrotask. It allows those errors to be detected by global error handlers and\n * reported to bug tracking services without interrupting our own stack of\n * execution.\n *\n * @param err Error to be thrown\n */\nfunction reportUnhandledError(err) {\n  setTimeout(() => {\n    throw err;\n  });\n}\n\nconst symbolObservable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n\nfunction matchesState(parentStateId, childStateId) {\n  const parentStateValue = toStateValue(parentStateId);\n  const childStateValue = toStateValue(childStateId);\n  if (typeof childStateValue === 'string') {\n    if (typeof parentStateValue === 'string') {\n      return childStateValue === parentStateValue;\n    }\n\n    // Parent more specific than child\n    return false;\n  }\n  if (typeof parentStateValue === 'string') {\n    return parentStateValue in childStateValue;\n  }\n  return Object.keys(parentStateValue).every(key => {\n    if (!(key in childStateValue)) {\n      return false;\n    }\n    return matchesState(parentStateValue[key], childStateValue[key]);\n  });\n}\nfunction toStatePath(stateId) {\n  if (isArray(stateId)) {\n    return stateId;\n  }\n  let result = [];\n  let segment = '';\n  for (let i = 0; i < stateId.length; i++) {\n    const char = stateId.charCodeAt(i);\n    switch (char) {\n      // \\\n      case 92:\n        // consume the next character\n        segment += stateId[i + 1];\n        // and skip over it\n        i++;\n        continue;\n      // .\n      case 46:\n        result.push(segment);\n        segment = '';\n        continue;\n    }\n    segment += stateId[i];\n  }\n  result.push(segment);\n  return result;\n}\nfunction toStateValue(stateValue) {\n  if (isMachineSnapshot(stateValue)) {\n    return stateValue.value;\n  }\n  if (typeof stateValue !== 'string') {\n    return stateValue;\n  }\n  const statePath = toStatePath(stateValue);\n  return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n  if (statePath.length === 1) {\n    return statePath[0];\n  }\n  const value = {};\n  let marker = value;\n  for (let i = 0; i < statePath.length - 1; i++) {\n    if (i === statePath.length - 2) {\n      marker[statePath[i]] = statePath[i + 1];\n    } else {\n      const previous = marker;\n      marker = {};\n      previous[statePath[i]] = marker;\n    }\n  }\n  return value;\n}\nfunction mapValues(collection, iteratee) {\n  const result = {};\n  const collectionKeys = Object.keys(collection);\n  for (let i = 0; i < collectionKeys.length; i++) {\n    const key = collectionKeys[i];\n    result[key] = iteratee(collection[key], key, collection, i);\n  }\n  return result;\n}\nfunction toArrayStrict(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\nfunction toArray(value) {\n  if (value === undefined) {\n    return [];\n  }\n  return toArrayStrict(value);\n}\nfunction resolveOutput(mapper, context, event, self) {\n  if (typeof mapper === 'function') {\n    return mapper({\n      context,\n      event,\n      self\n    });\n  }\n  if (!!mapper && typeof mapper === 'object' && Object.values(mapper).some(val => typeof val === 'function')) {\n    console.warn(`Dynamically mapping values to individual properties is deprecated. Use a single function that returns the mapped object instead.\\nFound object containing properties whose values are possibly mapping functions: ${Object.entries(mapper).filter(([key, value]) => typeof value === 'function').map(([key, value]) => `\\n - ${key}: ${value.toString().replace(/\\n\\s*/g, '')}`).join('')}`);\n  }\n  return mapper;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isErrorActorEvent(event) {\n  return event.type.startsWith('xstate.error.actor');\n}\nfunction toTransitionConfigArray(configLike) {\n  return toArrayStrict(configLike).map(transitionLike => {\n    if (typeof transitionLike === 'undefined' || typeof transitionLike === 'string') {\n      return {\n        target: transitionLike\n      };\n    }\n    return transitionLike;\n  });\n}\nfunction normalizeTarget(target) {\n  if (target === undefined || target === TARGETLESS_KEY) {\n    return undefined;\n  }\n  return toArray(target);\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  const isObserver = typeof nextHandler === 'object';\n  const self = isObserver ? nextHandler : undefined;\n  return {\n    next: (isObserver ? nextHandler.next : nextHandler)?.bind(self),\n    error: (isObserver ? nextHandler.error : errorHandler)?.bind(self),\n    complete: (isObserver ? nextHandler.complete : completionHandler)?.bind(self)\n  };\n}\nfunction createInvokeId(stateNodeId, index) {\n  return `${index}.${stateNodeId}`;\n}\nfunction resolveReferencedActor(machine, src) {\n  const match = src.match(/^xstate\\.invoke\\.(\\d+)\\.(.*)/);\n  if (!match) {\n    return machine.implementations.actors[src];\n  }\n  const [, indexStr, nodeId] = match;\n  const node = machine.getStateNodeById(nodeId);\n  const invokeConfig = node.config.invoke;\n  return (Array.isArray(invokeConfig) ? invokeConfig[indexStr] : invokeConfig).src;\n}\nfunction getAllOwnEventDescriptors(snapshot) {\n  return [...new Set([...snapshot._nodes.flatMap(sn => sn.ownEvents)])];\n}\n\nfunction createScheduledEventId(actorRef, id) {\n  return `${actorRef.sessionId}.${id}`;\n}\nlet idCounter = 0;\nfunction createSystem(rootActor, options) {\n  const children = new Map();\n  const keyedActors = new Map();\n  const reverseKeyedActors = new WeakMap();\n  const inspectionObservers = new Set();\n  const timerMap = {};\n  const {\n    clock,\n    logger\n  } = options;\n  const scheduler = {\n    schedule: (source, target, event, delay, id = Math.random().toString(36).slice(2)) => {\n      const scheduledEvent = {\n        source,\n        target,\n        event,\n        delay,\n        id,\n        startedAt: Date.now()\n      };\n      const scheduledEventId = createScheduledEventId(source, id);\n      system._snapshot._scheduledEvents[scheduledEventId] = scheduledEvent;\n      const timeout = clock.setTimeout(() => {\n        delete timerMap[scheduledEventId];\n        delete system._snapshot._scheduledEvents[scheduledEventId];\n        system._relay(source, target, event);\n      }, delay);\n      timerMap[scheduledEventId] = timeout;\n    },\n    cancel: (source, id) => {\n      const scheduledEventId = createScheduledEventId(source, id);\n      const timeout = timerMap[scheduledEventId];\n      delete timerMap[scheduledEventId];\n      delete system._snapshot._scheduledEvents[scheduledEventId];\n      if (timeout !== undefined) {\n        clock.clearTimeout(timeout);\n      }\n    },\n    cancelAll: actorRef => {\n      for (const scheduledEventId in system._snapshot._scheduledEvents) {\n        const scheduledEvent = system._snapshot._scheduledEvents[scheduledEventId];\n        if (scheduledEvent.source === actorRef) {\n          scheduler.cancel(actorRef, scheduledEvent.id);\n        }\n      }\n    }\n  };\n  const sendInspectionEvent = event => {\n    if (!inspectionObservers.size) {\n      return;\n    }\n    const resolvedInspectionEvent = {\n      ...event,\n      rootId: rootActor.sessionId\n    };\n    inspectionObservers.forEach(observer => observer.next?.(resolvedInspectionEvent));\n  };\n  const system = {\n    _snapshot: {\n      _scheduledEvents: (options?.snapshot && options.snapshot.scheduler) ?? {}\n    },\n    _bookId: () => `x:${idCounter++}`,\n    _register: (sessionId, actorRef) => {\n      children.set(sessionId, actorRef);\n      return sessionId;\n    },\n    _unregister: actorRef => {\n      children.delete(actorRef.sessionId);\n      const systemId = reverseKeyedActors.get(actorRef);\n      if (systemId !== undefined) {\n        keyedActors.delete(systemId);\n        reverseKeyedActors.delete(actorRef);\n      }\n    },\n    get: systemId => {\n      return keyedActors.get(systemId);\n    },\n    _set: (systemId, actorRef) => {\n      const existing = keyedActors.get(systemId);\n      if (existing && existing !== actorRef) {\n        throw new Error(`Actor with system ID '${systemId}' already exists.`);\n      }\n      keyedActors.set(systemId, actorRef);\n      reverseKeyedActors.set(actorRef, systemId);\n    },\n    inspect: observerOrFn => {\n      const observer = toObserver(observerOrFn);\n      inspectionObservers.add(observer);\n      return {\n        unsubscribe() {\n          inspectionObservers.delete(observer);\n        }\n      };\n    },\n    _sendInspectionEvent: sendInspectionEvent,\n    _relay: (source, target, event) => {\n      system._sendInspectionEvent({\n        type: '@xstate.event',\n        sourceRef: source,\n        actorRef: target,\n        event\n      });\n      target._send(event);\n    },\n    scheduler,\n    getSnapshot: () => {\n      return {\n        _scheduledEvents: {\n          ...system._snapshot._scheduledEvents\n        }\n      };\n    },\n    start: () => {\n      const scheduledEvents = system._snapshot._scheduledEvents;\n      system._snapshot._scheduledEvents = {};\n      for (const scheduledId in scheduledEvents) {\n        const {\n          source,\n          target,\n          event,\n          delay,\n          id\n        } = scheduledEvents[scheduledId];\n        scheduler.schedule(source, target, event, delay, id);\n      }\n    },\n    _clock: clock,\n    _logger: logger\n  };\n  return system;\n}\n\nconst $$ACTOR_TYPE = 1;\n\n// those values are currently used by @xstate/react directly so it's important to keep the assigned values in sync\nlet ProcessingStatus = /*#__PURE__*/function (ProcessingStatus) {\n  ProcessingStatus[ProcessingStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n  ProcessingStatus[ProcessingStatus[\"Running\"] = 1] = \"Running\";\n  ProcessingStatus[ProcessingStatus[\"Stopped\"] = 2] = \"Stopped\";\n  return ProcessingStatus;\n}({});\nconst defaultOptions = {\n  clock: {\n    setTimeout: (fn, ms) => {\n      return setTimeout(fn, ms);\n    },\n    clearTimeout: id => {\n      return clearTimeout(id);\n    }\n  },\n  logger: console.log.bind(console),\n  devTools: false\n};\n\n/**\n * An Actor is a running process that can receive events, send events and change\n * its behavior based on the events it receives, which can cause effects outside\n * of the actor. When you run a state machine, it becomes an actor.\n */\nclass Actor {\n  /**\n   * Creates a new actor instance for the given logic with the provided options,\n   * if any.\n   *\n   * @param logic The logic to create an actor from\n   * @param options Actor options\n   */\n  constructor(logic, options) {\n    this.logic = logic;\n    /** The current internal state of the actor. */\n    this._snapshot = void 0;\n    /**\n     * The clock that is responsible for setting and clearing timeouts, such as\n     * delayed events and transitions.\n     */\n    this.clock = void 0;\n    this.options = void 0;\n    /** The unique identifier for this actor relative to its parent. */\n    this.id = void 0;\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this.observers = new Set();\n    this.eventListeners = new Map();\n    this.logger = void 0;\n    /** @internal */\n    this._processingStatus = ProcessingStatus.NotStarted;\n    // Actor Ref\n    this._parent = void 0;\n    /** @internal */\n    this._syncSnapshot = void 0;\n    this.ref = void 0;\n    // TODO: add typings for system\n    this._actorScope = void 0;\n    this._systemId = void 0;\n    /** The globally unique process ID for this invocation. */\n    this.sessionId = void 0;\n    /** The system to which this actor belongs. */\n    this.system = void 0;\n    this._doneEvent = void 0;\n    this.src = void 0;\n    // array of functions to defer\n    this._deferred = [];\n    const resolvedOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    const {\n      clock,\n      logger,\n      parent,\n      syncSnapshot,\n      id,\n      systemId,\n      inspect\n    } = resolvedOptions;\n    this.system = parent ? parent.system : createSystem(this, {\n      clock,\n      logger\n    });\n    if (inspect && !parent) {\n      // Always inspect at the system-level\n      this.system.inspect(toObserver(inspect));\n    }\n    this.sessionId = this.system._bookId();\n    this.id = id ?? this.sessionId;\n    this.logger = options?.logger ?? this.system._logger;\n    this.clock = options?.clock ?? this.system._clock;\n    this._parent = parent;\n    this._syncSnapshot = syncSnapshot;\n    this.options = resolvedOptions;\n    this.src = resolvedOptions.src ?? logic;\n    this.ref = this;\n    this._actorScope = {\n      self: this,\n      id: this.id,\n      sessionId: this.sessionId,\n      logger: this.logger,\n      defer: fn => {\n        this._deferred.push(fn);\n      },\n      system: this.system,\n      stopChild: child => {\n        if (child._parent !== this) {\n          throw new Error(`Cannot stop child actor ${child.id} of ${this.id} because it is not a child`);\n        }\n        child._stop();\n      },\n      emit: emittedEvent => {\n        const listeners = this.eventListeners.get(emittedEvent.type);\n        const wildcardListener = this.eventListeners.get('*');\n        if (!listeners && !wildcardListener) {\n          return;\n        }\n        const allListeners = new Set([...(listeners ? listeners.values() : []), ...(wildcardListener ? wildcardListener.values() : [])]);\n        for (const handler of Array.from(allListeners)) {\n          handler(emittedEvent);\n        }\n      }\n    };\n\n    // Ensure that the send method is bound to this Actor instance\n    // if destructured\n    this.send = this.send.bind(this);\n    this.system._sendInspectionEvent({\n      type: '@xstate.actor',\n      actorRef: this\n    });\n    if (systemId) {\n      this._systemId = systemId;\n      this.system._set(systemId, this);\n    }\n    this._initState(options?.snapshot ?? options?.state);\n    if (systemId && this._snapshot.status !== 'active') {\n      this.system._unregister(this);\n    }\n  }\n  _initState(persistedState) {\n    try {\n      this._snapshot = persistedState ? this.logic.restoreSnapshot ? this.logic.restoreSnapshot(persistedState, this._actorScope) : persistedState : this.logic.getInitialSnapshot(this._actorScope, this.options?.input);\n    } catch (err) {\n      // if we get here then it means that we assign a value to this._snapshot that is not of the correct type\n      // we can't get the true `TSnapshot & { status: 'error'; }`, it's impossible\n      // so right now this is a lie of sorts\n      this._snapshot = {\n        status: 'error',\n        output: undefined,\n        error: err\n      };\n    }\n  }\n  update(snapshot, event) {\n    // Update state\n    this._snapshot = snapshot;\n\n    // Execute deferred effects\n    let deferredFn;\n    while (deferredFn = this._deferred.shift()) {\n      try {\n        deferredFn();\n      } catch (err) {\n        // this error can only be caught when executing *initial* actions\n        // it's the only time when we call actions provided by the user through those deferreds\n        // when the actor is already running we always execute them synchronously while transitioning\n        // no \"builtin deferred\" should actually throw an error since they are either safe\n        // or the control flow is passed through the mailbox and errors should be caught by the `_process` used by the mailbox\n        this._deferred.length = 0;\n        this._snapshot = {\n          ...snapshot,\n          status: 'error',\n          error: err\n        };\n      }\n    }\n    switch (this._snapshot.status) {\n      case 'active':\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        break;\n      case 'done':\n        // next observers are meant to be notified about done snapshots\n        // this can be seen as something that is different from how observable work\n        // but with observables `complete` callback is called without any arguments\n        // it's more ergonomic for XState to treat a done snapshot as a \"next\" value\n        // and the completion event as something that is separate,\n        // something that merely follows emitting that done snapshot\n        for (const observer of this.observers) {\n          try {\n            observer.next?.(snapshot);\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n        }\n        this._stopProcedure();\n        this._complete();\n        this._doneEvent = createDoneActorEvent(this.id, this._snapshot.output);\n        if (this._parent) {\n          this.system._relay(this, this._parent, this._doneEvent);\n        }\n        break;\n      case 'error':\n        this._error(this._snapshot.error);\n        break;\n    }\n    this.system._sendInspectionEvent({\n      type: '@xstate.snapshot',\n      actorRef: this,\n      event,\n      snapshot\n    });\n  }\n\n  /**\n   * Subscribe an observer to an actor’s snapshot values.\n   *\n   * @remarks\n   * The observer will receive the actor’s snapshot value when it is emitted.\n   * The observer can be:\n   *\n   * - A plain function that receives the latest snapshot, or\n   * - An observer object whose `.next(snapshot)` method receives the latest\n   *   snapshot\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as a plain function\n   * const subscription = actor.subscribe((snapshot) => {\n   *   console.log(snapshot);\n   * });\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * // Observer as an object\n   * const subscription = actor.subscribe({\n   *   next(snapshot) {\n   *     console.log(snapshot);\n   *   },\n   *   error(err) {\n   *     // ...\n   *   },\n   *   complete() {\n   *     // ...\n   *   }\n   * });\n   * ```\n   *\n   * The return value of `actor.subscribe(observer)` is a subscription object\n   * that has an `.unsubscribe()` method. You can call\n   * `subscription.unsubscribe()` to unsubscribe the observer:\n   *\n   * @example\n   *\n   * ```ts\n   * const subscription = actor.subscribe((snapshot) => {\n   *   // ...\n   * });\n   *\n   * // Unsubscribe the observer\n   * subscription.unsubscribe();\n   * ```\n   *\n   * When the actor is stopped, all of its observers will automatically be\n   * unsubscribed.\n   *\n   * @param observer - Either a plain function that receives the latest\n   *   snapshot, or an observer object whose `.next(snapshot)` method receives\n   *   the latest snapshot\n   */\n\n  subscribe(nextListenerOrObserver, errorListener, completeListener) {\n    const observer = toObserver(nextListenerOrObserver, errorListener, completeListener);\n    if (this._processingStatus !== ProcessingStatus.Stopped) {\n      this.observers.add(observer);\n    } else {\n      switch (this._snapshot.status) {\n        case 'done':\n          try {\n            observer.complete?.();\n          } catch (err) {\n            reportUnhandledError(err);\n          }\n          break;\n        case 'error':\n          {\n            const err = this._snapshot.error;\n            if (!observer.error) {\n              reportUnhandledError(err);\n            } else {\n              try {\n                observer.error(err);\n              } catch (err) {\n                reportUnhandledError(err);\n              }\n            }\n            break;\n          }\n      }\n    }\n    return {\n      unsubscribe: () => {\n        this.observers.delete(observer);\n      }\n    };\n  }\n  on(type, handler) {\n    let listeners = this.eventListeners.get(type);\n    if (!listeners) {\n      listeners = new Set();\n      this.eventListeners.set(type, listeners);\n    }\n    const wrappedHandler = handler.bind(undefined);\n    listeners.add(wrappedHandler);\n    return {\n      unsubscribe: () => {\n        listeners.delete(wrappedHandler);\n      }\n    };\n  }\n\n  /** Starts the Actor from the initial state */\n  start() {\n    if (this._processingStatus === ProcessingStatus.Running) {\n      // Do not restart the service if it is already started\n      return this;\n    }\n    if (this._syncSnapshot) {\n      this.subscribe({\n        next: snapshot => {\n          if (snapshot.status === 'active') {\n            this.system._relay(this, this._parent, {\n              type: `xstate.snapshot.${this.id}`,\n              snapshot\n            });\n          }\n        },\n        error: () => {}\n      });\n    }\n    this.system._register(this.sessionId, this);\n    if (this._systemId) {\n      this.system._set(this._systemId, this);\n    }\n    this._processingStatus = ProcessingStatus.Running;\n\n    // TODO: this isn't correct when rehydrating\n    const initEvent = createInitEvent(this.options.input);\n    this.system._sendInspectionEvent({\n      type: '@xstate.event',\n      sourceRef: this._parent,\n      actorRef: this,\n      event: initEvent\n    });\n    const status = this._snapshot.status;\n    switch (status) {\n      case 'done':\n        // a state machine can be \"done\" upon initialization (it could reach a final state using initial microsteps)\n        // we still need to complete observers, flush deferreds etc\n        this.update(this._snapshot, initEvent);\n        // TODO: rethink cleanup of observers, mailbox, etc\n        return this;\n      case 'error':\n        this._error(this._snapshot.error);\n        return this;\n    }\n    if (!this._parent) {\n      this.system.start();\n    }\n    if (this.logic.start) {\n      try {\n        this.logic.start(this._snapshot, this._actorScope);\n      } catch (err) {\n        this._snapshot = {\n          ...this._snapshot,\n          status: 'error',\n          error: err\n        };\n        this._error(err);\n        return this;\n      }\n    }\n\n    // TODO: this notifies all subscribers but usually this is redundant\n    // there is no real change happening here\n    // we need to rethink if this needs to be refactored\n    this.update(this._snapshot, initEvent);\n    if (this.options.devTools) {\n      this.attachDevTools();\n    }\n    this.mailbox.start();\n    return this;\n  }\n  _process(event) {\n    let nextState;\n    let caughtError;\n    try {\n      nextState = this.logic.transition(this._snapshot, event, this._actorScope);\n    } catch (err) {\n      // we wrap it in a box so we can rethrow it later even if falsy value gets caught here\n      caughtError = {\n        err\n      };\n    }\n    if (caughtError) {\n      const {\n        err\n      } = caughtError;\n      this._snapshot = {\n        ...this._snapshot,\n        status: 'error',\n        error: err\n      };\n      this._error(err);\n      return;\n    }\n    this.update(nextState, event);\n    if (event.type === XSTATE_STOP) {\n      this._stopProcedure();\n      this._complete();\n    }\n  }\n  _stop() {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      return this;\n    }\n    this.mailbox.clear();\n    if (this._processingStatus === ProcessingStatus.NotStarted) {\n      this._processingStatus = ProcessingStatus.Stopped;\n      return this;\n    }\n    this.mailbox.enqueue({\n      type: XSTATE_STOP\n    });\n    return this;\n  }\n\n  /** Stops the Actor and unsubscribe all listeners. */\n  stop() {\n    if (this._parent) {\n      throw new Error('A non-root actor cannot be stopped directly.');\n    }\n    return this._stop();\n  }\n  _complete() {\n    for (const observer of this.observers) {\n      try {\n        observer.complete?.();\n      } catch (err) {\n        reportUnhandledError(err);\n      }\n    }\n    this.observers.clear();\n  }\n  _reportError(err) {\n    if (!this.observers.size) {\n      if (!this._parent) {\n        reportUnhandledError(err);\n      }\n      return;\n    }\n    let reportError = false;\n    for (const observer of this.observers) {\n      const errorListener = observer.error;\n      reportError ||= !errorListener;\n      try {\n        errorListener?.(err);\n      } catch (err2) {\n        reportUnhandledError(err2);\n      }\n    }\n    this.observers.clear();\n    if (reportError) {\n      reportUnhandledError(err);\n    }\n  }\n  _error(err) {\n    this._stopProcedure();\n    this._reportError(err);\n    if (this._parent) {\n      this.system._relay(this, this._parent, createErrorActorEvent(this.id, err));\n    }\n  }\n  // TODO: atm children don't belong entirely to the actor so\n  // in a way - it's not even super aware of them\n  // so we can't stop them from here but we really should!\n  // right now, they are being stopped within the machine's transition\n  // but that could throw and leave us with \"orphaned\" active actors\n  _stopProcedure() {\n    if (this._processingStatus !== ProcessingStatus.Running) {\n      // Actor already stopped; do nothing\n      return this;\n    }\n\n    // Cancel all delayed events\n    this.system.scheduler.cancelAll(this);\n\n    // TODO: mailbox.reset\n    this.mailbox.clear();\n    // TODO: after `stop` we must prepare ourselves for receiving events again\n    // events sent *after* stop signal must be queued\n    // it seems like this should be the common behavior for all of our consumers\n    // so perhaps this should be unified somehow for all of them\n    this.mailbox = new Mailbox(this._process.bind(this));\n    this._processingStatus = ProcessingStatus.Stopped;\n    this.system._unregister(this);\n    return this;\n  }\n\n  /** @internal */\n  _send(event) {\n    if (this._processingStatus === ProcessingStatus.Stopped) {\n      // do nothing\n      {\n        const eventString = JSON.stringify(event);\n        console.warn(`Event \"${event.type}\" was sent to stopped actor \"${this.id} (${this.sessionId})\". This actor has already reached its final state, and will not transition.\\nEvent: ${eventString}`);\n      }\n      return;\n    }\n    this.mailbox.enqueue(event);\n  }\n\n  /**\n   * Sends an event to the running Actor to trigger a transition.\n   *\n   * @param event The event to send\n   */\n  send(event) {\n    if (typeof event === 'string') {\n      throw new Error(`Only event objects may be sent to actors; use .send({ type: \"${event}\" }) instead`);\n    }\n    this.system._relay(undefined, this, event);\n  }\n  attachDevTools() {\n    const {\n      devTools\n    } = this.options;\n    if (devTools) {\n      const resolvedDevToolsAdapter = typeof devTools === 'function' ? devTools : devToolsAdapter;\n      resolvedDevToolsAdapter(this);\n    }\n  }\n  toJSON() {\n    return {\n      xstate$$type: $$ACTOR_TYPE,\n      id: this.id\n    };\n  }\n\n  /**\n   * Obtain the internal state of the actor, which can be persisted.\n   *\n   * @remarks\n   * The internal state can be persisted from any actor, not only machines.\n   *\n   * Note that the persisted state is not the same as the snapshot from\n   * {@link Actor.getSnapshot}. Persisted state represents the internal state of\n   * the actor, while snapshots represent the actor's last emitted value.\n   *\n   * Can be restored with {@link ActorOptions.state}\n   * @see https://stately.ai/docs/persistence\n   */\n\n  getPersistedSnapshot(options) {\n    return this.logic.getPersistedSnapshot(this._snapshot, options);\n  }\n  [symbolObservable]() {\n    return this;\n  }\n\n  /**\n   * Read an actor’s snapshot synchronously.\n   *\n   * @remarks\n   * The snapshot represent an actor's last emitted value.\n   *\n   * When an actor receives an event, its internal state may change. An actor\n   * may emit a snapshot when a state transition occurs.\n   *\n   * Note that some actors, such as callback actors generated with\n   * `fromCallback`, will not emit snapshots.\n   * @see {@link Actor.subscribe} to subscribe to an actor’s snapshot values.\n   * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).\n   */\n  getSnapshot() {\n    if (!this._snapshot) {\n      throw new Error(`Snapshot can't be read while the actor initializes itself`);\n    }\n    return this._snapshot;\n  }\n}\n/**\n * Creates a new actor instance for the given actor logic with the provided\n * options, if any.\n *\n * @remarks\n * When you create an actor from actor logic via `createActor(logic)`, you\n * implicitly create an actor system where the created actor is the root actor.\n * Any actors spawned from this root actor and its descendants are part of that\n * actor system.\n * @example\n *\n * ```ts\n * import { createActor } from 'xstate';\n * import { someActorLogic } from './someActorLogic.ts';\n *\n * // Creating the actor, which implicitly creates an actor system with itself as the root actor\n * const actor = createActor(someActorLogic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * // Actors must be started by calling `actor.start()`, which will also start the actor system.\n * actor.start();\n *\n * // Actors can receive events\n * actor.send({ type: 'someEvent' });\n *\n * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.\n * actor.stop();\n * ```\n *\n * @param logic - The actor logic to create an actor from. For a state machine\n *   actor logic creator, see {@link createMachine}. Other actor logic creators\n *   include {@link fromCallback}, {@link fromEventObservable},\n *   {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.\n * @param options - Actor options\n */\nfunction createActor(logic, ...[options]) {\n  return new Actor(logic, options);\n}\n\n/**\n * Creates a new Interpreter instance for the given machine with the provided\n * options, if any.\n *\n * @deprecated Use `createActor` instead\n * @alias\n */\nconst interpret = createActor;\n\n/**\n * @deprecated Use `Actor` instead.\n * @alias\n */\n\nfunction resolveCancel(_, snapshot, actionArgs, actionParams, {\n  sendId\n}) {\n  const resolvedSendId = typeof sendId === 'function' ? sendId(actionArgs, actionParams) : sendId;\n  return [snapshot, resolvedSendId];\n}\nfunction executeCancel(actorScope, resolvedSendId) {\n  actorScope.defer(() => {\n    actorScope.system.scheduler.cancel(actorScope.self, resolvedSendId);\n  });\n}\n/**\n * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The\n * canceled `sendTo(...)` action will not send its event or execute, unless the\n * `delay` has already elapsed before `cancel(...)` is called.\n *\n * @example\n *\n * ```ts\n * import { createMachine, sendTo, cancel } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     sendEvent: {\n *       actions: sendTo(\n *         'some-actor',\n *         { type: 'someEvent' },\n *         {\n *           id: 'some-id',\n *           delay: 1000\n *         }\n *       )\n *     },\n *     cancelEvent: {\n *       actions: cancel('some-id')\n *     }\n *   }\n * });\n * ```\n *\n * @param sendId The `id` of the `sendTo(...)` action to cancel.\n */\nfunction cancel(sendId) {\n  function cancel(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  cancel.type = 'xstate.cancel';\n  cancel.sendId = sendId;\n  cancel.resolve = resolveCancel;\n  cancel.execute = executeCancel;\n  return cancel;\n}\n\nfunction resolveSpawn(actorScope, snapshot, actionArgs, _actionParams, {\n  id,\n  systemId,\n  src,\n  input,\n  syncSnapshot\n}) {\n  const logic = typeof src === 'string' ? resolveReferencedActor(snapshot.machine, src) : src;\n  const resolvedId = typeof id === 'function' ? id(actionArgs) : id;\n  let actorRef;\n  if (logic) {\n    actorRef = createActor(logic, {\n      id: resolvedId,\n      src,\n      parent: actorScope.self,\n      syncSnapshot,\n      systemId,\n      input: typeof input === 'function' ? input({\n        context: snapshot.context,\n        event: actionArgs.event,\n        self: actorScope.self\n      }) : input\n    });\n  }\n  if (!actorRef) {\n    console.warn(`Actor type '${src}' not found in machine '${actorScope.id}'.`);\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children: {\n      ...snapshot.children,\n      [resolvedId]: actorRef\n    }\n  }), {\n    id,\n    actorRef\n  }];\n}\nfunction executeSpawn(actorScope, {\n  id,\n  actorRef\n}) {\n  if (!actorRef) {\n    return;\n  }\n  actorScope.defer(() => {\n    if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n      return;\n    }\n    actorRef.start();\n  });\n}\nfunction spawnChild(...[src, {\n  id,\n  systemId,\n  input,\n  syncSnapshot = false\n} = {}]) {\n  function spawnChild(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  spawnChild.type = 'snapshot.spawnChild';\n  spawnChild.id = id;\n  spawnChild.systemId = systemId;\n  spawnChild.src = src;\n  spawnChild.input = input;\n  spawnChild.syncSnapshot = syncSnapshot;\n  spawnChild.resolve = resolveSpawn;\n  spawnChild.execute = executeSpawn;\n  return spawnChild;\n}\n\nfunction resolveStop(_, snapshot, args, actionParams, {\n  actorRef\n}) {\n  const actorRefOrString = typeof actorRef === 'function' ? actorRef(args, actionParams) : actorRef;\n  const resolvedActorRef = typeof actorRefOrString === 'string' ? snapshot.children[actorRefOrString] : actorRefOrString;\n  let children = snapshot.children;\n  if (resolvedActorRef) {\n    children = {\n      ...children\n    };\n    delete children[resolvedActorRef.id];\n  }\n  return [cloneMachineSnapshot(snapshot, {\n    children\n  }), resolvedActorRef];\n}\nfunction executeStop(actorScope, actorRef) {\n  if (!actorRef) {\n    return;\n  }\n\n  // we need to eagerly unregister it here so a new actor with the same systemId can be registered immediately\n  // since we defer actual stopping of the actor but we don't defer actor creations (and we can't do that)\n  // this could throw on `systemId` collision, for example, when dealing with reentering transitions\n  actorScope.system._unregister(actorRef);\n\n  // this allows us to prevent an actor from being started if it gets stopped within the same macrostep\n  // this can happen, for example, when the invoking state is being exited immediately by an always transition\n  if (actorRef._processingStatus !== ProcessingStatus.Running) {\n    actorScope.stopChild(actorRef);\n    return;\n  }\n  // stopping a child enqueues a stop event in the child actor's mailbox\n  // we need for all of the already enqueued events to be processed before we stop the child\n  // the parent itself might want to send some events to a child (for example from exit actions on the invoking state)\n  // and we don't want to ignore those events\n  actorScope.defer(() => {\n    actorScope.stopChild(actorRef);\n  });\n}\n/**\n * Stops a child actor.\n *\n * @param actorRef The actor to stop.\n */\nfunction stopChild(actorRef) {\n  function stop(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  stop.type = 'xstate.stopChild';\n  stop.actorRef = actorRef;\n  stop.resolve = resolveStop;\n  stop.execute = executeStop;\n  return stop;\n}\n\n/**\n * Stops a child actor.\n *\n * @deprecated Use `stopChild(...)` instead\n * @alias\n */\nconst stop = stopChild;\n\nfunction checkStateIn(snapshot, _, {\n  stateValue\n}) {\n  if (typeof stateValue === 'string' && isStateId(stateValue)) {\n    const target = snapshot.machine.getStateNodeById(stateValue);\n    return snapshot._nodes.some(sn => sn === target);\n  }\n  return snapshot.matches(stateValue);\n}\nfunction stateIn(stateValue) {\n  function stateIn(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  stateIn.check = checkStateIn;\n  stateIn.stateValue = stateValue;\n  return stateIn;\n}\nfunction checkNot(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return !evaluateGuard(guards[0], context, event, snapshot);\n}\n\n/**\n * Higher-order guard that evaluates to `true` if the `guard` passed to it\n * evaluates to `false`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, not } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => false\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: not('someNamedGuard'),\n *       actions: () => {\n *         // will be executed if guard in `not(...)`\n *         // evaluates to `false`\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard\n */\nfunction not(guard) {\n  function not(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  not.check = checkNot;\n  not.guards = [guard];\n  return not;\n}\nfunction checkAnd(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.every(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if all `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, and } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: and([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if all guards in `and(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction and(guards) {\n  function and(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  and.check = checkAnd;\n  and.guards = guards;\n  return and;\n}\nfunction checkOr(snapshot, {\n  context,\n  event\n}, {\n  guards\n}) {\n  return guards.some(guard => evaluateGuard(guard, context, event, snapshot));\n}\n\n/**\n * Higher-order guard that evaluates to `true` if any of the `guards` passed to\n * it evaluate to `true`.\n *\n * @category Guards\n * @example\n *\n * ```ts\n * import { setup, or } from 'xstate';\n *\n * const machine = setup({\n *   guards: {\n *     someNamedGuard: () => true\n *   }\n * }).createMachine({\n *   on: {\n *     someEvent: {\n *       guard: or([({ context }) => context.value > 0, 'someNamedGuard']),\n *       actions: () => {\n *         // will be executed if any of the guards in `or(...)`\n *         // evaluate to true\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @returns A guard action object\n */\nfunction or(guards) {\n  function or(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  or.check = checkOr;\n  or.guards = guards;\n  return or;\n}\n\n// TODO: throw on cycles (depth check should be enough)\nfunction evaluateGuard(guard, context, event, snapshot) {\n  const {\n    machine\n  } = snapshot;\n  const isInline = typeof guard === 'function';\n  const resolved = isInline ? guard : machine.implementations.guards[typeof guard === 'string' ? guard : guard.type];\n  if (!isInline && !resolved) {\n    throw new Error(`Guard '${typeof guard === 'string' ? guard : guard.type}' is not implemented.'.`);\n  }\n  if (typeof resolved !== 'function') {\n    return evaluateGuard(resolved, context, event, snapshot);\n  }\n  const guardArgs = {\n    context,\n    event\n  };\n  const guardParams = isInline || typeof guard === 'string' ? undefined : 'params' in guard ? typeof guard.params === 'function' ? guard.params({\n    context,\n    event\n  }) : guard.params : undefined;\n  if (!('check' in resolved)) {\n    // the existing type of `.guards` assumes non-nullable `TExpressionGuard`\n    // inline guards expect `TExpressionGuard` to be set to `undefined`\n    // it's fine to cast this here, our logic makes sure that we call those 2 \"variants\" correctly\n    return resolved(guardArgs, guardParams);\n  }\n  const builtinGuard = resolved;\n  return builtinGuard.check(snapshot, guardArgs, resolved // this holds all params\n  );\n}\n\nconst isAtomicStateNode = stateNode => stateNode.type === 'atomic' || stateNode.type === 'final';\nfunction getChildren(stateNode) {\n  return Object.values(stateNode.states).filter(sn => sn.type !== 'history');\n}\nfunction getProperAncestors(stateNode, toStateNode) {\n  const ancestors = [];\n  if (toStateNode === stateNode) {\n    return ancestors;\n  }\n\n  // add all ancestors\n  let m = stateNode.parent;\n  while (m && m !== toStateNode) {\n    ancestors.push(m);\n    m = m.parent;\n  }\n  return ancestors;\n}\nfunction getAllStateNodes(stateNodes) {\n  const nodeSet = new Set(stateNodes);\n  const adjList = getAdjList(nodeSet);\n\n  // add descendants\n  for (const s of nodeSet) {\n    // if previously active, add existing child nodes\n    if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n      getInitialStateNodesWithTheirAncestors(s).forEach(sn => nodeSet.add(sn));\n    } else {\n      if (s.type === 'parallel') {\n        for (const child of getChildren(s)) {\n          if (child.type === 'history') {\n            continue;\n          }\n          if (!nodeSet.has(child)) {\n            const initialStates = getInitialStateNodesWithTheirAncestors(child);\n            for (const initialStateNode of initialStates) {\n              nodeSet.add(initialStateNode);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // add all ancestors\n  for (const s of nodeSet) {\n    let m = s.parent;\n    while (m) {\n      nodeSet.add(m);\n      m = m.parent;\n    }\n  }\n  return nodeSet;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n  const childStateNodes = adjList.get(baseNode);\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n  if (baseNode.type === 'compound') {\n    const childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isAtomicStateNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n  const stateValue = {};\n  for (const childStateNode of childStateNodes) {\n    stateValue[childStateNode.key] = getValueFromAdj(childStateNode, adjList);\n  }\n  return stateValue;\n}\nfunction getAdjList(stateNodes) {\n  const adjList = new Map();\n  for (const s of stateNodes) {\n    if (!adjList.has(s)) {\n      adjList.set(s, []);\n    }\n    if (s.parent) {\n      if (!adjList.has(s.parent)) {\n        adjList.set(s.parent, []);\n      }\n      adjList.get(s.parent).push(s);\n    }\n  }\n  return adjList;\n}\nfunction getStateValue(rootNode, stateNodes) {\n  const config = getAllStateNodes(stateNodes);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction isInFinalState(stateNodeSet, stateNode) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(s => s.type === 'final' && stateNodeSet.has(s));\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(sn => isInFinalState(stateNodeSet, sn));\n  }\n  return stateNode.type === 'final';\n}\nconst isStateId = str => str[0] === STATE_IDENTIFIER;\nfunction getCandidates(stateNode, receivedEventType) {\n  const candidates = stateNode.transitions.get(receivedEventType) || [...stateNode.transitions.keys()].filter(eventDescriptor => {\n    // check if transition is a wildcard transition,\n    // which matches any non-transient events\n    if (eventDescriptor === WILDCARD) {\n      return true;\n    }\n    if (!eventDescriptor.endsWith('.*')) {\n      return false;\n    }\n    if (/.*\\*.+/.test(eventDescriptor)) {\n      console.warn(`Wildcards can only be the last token of an event descriptor (e.g., \"event.*\") or the entire event descriptor (\"*\"). Check the \"${eventDescriptor}\" event.`);\n    }\n    const partialEventTokens = eventDescriptor.split('.');\n    const eventTokens = receivedEventType.split('.');\n    for (let tokenIndex = 0; tokenIndex < partialEventTokens.length; tokenIndex++) {\n      const partialEventToken = partialEventTokens[tokenIndex];\n      const eventToken = eventTokens[tokenIndex];\n      if (partialEventToken === '*') {\n        const isLastToken = tokenIndex === partialEventTokens.length - 1;\n        if (!isLastToken) {\n          console.warn(`Infix wildcards in transition events are not allowed. Check the \"${eventDescriptor}\" transition.`);\n        }\n        return isLastToken;\n      }\n      if (partialEventToken !== eventToken) {\n        return false;\n      }\n    }\n    return true;\n  }).sort((a, b) => b.length - a.length).flatMap(key => stateNode.transitions.get(key));\n  return candidates;\n}\n\n/** All delayed transitions from the config. */\nfunction getDelayedTransitions(stateNode) {\n  const afterConfig = stateNode.config.after;\n  if (!afterConfig) {\n    return [];\n  }\n  const mutateEntryExit = (delay, i) => {\n    const afterEvent = createAfterEvent(delay, stateNode.id);\n    const eventType = afterEvent.type;\n    stateNode.entry.push(raise(afterEvent, {\n      id: eventType,\n      delay\n    }));\n    stateNode.exit.push(cancel(eventType));\n    return eventType;\n  };\n  const delayedTransitions = Object.keys(afterConfig).flatMap((delay, i) => {\n    const configTransition = afterConfig[delay];\n    const resolvedTransition = typeof configTransition === 'string' ? {\n      target: configTransition\n    } : configTransition;\n    const resolvedDelay = Number.isNaN(+delay) ? delay : +delay;\n    const eventType = mutateEntryExit(resolvedDelay);\n    return toArray(resolvedTransition).map(transition => ({\n      ...transition,\n      event: eventType,\n      delay: resolvedDelay\n    }));\n  });\n  return delayedTransitions.map(delayedTransition => {\n    const {\n      delay\n    } = delayedTransition;\n    return {\n      ...formatTransition(stateNode, delayedTransition.event, delayedTransition),\n      delay\n    };\n  });\n}\nfunction formatTransition(stateNode, descriptor, transitionConfig) {\n  const normalizedTarget = normalizeTarget(transitionConfig.target);\n  const reenter = transitionConfig.reenter ?? false;\n  const target = resolveTarget(stateNode, normalizedTarget);\n\n  // TODO: should this be part of a lint rule instead?\n  if (transitionConfig.cond) {\n    throw new Error(`State \"${stateNode.id}\" has declared \\`cond\\` for one of its transitions. This property has been renamed to \\`guard\\`. Please update your code.`);\n  }\n  const transition = {\n    ...transitionConfig,\n    actions: toArray(transitionConfig.actions),\n    guard: transitionConfig.guard,\n    target,\n    source: stateNode,\n    reenter,\n    eventType: descriptor,\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: target ? target.map(t => `#${t.id}`) : undefined\n    })\n  };\n  return transition;\n}\nfunction formatTransitions(stateNode) {\n  const transitions = new Map();\n  if (stateNode.config.on) {\n    for (const descriptor of Object.keys(stateNode.config.on)) {\n      if (descriptor === NULL_EVENT) {\n        throw new Error('Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.');\n      }\n      const transitionsConfig = stateNode.config.on[descriptor];\n      transitions.set(descriptor, toTransitionConfigArray(transitionsConfig).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  if (stateNode.config.onDone) {\n    const descriptor = `xstate.done.state.${stateNode.id}`;\n    transitions.set(descriptor, toTransitionConfigArray(stateNode.config.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n  }\n  for (const invokeDef of stateNode.invoke) {\n    if (invokeDef.onDone) {\n      const descriptor = `xstate.done.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onDone).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onError) {\n      const descriptor = `xstate.error.actor.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onError).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n    if (invokeDef.onSnapshot) {\n      const descriptor = `xstate.snapshot.${invokeDef.id}`;\n      transitions.set(descriptor, toTransitionConfigArray(invokeDef.onSnapshot).map(t => formatTransition(stateNode, descriptor, t)));\n    }\n  }\n  for (const delayedTransition of stateNode.after) {\n    let existing = transitions.get(delayedTransition.eventType);\n    if (!existing) {\n      existing = [];\n      transitions.set(delayedTransition.eventType, existing);\n    }\n    existing.push(delayedTransition);\n  }\n  return transitions;\n}\nfunction formatInitialTransition(stateNode, _target) {\n  const resolvedTarget = typeof _target === 'string' ? stateNode.states[_target] : _target ? stateNode.states[_target.target] : undefined;\n  if (!resolvedTarget && _target) {\n    throw new Error(`Initial state node \"${_target}\" not found on parent state node #${stateNode.id}`);\n  }\n  const transition = {\n    source: stateNode,\n    actions: !_target || typeof _target === 'string' ? [] : toArray(_target.actions),\n    eventType: null,\n    reenter: false,\n    target: resolvedTarget ? [resolvedTarget] : [],\n    toJSON: () => ({\n      ...transition,\n      source: `#${stateNode.id}`,\n      target: resolvedTarget ? [`#${resolvedTarget.id}`] : []\n    })\n  };\n  return transition;\n}\nfunction resolveTarget(stateNode, targets) {\n  if (targets === undefined) {\n    // an undefined target signals that the state node should not transition from that state when receiving that event\n    return undefined;\n  }\n  return targets.map(target => {\n    if (typeof target !== 'string') {\n      return target;\n    }\n    if (isStateId(target)) {\n      return stateNode.machine.getStateNodeById(target);\n    }\n    const isInternalTarget = target[0] === STATE_DELIMITER;\n    // If internal target is defined on machine,\n    // do not include machine key on target\n    if (isInternalTarget && !stateNode.parent) {\n      return getStateNodeByPath(stateNode, target.slice(1));\n    }\n    const resolvedTarget = isInternalTarget ? stateNode.key + target : target;\n    if (stateNode.parent) {\n      try {\n        const targetStateNode = getStateNodeByPath(stateNode.parent, resolvedTarget);\n        return targetStateNode;\n      } catch (err) {\n        throw new Error(`Invalid transition definition for state node '${stateNode.id}':\\n${err.message}`);\n      }\n    } else {\n      throw new Error(`Invalid target: \"${target}\" is not a valid target from the root node. Did you mean \".${target}\"?`);\n    }\n  });\n}\nfunction resolveHistoryDefaultTransition(stateNode) {\n  const normalizedTarget = normalizeTarget(stateNode.config.target);\n  if (!normalizedTarget) {\n    return stateNode.parent.initial;\n  }\n  return {\n    target: normalizedTarget.map(t => typeof t === 'string' ? getStateNodeByPath(stateNode.parent, t) : t)\n  };\n}\nfunction isHistoryNode(stateNode) {\n  return stateNode.type === 'history';\n}\nfunction getInitialStateNodesWithTheirAncestors(stateNode) {\n  const states = getInitialStateNodes(stateNode);\n  for (const initialState of states) {\n    for (const ancestor of getProperAncestors(initialState, stateNode)) {\n      states.add(ancestor);\n    }\n  }\n  return states;\n}\nfunction getInitialStateNodes(stateNode) {\n  const set = new Set();\n  function iter(descStateNode) {\n    if (set.has(descStateNode)) {\n      return;\n    }\n    set.add(descStateNode);\n    if (descStateNode.type === 'compound') {\n      iter(descStateNode.initial.target[0]);\n    } else if (descStateNode.type === 'parallel') {\n      for (const child of getChildren(descStateNode)) {\n        iter(child);\n      }\n    }\n  }\n  iter(stateNode);\n  return set;\n}\n/** Returns the child state node from its relative `stateKey`, or throws. */\nfunction getStateNode(stateNode, stateKey) {\n  if (isStateId(stateKey)) {\n    return stateNode.machine.getStateNodeById(stateKey);\n  }\n  if (!stateNode.states) {\n    throw new Error(`Unable to retrieve child state '${stateKey}' from '${stateNode.id}'; no child states exist.`);\n  }\n  const result = stateNode.states[stateKey];\n  if (!result) {\n    throw new Error(`Child state '${stateKey}' does not exist on '${stateNode.id}'`);\n  }\n  return result;\n}\n\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nfunction getStateNodeByPath(stateNode, statePath) {\n  if (typeof statePath === 'string' && isStateId(statePath)) {\n    try {\n      return stateNode.machine.getStateNodeById(statePath);\n    } catch (e) {\n      // try individual paths\n      // throw e;\n    }\n  }\n  const arrayStatePath = toStatePath(statePath).slice();\n  let currentStateNode = stateNode;\n  while (arrayStatePath.length) {\n    const key = arrayStatePath.shift();\n    if (!key.length) {\n      break;\n    }\n    currentStateNode = getStateNode(currentStateNode, key);\n  }\n  return currentStateNode;\n}\n\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param stateValue The state value or State instance\n */\nfunction getStateNodes(stateNode, stateValue) {\n  if (typeof stateValue === 'string') {\n    const childStateNode = stateNode.states[stateValue];\n    if (!childStateNode) {\n      throw new Error(`State '${stateValue}' does not exist on '${stateNode.id}'`);\n    }\n    return [stateNode, childStateNode];\n  }\n  const childStateKeys = Object.keys(stateValue);\n  const childStateNodes = childStateKeys.map(subStateKey => getStateNode(stateNode, subStateKey)).filter(Boolean);\n  return [stateNode.machine.root, stateNode].concat(childStateNodes, childStateKeys.reduce((allSubStateNodes, subStateKey) => {\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    if (!subStateNode) {\n      return allSubStateNodes;\n    }\n    const subStateNodes = getStateNodes(subStateNode, stateValue[subStateKey]);\n    return allSubStateNodes.concat(subStateNodes);\n  }, []));\n}\nfunction transitionAtomicNode(stateNode, stateValue, snapshot, event) {\n  const childStateNode = getStateNode(stateNode, stateValue);\n  const next = childStateNode.next(snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionCompoundNode(stateNode, stateValue, snapshot, event) {\n  const subStateKeys = Object.keys(stateValue);\n  const childStateNode = getStateNode(stateNode, subStateKeys[0]);\n  const next = transitionNode(childStateNode, stateValue[subStateKeys[0]], snapshot, event);\n  if (!next || !next.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return next;\n}\nfunction transitionParallelNode(stateNode, stateValue, snapshot, event) {\n  const allInnerTransitions = [];\n  for (const subStateKey of Object.keys(stateValue)) {\n    const subStateValue = stateValue[subStateKey];\n    if (!subStateValue) {\n      continue;\n    }\n    const subStateNode = getStateNode(stateNode, subStateKey);\n    const innerTransitions = transitionNode(subStateNode, subStateValue, snapshot, event);\n    if (innerTransitions) {\n      allInnerTransitions.push(...innerTransitions);\n    }\n  }\n  if (!allInnerTransitions.length) {\n    return stateNode.next(snapshot, event);\n  }\n  return allInnerTransitions;\n}\nfunction transitionNode(stateNode, stateValue, snapshot, event) {\n  // leaf node\n  if (typeof stateValue === 'string') {\n    return transitionAtomicNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // compound node\n  if (Object.keys(stateValue).length === 1) {\n    return transitionCompoundNode(stateNode, stateValue, snapshot, event);\n  }\n\n  // parallel node\n  return transitionParallelNode(stateNode, stateValue, snapshot, event);\n}\nfunction getHistoryNodes(stateNode) {\n  return Object.keys(stateNode.states).map(key => stateNode.states[key]).filter(sn => sn.type === 'history');\n}\nfunction isDescendant(childStateNode, parentStateNode) {\n  let marker = childStateNode;\n  while (marker.parent && marker.parent !== parentStateNode) {\n    marker = marker.parent;\n  }\n  return marker.parent === parentStateNode;\n}\nfunction hasIntersection(s1, s2) {\n  const set1 = new Set(s1);\n  const set2 = new Set(s2);\n  for (const item of set1) {\n    if (set2.has(item)) {\n      return true;\n    }\n  }\n  for (const item of set2) {\n    if (set1.has(item)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeConflictingTransitions(enabledTransitions, stateNodeSet, historyValue) {\n  const filteredTransitions = new Set();\n  for (const t1 of enabledTransitions) {\n    let t1Preempted = false;\n    const transitionsToRemove = new Set();\n    for (const t2 of filteredTransitions) {\n      if (hasIntersection(computeExitSet([t1], stateNodeSet, historyValue), computeExitSet([t2], stateNodeSet, historyValue))) {\n        if (isDescendant(t1.source, t2.source)) {\n          transitionsToRemove.add(t2);\n        } else {\n          t1Preempted = true;\n          break;\n        }\n      }\n    }\n    if (!t1Preempted) {\n      for (const t3 of transitionsToRemove) {\n        filteredTransitions.delete(t3);\n      }\n      filteredTransitions.add(t1);\n    }\n  }\n  return Array.from(filteredTransitions);\n}\nfunction findLeastCommonAncestor(stateNodes) {\n  const [head, ...tail] = stateNodes;\n  for (const ancestor of getProperAncestors(head, undefined)) {\n    if (tail.every(sn => isDescendant(sn, ancestor))) {\n      return ancestor;\n    }\n  }\n}\nfunction getEffectiveTargetStates(transition, historyValue) {\n  if (!transition.target) {\n    return [];\n  }\n  const targets = new Set();\n  for (const targetNode of transition.target) {\n    if (isHistoryNode(targetNode)) {\n      if (historyValue[targetNode.id]) {\n        for (const node of historyValue[targetNode.id]) {\n          targets.add(node);\n        }\n      } else {\n        for (const node of getEffectiveTargetStates(resolveHistoryDefaultTransition(targetNode), historyValue)) {\n          targets.add(node);\n        }\n      }\n    } else {\n      targets.add(targetNode);\n    }\n  }\n  return [...targets];\n}\nfunction getTransitionDomain(transition, historyValue) {\n  const targetStates = getEffectiveTargetStates(transition, historyValue);\n  if (!targetStates) {\n    return;\n  }\n  if (!transition.reenter && targetStates.every(target => target === transition.source || isDescendant(target, transition.source))) {\n    return transition.source;\n  }\n  const lca = findLeastCommonAncestor(targetStates.concat(transition.source));\n  if (lca) {\n    return lca;\n  }\n\n  // at this point we know that it's a root transition since LCA couldn't be found\n  if (transition.reenter) {\n    return;\n  }\n  return transition.source.machine.root;\n}\nfunction computeExitSet(transitions, stateNodeSet, historyValue) {\n  const statesToExit = new Set();\n  for (const t of transitions) {\n    if (t.target?.length) {\n      const domain = getTransitionDomain(t, historyValue);\n      if (t.reenter && t.source === domain) {\n        statesToExit.add(domain);\n      }\n      for (const stateNode of stateNodeSet) {\n        if (isDescendant(stateNode, domain)) {\n          statesToExit.add(stateNode);\n        }\n      }\n    }\n  }\n  return [...statesToExit];\n}\nfunction areStateNodeCollectionsEqual(prevStateNodes, nextStateNodeSet) {\n  if (prevStateNodes.length !== nextStateNodeSet.size) {\n    return false;\n  }\n  for (const node of prevStateNodes) {\n    if (!nextStateNodeSet.has(node)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** https://www.w3.org/TR/scxml/#microstepProcedure */\nfunction microstep(transitions, currentSnapshot, actorScope, event, isInitial, internalQueue) {\n  if (!transitions.length) {\n    return currentSnapshot;\n  }\n  const mutStateNodeSet = new Set(currentSnapshot._nodes);\n  let historyValue = currentSnapshot.historyValue;\n  const filteredTransitions = removeConflictingTransitions(transitions, mutStateNodeSet, historyValue);\n  let nextState = currentSnapshot;\n\n  // Exit states\n  if (!isInitial) {\n    [nextState, historyValue] = exitStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, historyValue, internalQueue);\n  }\n\n  // Execute transition content\n  nextState = resolveActionsAndContext(nextState, event, actorScope, filteredTransitions.flatMap(t => t.actions), internalQueue);\n\n  // Enter states\n  nextState = enterStates(nextState, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial);\n  const nextStateNodes = [...mutStateNodeSet];\n  if (nextState.status === 'done') {\n    nextState = resolveActionsAndContext(nextState, event, actorScope, nextStateNodes.sort((a, b) => b.order - a.order).flatMap(state => state.exit), internalQueue);\n  }\n  try {\n    if (historyValue === currentSnapshot.historyValue && areStateNodeCollectionsEqual(currentSnapshot._nodes, mutStateNodeSet)) {\n      return nextState;\n    }\n    return cloneMachineSnapshot(nextState, {\n      _nodes: nextStateNodes,\n      historyValue\n    });\n  } catch (e) {\n    // TODO: Refactor this once proper error handling is implemented.\n    // See https://github.com/statelyai/rfcs/pull/4\n    throw e;\n  }\n}\nfunction getMachineOutput(snapshot, event, actorScope, rootNode, rootCompletionNode) {\n  if (rootNode.output === undefined) {\n    return;\n  }\n  const doneStateEvent = createDoneStateEvent(rootCompletionNode.id, rootCompletionNode.output !== undefined && rootCompletionNode.parent ? resolveOutput(rootCompletionNode.output, snapshot.context, event, actorScope.self) : undefined);\n  return resolveOutput(rootNode.output, snapshot.context, doneStateEvent, actorScope.self);\n}\nfunction enterStates(currentSnapshot, event, actorScope, filteredTransitions, mutStateNodeSet, internalQueue, historyValue, isInitial) {\n  let nextSnapshot = currentSnapshot;\n  const statesToEnter = new Set();\n  // those are states that were directly targeted or indirectly targeted by the explicit target\n  // in other words, those are states for which initial actions should be executed\n  // when we target `#deep_child` initial actions of its ancestors shouldn't be executed\n  const statesForDefaultEntry = new Set();\n  computeEntrySet(filteredTransitions, historyValue, statesForDefaultEntry, statesToEnter);\n\n  // In the initial state, the root state node is \"entered\".\n  if (isInitial) {\n    statesForDefaultEntry.add(currentSnapshot.machine.root);\n  }\n  const completedNodes = new Set();\n  for (const stateNodeToEnter of [...statesToEnter].sort((a, b) => a.order - b.order)) {\n    mutStateNodeSet.add(stateNodeToEnter);\n    const actions = [];\n\n    // Add entry actions\n    actions.push(...stateNodeToEnter.entry);\n    for (const invokeDef of stateNodeToEnter.invoke) {\n      actions.push(spawnChild(invokeDef.src, {\n        ...invokeDef,\n        syncSnapshot: !!invokeDef.onSnapshot\n      }));\n    }\n    if (statesForDefaultEntry.has(stateNodeToEnter)) {\n      const initialActions = stateNodeToEnter.initial.actions;\n      actions.push(...initialActions);\n    }\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, actions, internalQueue, stateNodeToEnter.invoke.map(invokeDef => invokeDef.id));\n    if (stateNodeToEnter.type === 'final') {\n      const parent = stateNodeToEnter.parent;\n      let ancestorMarker = parent?.type === 'parallel' ? parent : parent?.parent;\n      let rootCompletionNode = ancestorMarker || stateNodeToEnter;\n      if (parent?.type === 'compound') {\n        internalQueue.push(createDoneStateEvent(parent.id, stateNodeToEnter.output !== undefined ? resolveOutput(stateNodeToEnter.output, nextSnapshot.context, event, actorScope.self) : undefined));\n      }\n      while (ancestorMarker?.type === 'parallel' && !completedNodes.has(ancestorMarker) && isInFinalState(mutStateNodeSet, ancestorMarker)) {\n        completedNodes.add(ancestorMarker);\n        internalQueue.push(createDoneStateEvent(ancestorMarker.id));\n        rootCompletionNode = ancestorMarker;\n        ancestorMarker = ancestorMarker.parent;\n      }\n      if (ancestorMarker) {\n        continue;\n      }\n      nextSnapshot = cloneMachineSnapshot(nextSnapshot, {\n        status: 'done',\n        output: getMachineOutput(nextSnapshot, event, actorScope, nextSnapshot.machine.root, rootCompletionNode)\n      });\n    }\n  }\n  return nextSnapshot;\n}\nfunction computeEntrySet(transitions, historyValue, statesForDefaultEntry, statesToEnter) {\n  for (const t of transitions) {\n    const domain = getTransitionDomain(t, historyValue);\n    for (const s of t.target || []) {\n      if (!isHistoryNode(s) && (\n      // if the target is different than the source then it will *definitely* be entered\n      t.source !== s ||\n      // we know that the domain can't lie within the source\n      // if it's different than the source then it's outside of it and it means that the target has to be entered as well\n      t.source !== domain ||\n      // reentering transitions always enter the target, even if it's the source itself\n      t.reenter)) {\n        statesToEnter.add(s);\n        statesForDefaultEntry.add(s);\n      }\n      addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n    }\n    const targetStates = getEffectiveTargetStates(t, historyValue);\n    for (const s of targetStates) {\n      const ancestors = getProperAncestors(s, domain);\n      if (domain?.type === 'parallel') {\n        ancestors.push(domain);\n      }\n      addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, !t.source.parent && t.reenter ? undefined : domain);\n    }\n  }\n}\nfunction addDescendantStatesToEnter(stateNode, historyValue, statesForDefaultEntry, statesToEnter) {\n  if (isHistoryNode(stateNode)) {\n    if (historyValue[stateNode.id]) {\n      const historyStateNodes = historyValue[stateNode.id];\n      for (const s of historyStateNodes) {\n        statesToEnter.add(s);\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyStateNodes) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    } else {\n      const historyDefaultTransition = resolveHistoryDefaultTransition(stateNode);\n      for (const s of historyDefaultTransition.target) {\n        statesToEnter.add(s);\n        if (historyDefaultTransition === stateNode.parent?.initial) {\n          statesForDefaultEntry.add(stateNode.parent);\n        }\n        addDescendantStatesToEnter(s, historyValue, statesForDefaultEntry, statesToEnter);\n      }\n      for (const s of historyDefaultTransition.target) {\n        addProperAncestorStatesToEnter(s, stateNode.parent, statesToEnter, historyValue, statesForDefaultEntry);\n      }\n    }\n  } else {\n    if (stateNode.type === 'compound') {\n      const [initialState] = stateNode.initial.target;\n      if (!isHistoryNode(initialState)) {\n        statesToEnter.add(initialState);\n        statesForDefaultEntry.add(initialState);\n      }\n      addDescendantStatesToEnter(initialState, historyValue, statesForDefaultEntry, statesToEnter);\n      addProperAncestorStatesToEnter(initialState, stateNode, statesToEnter, historyValue, statesForDefaultEntry);\n    } else {\n      if (stateNode.type === 'parallel') {\n        for (const child of getChildren(stateNode).filter(sn => !isHistoryNode(sn))) {\n          if (![...statesToEnter].some(s => isDescendant(s, child))) {\n            if (!isHistoryNode(child)) {\n              statesToEnter.add(child);\n              statesForDefaultEntry.add(child);\n            }\n            addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n          }\n        }\n      }\n    }\n  }\n}\nfunction addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, ancestors, reentrancyDomain) {\n  for (const anc of ancestors) {\n    if (!reentrancyDomain || isDescendant(anc, reentrancyDomain)) {\n      statesToEnter.add(anc);\n    }\n    if (anc.type === 'parallel') {\n      for (const child of getChildren(anc).filter(sn => !isHistoryNode(sn))) {\n        if (![...statesToEnter].some(s => isDescendant(s, child))) {\n          statesToEnter.add(child);\n          addDescendantStatesToEnter(child, historyValue, statesForDefaultEntry, statesToEnter);\n        }\n      }\n    }\n  }\n}\nfunction addProperAncestorStatesToEnter(stateNode, toStateNode, statesToEnter, historyValue, statesForDefaultEntry) {\n  addAncestorStatesToEnter(statesToEnter, historyValue, statesForDefaultEntry, getProperAncestors(stateNode, toStateNode));\n}\nfunction exitStates(currentSnapshot, event, actorScope, transitions, mutStateNodeSet, historyValue, internalQueue) {\n  let nextSnapshot = currentSnapshot;\n  const statesToExit = computeExitSet(transitions, mutStateNodeSet, historyValue);\n  statesToExit.sort((a, b) => b.order - a.order);\n  let changedHistory;\n\n  // From SCXML algorithm: https://www.w3.org/TR/scxml/#exitStates\n  for (const exitStateNode of statesToExit) {\n    for (const historyNode of getHistoryNodes(exitStateNode)) {\n      let predicate;\n      if (historyNode.history === 'deep') {\n        predicate = sn => isAtomicStateNode(sn) && isDescendant(sn, exitStateNode);\n      } else {\n        predicate = sn => {\n          return sn.parent === exitStateNode;\n        };\n      }\n      changedHistory ??= {\n        ...historyValue\n      };\n      changedHistory[historyNode.id] = Array.from(mutStateNodeSet).filter(predicate);\n    }\n  }\n  for (const s of statesToExit) {\n    nextSnapshot = resolveActionsAndContext(nextSnapshot, event, actorScope, [...s.exit, ...s.invoke.map(def => stopChild(def.id))], internalQueue);\n    mutStateNodeSet.delete(s);\n  }\n  return [nextSnapshot, changedHistory || historyValue];\n}\nlet executingCustomAction = false;\nfunction resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, extra, retries) {\n  const {\n    machine\n  } = currentSnapshot;\n  let intermediateSnapshot = currentSnapshot;\n  for (const action of actions) {\n    const isInline = typeof action === 'function';\n    const resolvedAction = isInline ? action :\n    // the existing type of `.actions` assumes non-nullable `TExpressionAction`\n    // it's fine to cast this here to get a common type and lack of errors in the rest of the code\n    // our logic below makes sure that we call those 2 \"variants\" correctly\n    machine.implementations.actions[typeof action === 'string' ? action : action.type];\n    if (!resolvedAction) {\n      continue;\n    }\n    const actionArgs = {\n      context: intermediateSnapshot.context,\n      event,\n      self: actorScope.self,\n      system: actorScope.system\n    };\n    const actionParams = isInline || typeof action === 'string' ? undefined : 'params' in action ? typeof action.params === 'function' ? action.params({\n      context: intermediateSnapshot.context,\n      event\n    }) : action.params : undefined;\n    function executeAction() {\n      actorScope.system._sendInspectionEvent({\n        type: '@xstate.action',\n        actorRef: actorScope.self,\n        action: {\n          type: typeof action === 'string' ? action : typeof action === 'object' ? action.type : action.name || '(anonymous)',\n          params: actionParams\n        }\n      });\n      try {\n        executingCustomAction = resolvedAction;\n        resolvedAction(actionArgs, actionParams);\n      } finally {\n        executingCustomAction = false;\n      }\n    }\n    if (!('resolve' in resolvedAction)) {\n      if (actorScope.self._processingStatus === ProcessingStatus.Running) {\n        executeAction();\n      } else {\n        actorScope.defer(() => {\n          executeAction();\n        });\n      }\n      continue;\n    }\n    const builtinAction = resolvedAction;\n    const [nextState, params, actions] = builtinAction.resolve(actorScope, intermediateSnapshot, actionArgs, actionParams, resolvedAction,\n    // this holds all params\n    extra);\n    intermediateSnapshot = nextState;\n    if ('retryResolve' in builtinAction) {\n      retries?.push([builtinAction, params]);\n    }\n    if ('execute' in builtinAction) {\n      if (actorScope.self._processingStatus === ProcessingStatus.Running) {\n        builtinAction.execute(actorScope, params);\n      } else {\n        actorScope.defer(builtinAction.execute.bind(null, actorScope, params));\n      }\n    }\n    if (actions) {\n      intermediateSnapshot = resolveAndExecuteActionsWithContext(intermediateSnapshot, event, actorScope, actions, extra, retries);\n    }\n  }\n  return intermediateSnapshot;\n}\nfunction resolveActionsAndContext(currentSnapshot, event, actorScope, actions, internalQueue, deferredActorIds) {\n  const retries = deferredActorIds ? [] : undefined;\n  const nextState = resolveAndExecuteActionsWithContext(currentSnapshot, event, actorScope, actions, {\n    internalQueue,\n    deferredActorIds\n  }, retries);\n  retries?.forEach(([builtinAction, params]) => {\n    builtinAction.retryResolve(actorScope, nextState, params);\n  });\n  return nextState;\n}\nfunction macrostep(snapshot, event, actorScope, internalQueue = []) {\n  if (event.type === WILDCARD) {\n    throw new Error(`An event cannot have the wildcard type ('${WILDCARD}')`);\n  }\n  let nextSnapshot = snapshot;\n  const microstates = [];\n  function addMicrostate(microstate, event, transitions) {\n    actorScope.system._sendInspectionEvent({\n      type: '@xstate.microstep',\n      actorRef: actorScope.self,\n      event,\n      snapshot: microstate,\n      _transitions: transitions\n    });\n    microstates.push(microstate);\n  }\n\n  // Handle stop event\n  if (event.type === XSTATE_STOP) {\n    nextSnapshot = cloneMachineSnapshot(stopChildren(nextSnapshot, event, actorScope), {\n      status: 'stopped'\n    });\n    addMicrostate(nextSnapshot, event, []);\n    return {\n      snapshot: nextSnapshot,\n      microstates\n    };\n  }\n  let nextEvent = event;\n\n  // Assume the state is at rest (no raised events)\n  // Determine the next state based on the next microstep\n  if (nextEvent.type !== XSTATE_INIT) {\n    const currentEvent = nextEvent;\n    const isErr = isErrorActorEvent(currentEvent);\n    const transitions = selectTransitions(currentEvent, nextSnapshot);\n    if (isErr && !transitions.length) {\n      // TODO: we should likely only allow transitions selected by very explicit descriptors\n      // `*` shouldn't be matched, likely `xstate.error.*` shouldnt be either\n      // similarly `xstate.error.actor.*` and `xstate.error.actor.todo.*` have to be considered too\n      nextSnapshot = cloneMachineSnapshot(snapshot, {\n        status: 'error',\n        error: currentEvent.error\n      });\n      addMicrostate(nextSnapshot, currentEvent, []);\n      return {\n        snapshot: nextSnapshot,\n        microstates\n      };\n    }\n    nextSnapshot = microstep(transitions, snapshot, actorScope, nextEvent, false,\n    // isInitial\n    internalQueue);\n    addMicrostate(nextSnapshot, currentEvent, transitions);\n  }\n  let shouldSelectEventlessTransitions = true;\n  while (nextSnapshot.status === 'active') {\n    let enabledTransitions = shouldSelectEventlessTransitions ? selectEventlessTransitions(nextSnapshot, nextEvent) : [];\n\n    // eventless transitions should always be selected after selecting *regular* transitions\n    // by assigning `undefined` to `previousState` we ensure that `shouldSelectEventlessTransitions` gets always computed to true in such a case\n    const previousState = enabledTransitions.length ? nextSnapshot : undefined;\n    if (!enabledTransitions.length) {\n      if (!internalQueue.length) {\n        break;\n      }\n      nextEvent = internalQueue.shift();\n      enabledTransitions = selectTransitions(nextEvent, nextSnapshot);\n    }\n    nextSnapshot = microstep(enabledTransitions, nextSnapshot, actorScope, nextEvent, false, internalQueue);\n    shouldSelectEventlessTransitions = nextSnapshot !== previousState;\n    addMicrostate(nextSnapshot, nextEvent, enabledTransitions);\n  }\n  if (nextSnapshot.status !== 'active') {\n    stopChildren(nextSnapshot, nextEvent, actorScope);\n  }\n  return {\n    snapshot: nextSnapshot,\n    microstates\n  };\n}\nfunction stopChildren(nextState, event, actorScope) {\n  return resolveActionsAndContext(nextState, event, actorScope, Object.values(nextState.children).map(child => stopChild(child)), []);\n}\nfunction selectTransitions(event, nextState) {\n  return nextState.machine.getTransitionData(nextState, event);\n}\nfunction selectEventlessTransitions(nextState, event) {\n  const enabledTransitionSet = new Set();\n  const atomicStates = nextState._nodes.filter(isAtomicStateNode);\n  for (const stateNode of atomicStates) {\n    loop: for (const s of [stateNode].concat(getProperAncestors(stateNode, undefined))) {\n      if (!s.always) {\n        continue;\n      }\n      for (const transition of s.always) {\n        if (transition.guard === undefined || evaluateGuard(transition.guard, nextState.context, event, nextState)) {\n          enabledTransitionSet.add(transition);\n          break loop;\n        }\n      }\n    }\n  }\n  return removeConflictingTransitions(Array.from(enabledTransitionSet), new Set(nextState._nodes), nextState.historyValue);\n}\n\n/**\n * Resolves a partial state value with its full representation in the state\n * node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nfunction resolveStateValue(rootNode, stateValue) {\n  const allStateNodes = getAllStateNodes(getStateNodes(rootNode, stateValue));\n  return getStateValue(rootNode, [...allStateNodes]);\n}\n\nfunction isMachineSnapshot(value) {\n  return !!value && typeof value === 'object' && 'machine' in value && 'value' in value;\n}\nconst machineSnapshotMatches = function matches(testValue) {\n  return matchesState(testValue, this.value);\n};\nconst machineSnapshotHasTag = function hasTag(tag) {\n  return this.tags.has(tag);\n};\nconst machineSnapshotCan = function can(event) {\n  if (!this.machine) {\n    console.warn(`state.can(...) used outside of a machine-created State object; this will always return false.`);\n  }\n  const transitionData = this.machine.getTransitionData(this, event);\n  return !!transitionData?.length &&\n  // Check that at least one transition is not forbidden\n  transitionData.some(t => t.target !== undefined || t.actions.length);\n};\nconst machineSnapshotToJSON = function toJSON() {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    getMeta,\n    toJSON,\n    can,\n    hasTag,\n    matches,\n    ...jsonValues\n  } = this;\n  return {\n    ...jsonValues,\n    tags: Array.from(tags)\n  };\n};\nconst machineSnapshotGetMeta = function getMeta() {\n  return this._nodes.reduce((acc, stateNode) => {\n    if (stateNode.meta !== undefined) {\n      acc[stateNode.id] = stateNode.meta;\n    }\n    return acc;\n  }, {});\n};\nfunction createMachineSnapshot(config, machine) {\n  return {\n    status: config.status,\n    output: config.output,\n    error: config.error,\n    machine,\n    context: config.context,\n    _nodes: config._nodes,\n    value: getStateValue(machine.root, config._nodes),\n    tags: new Set(config._nodes.flatMap(sn => sn.tags)),\n    children: config.children,\n    historyValue: config.historyValue || {},\n    matches: machineSnapshotMatches,\n    hasTag: machineSnapshotHasTag,\n    can: machineSnapshotCan,\n    getMeta: machineSnapshotGetMeta,\n    toJSON: machineSnapshotToJSON\n  };\n}\nfunction cloneMachineSnapshot(snapshot, config = {}) {\n  return createMachineSnapshot({\n    ...snapshot,\n    ...config\n  }, snapshot.machine);\n}\nfunction getPersistedSnapshot(snapshot, options) {\n  const {\n    _nodes: nodes,\n    tags,\n    machine,\n    children,\n    context,\n    can,\n    hasTag,\n    matches,\n    getMeta,\n    toJSON,\n    ...jsonValues\n  } = snapshot;\n  const childrenJson = {};\n  for (const id in children) {\n    const child = children[id];\n    if (typeof child.src !== 'string' && (!options || !('__unsafeAllowInlineActors' in options))) {\n      throw new Error('An inline child actor cannot be persisted.');\n    }\n    childrenJson[id] = {\n      snapshot: child.getPersistedSnapshot(options),\n      src: child.src,\n      systemId: child._systemId,\n      syncSnapshot: child._syncSnapshot\n    };\n  }\n  const persisted = {\n    ...jsonValues,\n    context: persistContext(context),\n    children: childrenJson\n  };\n  return persisted;\n}\nfunction persistContext(contextPart) {\n  let copy;\n  for (const key in contextPart) {\n    const value = contextPart[key];\n    if (value && typeof value === 'object') {\n      if ('sessionId' in value && 'send' in value && 'ref' in value) {\n        copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n          ...contextPart\n        };\n        copy[key] = {\n          xstate$$type: $$ACTOR_TYPE,\n          id: value.id\n        };\n      } else {\n        const result = persistContext(value);\n        if (result !== value) {\n          copy ??= Array.isArray(contextPart) ? contextPart.slice() : {\n            ...contextPart\n          };\n          copy[key] = result;\n        }\n      }\n    }\n  }\n  return copy ?? contextPart;\n}\n\nfunction resolveRaise(_, snapshot, args, actionParams, {\n  event: eventOrExpr,\n  id,\n  delay\n}, {\n  internalQueue\n}) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(`Only event objects may be used with raise; use raise({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  if (typeof resolvedDelay !== 'number') {\n    internalQueue.push(resolvedEvent);\n  }\n  return [snapshot, {\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }];\n}\nfunction executeRaise(actorScope, params) {\n  const {\n    event,\n    delay,\n    id\n  } = params;\n  if (typeof delay === 'number') {\n    actorScope.defer(() => {\n      const self = actorScope.self;\n      actorScope.system.scheduler.schedule(self, self, event, delay, id);\n    });\n    return;\n  }\n}\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\nfunction raise(eventOrExpr, options) {\n  if (executingCustomAction) {\n    console.warn('Custom actions should not call `raise()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');\n  }\n  function raise(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  raise.type = 'xstate.raise';\n  raise.event = eventOrExpr;\n  raise.id = options?.id;\n  raise.delay = options?.delay;\n  raise.resolve = resolveRaise;\n  raise.execute = executeRaise;\n  return raise;\n}\n\nexport { $$ACTOR_TYPE as $, createActor as A, Actor as B, interpret as C, and as D, not as E, or as F, stateIn as G, isMachineSnapshot as H, getAllOwnEventDescriptors as I, matchesState as J, pathToStateValue as K, toObserver as L, cancel as M, NULL_EVENT as N, raise as O, spawnChild as P, stop as Q, stopChild as R, STATE_DELIMITER as S, ProcessingStatus as T, cloneMachineSnapshot as U, executingCustomAction as V, XSTATE_ERROR as W, XSTATE_STOP as X, createErrorActorEvent as Y, toTransitionConfigArray as a, formatTransition as b, createInvokeId as c, formatInitialTransition as d, evaluateGuard as e, formatTransitions as f, getDelayedTransitions as g, getCandidates as h, getAllStateNodes as i, getStateNodes as j, createMachineSnapshot as k, isInFinalState as l, mapValues as m, macrostep as n, transitionNode as o, resolveActionsAndContext as p, createInitEvent as q, resolveStateValue as r, microstep as s, toArray as t, getInitialStateNodes as u, toStatePath as v, isStateId as w, getStateNodeByPath as x, getPersistedSnapshot as y, resolveReferencedActor as z };\n", "import { X as XSTATE_STOP, A as createActor } from '../../dist/raise-5ea71f04.development.esm.js';\nimport '../../dev/dist/xstate-dev.development.esm.js';\n\n/**\n * Represents an actor created by `fromTransition`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import {\n *   fromTransition,\n *   createActor,\n *   type AnyActorSystem\n * } from 'xstate';\n *\n * //* The actor's stored context.\n * type Context = {\n *   // The current count.\n *   count: number;\n *   // The amount to increase `count` by.\n *   step: number;\n * };\n * // The events the actor receives.\n * type Event = { type: 'increment' };\n * // The actor's input.\n * type Input = { step?: number };\n *\n * // Actor logic that increments `count` by `step` when it receives an event of\n * // type `increment`.\n * const logic = fromTransition<Context, Event, AnyActorSystem, Input>(\n *   (state, event, actorScope) => {\n *     actorScope.self;\n *     //         ^? TransitionActorRef<Context, Event>\n *\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + state.step\n *       };\n *     }\n *     return state;\n *   },\n *   ({ input, self }) => {\n *     self;\n *     // ^? TransitionActorRef<Context, Event>\n *\n *     return {\n *       count: 0,\n *       step: input.step ?? 1\n *     };\n *   }\n * );\n *\n * const actor = createActor(logic, { input: { step: 10 } });\n * //    ^? TransitionActorRef<Context, Event>\n * ```\n *\n * @see {@link fromTransition}\n */\n\n/**\n * Returns actor logic given a transition function and its initial state.\n *\n * A “transition function” is a function that takes the current `state` and\n * received `event` object as arguments, and returns the next state, similar to\n * a reducer.\n *\n * Actors created from transition logic (“transition actors”) can:\n *\n * - Receive events\n * - Emit snapshots of its state\n *\n * The transition function’s `state` is used as its transition actor’s\n * `context`.\n *\n * Note that the \"state\" for a transition function is provided by the initial\n * state argument, and is not the same as the State object of an actor or a\n * state within a machine configuration.\n *\n * @example\n *\n * ```ts\n * const transitionLogic = fromTransition(\n *   (state, event) => {\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + 1\n *       };\n *     }\n *     return state;\n *   },\n *   { count: 0 }\n * );\n *\n * const transitionActor = createActor(transitionLogic);\n * transitionActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * transitionActor.start();\n * // => {\n * //   status: 'active',\n * //   context: { count: 0 },\n * //   ...\n * // }\n *\n * transitionActor.send({ type: 'increment' });\n * // => {\n * //   status: 'active',\n * //   context: { count: 1 },\n * //   ...\n * // }\n * ```\n *\n * @param transition The transition function used to describe the transition\n *   logic. It should return the next state given the current state and event.\n *   It receives the following arguments:\n *\n *   - `state` - the current state.\n *   - `event` - the received event.\n *   - `actorScope` - the actor scope object, with properties like `self` and\n *       `system`.\n *\n * @param initialContext The initial state of the transition function, either an\n *   object representing the state, or a function which returns a state object.\n *   If a function, it will receive as its only argument an object with the\n *   following properties:\n *\n *   - `input` - the `input` provided to its parent transition actor.\n *   - `self` - a reference to its parent transition actor.\n *\n * @returns Actor logic\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromTransition(transition, initialContext) {\n  return {\n    config: transition,\n    transition: (snapshot, event, actorScope) => {\n      return {\n        ...snapshot,\n        context: transition(snapshot.context, event, actorScope)\n      };\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: typeof initialContext === 'function' ? initialContext({\n          input\n        }) : initialContext\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n}\n\nconst instanceStates = /* #__PURE__ */new WeakMap();\n\n/**\n * Represents an actor created by `fromCallback`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromCallback, createActor } from 'xstate';\n *\n * // The events the actor receives.\n * type Event = { type: 'someEvent' };\n * // The actor's input.\n * type Input = { name: string };\n *\n * // Actor logic that logs whenever it receives an event of type `someEvent`.\n * const logic = fromCallback<Event, Input>(({ self, input, receive }) => {\n *   self;\n *   // ^? CallbackActorRef<Event, Input>\n *\n *   receive((event) => {\n *     if (event.type === 'someEvent') {\n *       console.log(`${input.name}: received \"someEvent\" event`);\n *       // logs 'myActor: received \"someEvent\" event'\n *     }\n *   });\n * });\n *\n * const actor = createActor(logic, { input: { name: 'myActor' } });\n * //    ^? CallbackActorRef<Event, Input>\n * ```\n *\n * @see {@link fromCallback}\n */\n\n/**\n * An actor logic creator which returns callback logic as defined by a callback\n * function.\n *\n * @remarks\n * Useful for subscription-based or other free-form logic that can send events\n * back to the parent actor.\n *\n * Actors created from callback logic (“callback actors”) can:\n *\n * - Receive events via the `receive` function\n * - Send events to the parent actor via the `sendBack` function\n *\n * Callback actors are a bit different from other actors in that they:\n *\n * - Do not work with `onDone`\n * - Do not produce a snapshot using `.getSnapshot()`\n * - Do not emit values when used with `.subscribe()`\n * - Can not be stopped with `.stop()`\n *\n * @example\n *\n * ```typescript\n * const callbackLogic = fromCallback(({ sendBack, receive }) => {\n *   let lockStatus = 'unlocked';\n *\n *   const handler = (event) => {\n *     if (lockStatus === 'locked') {\n *       return;\n *     }\n *     sendBack(event);\n *   };\n *\n *   receive((event) => {\n *     if (event.type === 'lock') {\n *       lockStatus = 'locked';\n *     } else if (event.type === 'unlock') {\n *       lockStatus = 'unlocked';\n *     }\n *   });\n *\n *   document.body.addEventListener('click', handler);\n *\n *   return () => {\n *     document.body.removeEventListener('click', handler);\n *   };\n * });\n * ```\n *\n * @param callback - The callback function used to describe the callback logic\n *   The callback function is passed an object with the following properties:\n *\n *   - `receive` - A function that can send events back to the parent actor; the\n *       listener is then called whenever events are received by the callback\n *       actor\n *   - `sendBack` - A function that can send events back to the parent actor\n *   - `input` - Data that was provided to the callback actor\n *   - `self` - The parent actor of the callback actor\n *   - `system` - The actor system to which the callback actor belongs The callback\n *       function can (optionally) return a cleanup function, which is called\n *       when the actor is stopped.\n *\n * @returns Callback logic\n * @see {@link CallbackLogicFunction} for more information about the callback function and its object argument\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromCallback(callback) {\n  const logic = {\n    config: callback,\n    start: (state, actorScope) => {\n      const {\n        self,\n        system,\n        emit\n      } = actorScope;\n      const callbackState = {\n        receivers: undefined,\n        dispose: undefined\n      };\n      instanceStates.set(self, callbackState);\n      callbackState.dispose = callback({\n        input: state.input,\n        system,\n        self,\n        sendBack: event => {\n          if (self.getSnapshot().status === 'stopped') {\n            return;\n          }\n          if (self._parent) {\n            system._relay(self, self._parent, event);\n          }\n        },\n        receive: listener => {\n          callbackState.receivers ??= new Set();\n          callbackState.receivers.add(listener);\n        },\n        emit\n      });\n    },\n    transition: (state, event, actorScope) => {\n      const callbackState = instanceStates.get(actorScope.self);\n      if (event.type === XSTATE_STOP) {\n        state = {\n          ...state,\n          status: 'stopped',\n          error: undefined\n        };\n        callbackState.dispose?.();\n        return state;\n      }\n      callbackState.receivers?.forEach(receiver => receiver(event));\n      return state;\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n  return logic;\n}\n\nconst XSTATE_OBSERVABLE_NEXT = 'xstate.observable.next';\nconst XSTATE_OBSERVABLE_ERROR = 'xstate.observable.error';\nconst XSTATE_OBSERVABLE_COMPLETE = 'xstate.observable.complete';\n\n/**\n * Represents an actor created by `fromObservable` or `fromEventObservable`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromObservable, createActor } from 'xstate';\n * import { interval } from 'rxjs';\n *\n * // The type of the value observed by the actor's logic.\n * type Context = number;\n * // The actor's input.\n * type Input = { period?: number };\n *\n * // Actor logic that observes a number incremented every `input.period`\n * // milliseconds (default: 1_000).\n * const logic = fromObservable<Context, Input>(({ input, self }) => {\n *   self;\n *   // ^? ObservableActorRef<Event, Input>\n *\n *   return interval(input.period ?? 1_000);\n * });\n *\n * const actor = createActor(logic, { input: { period: 2_000 } });\n * //    ^? ObservableActorRef<Event, Input>\n * ```\n *\n * @see {@link fromObservable}\n * @see {@link fromEventObservable}\n */\n\n/**\n * Observable actor logic is described by an observable stream of values. Actors\n * created from observable logic (“observable actors”) can:\n *\n * - Emit snapshots of the observable’s emitted value\n *\n * The observable’s emitted value is used as its observable actor’s `context`.\n *\n * Sending events to observable actors will have no effect.\n *\n * @example\n *\n * ```ts\n * import { fromObservable, createActor } from 'xstate';\n * import { interval } from 'rxjs';\n *\n * const logic = fromObservable((obj) => interval(1000));\n *\n * const actor = createActor(logic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot.context);\n * });\n *\n * actor.start();\n * // At every second:\n * // Logs 0\n * // Logs 1\n * // Logs 2\n * // ...\n * ```\n *\n * @param observableCreator A function that creates an observable. It receives\n *   one argument, an object with the following properties:\n *\n *   - `input` - Data that was provided to the observable actor\n *   - `self` - The parent actor\n *   - `system` - The actor system to which the observable actor belongs\n *\n *   It should return a {@link Subscribable}, which is compatible with an RxJS\n *   Observable, although RxJS is not required to create them.\n * @see {@link https://rxjs.dev} for documentation on RxJS Observable and observable creators.\n * @see {@link Subscribable} interface in XState, which is based on and compatible with RxJS Observable.\n */\nfunction fromObservable(observableCreator) {\n  // TODO: add event types\n  const logic = {\n    config: observableCreator,\n    transition: (snapshot, event) => {\n      if (snapshot.status !== 'active') {\n        return snapshot;\n      }\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_NEXT:\n          {\n            const newSnapshot = {\n              ...snapshot,\n              context: event.data\n            };\n            return newSnapshot;\n          }\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...snapshot,\n            status: 'error',\n            error: event.data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...snapshot,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_STOP:\n          snapshot._subscription.unsubscribe();\n          return {\n            ...snapshot,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return snapshot;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = observableCreator({\n        input: state.input,\n        system,\n        self,\n        emit\n      }).subscribe({\n        next: value => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_NEXT,\n            data: value\n          });\n        },\n        error: err => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_COMPLETE\n          });\n        }\n      });\n    },\n    getPersistedSnapshot: ({\n      _subscription,\n      ...state\n    }) => state,\n    restoreSnapshot: state => ({\n      ...state,\n      _subscription: undefined\n    })\n  };\n  return logic;\n}\n\n/**\n * Creates event observable logic that listens to an observable that delivers\n * event objects.\n *\n * Event observable actor logic is described by an observable stream of\n * {@link https://stately.ai/docs/transitions#event-objects | event objects}.\n * Actors created from event observable logic (“event observable actors”) can:\n *\n * - Implicitly send events to its parent actor\n * - Emit snapshots of its emitted event objects\n *\n * Sending events to event observable actors will have no effect.\n *\n * @example\n *\n * ```ts\n * import {\n *   fromEventObservable,\n *   Subscribable,\n *   EventObject,\n *   createMachine,\n *   createActor\n * } from 'xstate';\n * import { fromEvent } from 'rxjs';\n *\n * const mouseClickLogic = fromEventObservable(\n *   () => fromEvent(document.body, 'click') as Subscribable<EventObject>\n * );\n *\n * const canvasMachine = createMachine({\n *   invoke: {\n *     // Will send mouse `click` events to the canvas actor\n *     src: mouseClickLogic\n *   }\n * });\n *\n * const canvasActor = createActor(canvasMachine);\n * canvasActor.start();\n * ```\n *\n * @param lazyObservable A function that creates an observable that delivers\n *   event objects. It receives one argument, an object with the following\n *   properties:\n *\n *   - `input` - Data that was provided to the event observable actor\n *   - `self` - The parent actor\n *   - `system` - The actor system to which the event observable actor belongs.\n *\n *   It should return a {@link Subscribable}, which is compatible with an RxJS\n *   Observable, although RxJS is not required to create them.\n */\nfunction fromEventObservable(lazyObservable) {\n  // TODO: event types\n  const logic = {\n    config: lazyObservable,\n    transition: (state, event) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case XSTATE_OBSERVABLE_ERROR:\n          return {\n            ...state,\n            status: 'error',\n            error: event.data,\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_OBSERVABLE_COMPLETE:\n          return {\n            ...state,\n            status: 'done',\n            input: undefined,\n            _subscription: undefined\n          };\n        case XSTATE_STOP:\n          state._subscription.unsubscribe();\n          return {\n            ...state,\n            status: 'stopped',\n            input: undefined,\n            _subscription: undefined\n          };\n        default:\n          return state;\n      }\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        context: undefined,\n        input,\n        _subscription: undefined\n      };\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      if (state.status === 'done') {\n        // Do not restart a completed observable\n        return;\n      }\n      state._subscription = lazyObservable({\n        input: state.input,\n        system,\n        self,\n        emit\n      }).subscribe({\n        next: value => {\n          if (self._parent) {\n            system._relay(self, self._parent, value);\n          }\n        },\n        error: err => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_ERROR,\n            data: err\n          });\n        },\n        complete: () => {\n          system._relay(self, self, {\n            type: XSTATE_OBSERVABLE_COMPLETE\n          });\n        }\n      });\n    },\n    getPersistedSnapshot: ({\n      _subscription,\n      ...snapshot\n    }) => snapshot,\n    restoreSnapshot: snapshot => ({\n      ...snapshot,\n      _subscription: undefined\n    })\n  };\n  return logic;\n}\n\nconst XSTATE_PROMISE_RESOLVE = 'xstate.promise.resolve';\nconst XSTATE_PROMISE_REJECT = 'xstate.promise.reject';\n\n/**\n * Represents an actor created by `fromPromise`.\n *\n * The type of `self` within the actor's logic.\n *\n * @example\n *\n * ```ts\n * import { fromPromise, createActor } from 'xstate';\n *\n * // The actor's resolved output\n * type Output = string;\n * // The actor's input.\n * type Input = { message: string };\n *\n * // Actor logic that fetches the url of an image of a cat saying `input.message`.\n * const logic = fromPromise<Output, Input>(async ({ input, self }) => {\n *   self;\n *   // ^? PromiseActorRef<Output, Input>\n *\n *   const data = await fetch(\n *     `https://cataas.com/cat/says/${input.message}`\n *   );\n *   const url = await data.json();\n *   return url;\n * });\n *\n * const actor = createActor(logic, { input: { message: 'hello world' } });\n * //    ^? PromiseActorRef<Output, Input>\n * ```\n *\n * @see {@link fromPromise}\n */\n\nconst controllerMap = new WeakMap();\n\n/**\n * An actor logic creator which returns promise logic as defined by an async\n * process that resolves or rejects after some time.\n *\n * Actors created from promise actor logic (“promise actors”) can:\n *\n * - Emit the resolved value of the promise\n * - Output the resolved value of the promise\n *\n * Sending events to promise actors will have no effect.\n *\n * @example\n *\n * ```ts\n * const promiseLogic = fromPromise(async () => {\n *   const result = await fetch('https://example.com/...').then((data) =>\n *     data.json()\n *   );\n *\n *   return result;\n * });\n *\n * const promiseActor = createActor(promiseLogic);\n * promiseActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * promiseActor.start();\n * // => {\n * //   output: undefined,\n * //   status: 'active'\n * //   ...\n * // }\n *\n * // After promise resolves\n * // => {\n * //   output: { ... },\n * //   status: 'done',\n * //   ...\n * // }\n * ```\n *\n * @param promiseCreator A function which returns a Promise, and accepts an\n *   object with the following properties:\n *\n *   - `input` - Data that was provided to the promise actor\n *   - `self` - The parent actor of the promise actor\n *   - `system` - The actor system to which the promise actor belongs\n *\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n */\nfunction fromPromise(promiseCreator) {\n  const logic = {\n    config: promiseCreator,\n    transition: (state, event, scope) => {\n      if (state.status !== 'active') {\n        return state;\n      }\n      switch (event.type) {\n        case XSTATE_PROMISE_RESOLVE:\n          {\n            const resolvedValue = event.data;\n            return {\n              ...state,\n              status: 'done',\n              output: resolvedValue,\n              input: undefined\n            };\n          }\n        case XSTATE_PROMISE_REJECT:\n          return {\n            ...state,\n            status: 'error',\n            error: event.data,\n            input: undefined\n          };\n        case XSTATE_STOP:\n          {\n            controllerMap.get(scope.self)?.abort();\n            return {\n              ...state,\n              status: 'stopped',\n              input: undefined\n            };\n          }\n        default:\n          return state;\n      }\n    },\n    start: (state, {\n      self,\n      system,\n      emit\n    }) => {\n      // TODO: determine how to allow customizing this so that promises\n      // can be restarted if necessary\n      if (state.status !== 'active') {\n        return;\n      }\n      const controller = new AbortController();\n      controllerMap.set(self, controller);\n      const resolvedPromise = Promise.resolve(promiseCreator({\n        input: state.input,\n        system,\n        self,\n        signal: controller.signal,\n        emit\n      }));\n      resolvedPromise.then(response => {\n        if (self.getSnapshot().status !== 'active') {\n          return;\n        }\n        controllerMap.delete(self);\n        system._relay(self, self, {\n          type: XSTATE_PROMISE_RESOLVE,\n          data: response\n        });\n      }, errorData => {\n        if (self.getSnapshot().status !== 'active') {\n          return;\n        }\n        controllerMap.delete(self);\n        system._relay(self, self, {\n          type: XSTATE_PROMISE_REJECT,\n          data: errorData\n        });\n      });\n    },\n    getInitialSnapshot: (_, input) => {\n      return {\n        status: 'active',\n        output: undefined,\n        error: undefined,\n        input\n      };\n    },\n    getPersistedSnapshot: snapshot => snapshot,\n    restoreSnapshot: snapshot => snapshot\n  };\n  return logic;\n}\n\nconst emptyLogic = fromTransition(_ => undefined, undefined);\nfunction createEmptyActor() {\n  return createActor(emptyLogic);\n}\n\nexport { createEmptyActor, fromCallback, fromEventObservable, fromObservable, fromPromise, fromTransition };\n", "import { T as ProcessingStatus, z as resolveReferencedActor, A as createActor, U as cloneMachineSnapshot, V as executingCustomAction, W as XSTATE_ERROR, Y as createErrorActorEvent, e as evaluateGuard, M as cancel, O as raise, P as spawnChild, R as stopChild } from './raise-5ea71f04.development.esm.js';\n\nfunction createSpawner(actorScope, {\n  machine,\n  context\n}, event, spawnedChildren) {\n  const spawn = (src, options = {}) => {\n    const {\n      systemId,\n      input\n    } = options;\n    if (typeof src === 'string') {\n      const logic = resolveReferencedActor(machine, src);\n      if (!logic) {\n        throw new Error(`Actor logic '${src}' not implemented in machine '${machine.id}'`);\n      }\n      const actorRef = createActor(logic, {\n        id: options.id,\n        parent: actorScope.self,\n        syncSnapshot: options.syncSnapshot,\n        input: typeof input === 'function' ? input({\n          context,\n          event,\n          self: actorScope.self\n        }) : input,\n        src,\n        systemId\n      });\n      spawnedChildren[actorRef.id] = actorRef;\n      return actorRef;\n    } else {\n      const actorRef = createActor(src, {\n        id: options.id,\n        parent: actorScope.self,\n        syncSnapshot: options.syncSnapshot,\n        input: options.input,\n        src,\n        systemId\n      });\n      return actorRef;\n    }\n  };\n  return (src, options) => {\n    const actorRef = spawn(src, options); // TODO: fix types\n    spawnedChildren[actorRef.id] = actorRef;\n    actorScope.defer(() => {\n      if (actorRef._processingStatus === ProcessingStatus.Stopped) {\n        return;\n      }\n      actorRef.start();\n    });\n    return actorRef;\n  };\n}\n\nfunction resolveAssign(actorScope, snapshot, actionArgs, actionParams, {\n  assignment\n}) {\n  if (!snapshot.context) {\n    throw new Error('Cannot assign to undefined `context`. Ensure that `context` is defined in the machine config.');\n  }\n  const spawnedChildren = {};\n  const assignArgs = {\n    context: snapshot.context,\n    event: actionArgs.event,\n    spawn: createSpawner(actorScope, snapshot, actionArgs.event, spawnedChildren),\n    self: actorScope.self,\n    system: actorScope.system\n  };\n  let partialUpdate = {};\n  if (typeof assignment === 'function') {\n    partialUpdate = assignment(assignArgs, actionParams);\n  } else {\n    for (const key of Object.keys(assignment)) {\n      const propAssignment = assignment[key];\n      partialUpdate[key] = typeof propAssignment === 'function' ? propAssignment(assignArgs, actionParams) : propAssignment;\n    }\n  }\n  const updatedContext = Object.assign({}, snapshot.context, partialUpdate);\n  return [cloneMachineSnapshot(snapshot, {\n    context: updatedContext,\n    children: Object.keys(spawnedChildren).length ? {\n      ...snapshot.children,\n      ...spawnedChildren\n    } : snapshot.children\n  })];\n}\n/**\n * Updates the current context of the machine.\n *\n * @example\n *\n * ```ts\n * import { createMachine, assign } from 'xstate';\n *\n * const countMachine = createMachine({\n *   context: {\n *     count: 0,\n *     message: ''\n *   },\n *   on: {\n *     inc: {\n *       actions: assign({\n *         count: ({ context }) => context.count + 1\n *       })\n *     },\n *     updateMessage: {\n *       actions: assign(({ context, event }) => {\n *         return {\n *           message: event.message.trim()\n *         };\n *       })\n *     }\n *   }\n * });\n * ```\n *\n * @param assignment An object that represents the partial context to update, or\n *   a function that returns an object that represents the partial context to\n *   update.\n */\nfunction assign(assignment) {\n  if (executingCustomAction) {\n    console.warn('Custom actions should not call `assign()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');\n  }\n  function assign(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  assign.type = 'xstate.assign';\n  assign.assignment = assignment;\n  assign.resolve = resolveAssign;\n  return assign;\n}\n\nfunction resolveEmit(_, snapshot, args, actionParams, {\n  event: eventOrExpr\n}) {\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(`Only event objects may be used with emit; use emit({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  return [snapshot, {\n    event: resolvedEvent\n  }];\n}\nfunction executeEmit(actorScope, {\n  event\n}) {\n  actorScope.defer(() => actorScope.emit(event));\n}\n/**\n * Emits an event to event handlers registered on the actor via `actor.on(event,\n * handler)`.\n *\n * @example\n *\n * ```ts\n * import { emit } from 'xstate';\n *\n * const machine = createMachine({\n *   // ...\n *   on: {\n *     something: {\n *       actions: emit({\n *         type: 'emitted',\n *         some: 'data'\n *       })\n *     }\n *   }\n *   // ...\n * });\n *\n * const actor = createActor(machine).start();\n *\n * actor.on('emitted', (event) => {\n *   console.log(event);\n * });\n *\n * actor.send({ type: 'something' });\n * // logs:\n * // {\n * //   type: 'emitted',\n * //   some: 'data'\n * // }\n * ```\n */\nfunction emit(/** The event to emit, or an expression that returns an event to emit. */\neventOrExpr) {\n  if (executingCustomAction) {\n    console.warn('Custom actions should not call `emit()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');\n  }\n  function emit(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  emit.type = 'xstate.emit';\n  emit.event = eventOrExpr;\n  emit.resolve = resolveEmit;\n  emit.execute = executeEmit;\n  return emit;\n}\n\n/**\n * @remarks\n * `T | unknown` reduces to `unknown` and that can be problematic when it comes\n * to contextual typing. It especially is a problem when the union has a\n * function member, like here:\n *\n * ```ts\n * declare function test(\n *   cbOrVal: ((arg: number) => unknown) | unknown\n * ): void;\n * test((arg) => {}); // oops, implicit any\n * ```\n *\n * This type can be used to avoid this problem. This union represents the same\n * value space as `unknown`.\n */\n\n// https://github.com/microsoft/TypeScript/issues/23182#issuecomment-379091887\n\n// @TODO: Replace with native `NoInfer` when TS issue gets fixed:\n// https://github.com/microsoft/TypeScript/pull/57673\n\n/** @deprecated Use the built-in `NoInfer` type instead */\n\n/** The full definition of an event, with a string `type`. */\n\n/**\n * The string or object representing the state value relative to the parent\n * state node.\n *\n * @remarks\n * - For a child atomic state node, this is a string, e.g., `\"pending\"`.\n * - For complex state nodes, this is an object, e.g., `{ success:\n *   \"someChildState\" }`.\n */\n\n// TODO: remove once TS fixes this type-widening issue\n\n/** @deprecated Use `AnyMachineSnapshot` instead */\n\n// TODO: possibly refactor this somehow, use even a simpler type, and maybe even make `machine.options` private or something\n/** @ignore */\n\nlet SpecialTargets = /*#__PURE__*/function (SpecialTargets) {\n  SpecialTargets[\"Parent\"] = \"#_parent\";\n  SpecialTargets[\"Internal\"] = \"#_internal\";\n  return SpecialTargets;\n}({});\n\n/** @deprecated Use `AnyActor` instead. */\n\n// Based on RxJS types\n\n// TODO: in v6, this should only accept AnyActorLogic, like ActorRefFromLogic\n\n/** @deprecated Use `Actor<T>` instead. */\n\n/**\n * Represents logic which can be used by an actor.\n *\n * @template TSnapshot - The type of the snapshot.\n * @template TEvent - The type of the event object.\n * @template TInput - The type of the input.\n * @template TSystem - The type of the actor system.\n */\n\n/** @deprecated */\n\nfunction resolveSendTo(actorScope, snapshot, args, actionParams, {\n  to,\n  event: eventOrExpr,\n  id,\n  delay\n}, extra) {\n  const delaysMap = snapshot.machine.implementations.delays;\n  if (typeof eventOrExpr === 'string') {\n    throw new Error(`Only event objects may be used with sendTo; use sendTo({ type: \"${eventOrExpr}\" }) instead`);\n  }\n  const resolvedEvent = typeof eventOrExpr === 'function' ? eventOrExpr(args, actionParams) : eventOrExpr;\n  let resolvedDelay;\n  if (typeof delay === 'string') {\n    const configDelay = delaysMap && delaysMap[delay];\n    resolvedDelay = typeof configDelay === 'function' ? configDelay(args, actionParams) : configDelay;\n  } else {\n    resolvedDelay = typeof delay === 'function' ? delay(args, actionParams) : delay;\n  }\n  const resolvedTarget = typeof to === 'function' ? to(args, actionParams) : to;\n  let targetActorRef;\n  if (typeof resolvedTarget === 'string') {\n    if (resolvedTarget === SpecialTargets.Parent) {\n      targetActorRef = actorScope.self._parent;\n    } else if (resolvedTarget === SpecialTargets.Internal) {\n      targetActorRef = actorScope.self;\n    } else if (resolvedTarget.startsWith('#_')) {\n      // SCXML compatibility: https://www.w3.org/TR/scxml/#SCXMLEventProcessor\n      // #_invokeid. If the target is the special term '#_invokeid', where invokeid is the invokeid of an SCXML session that the sending session has created by <invoke>, the Processor must add the event to the external queue of that session.\n      targetActorRef = snapshot.children[resolvedTarget.slice(2)];\n    } else {\n      targetActorRef = extra.deferredActorIds?.includes(resolvedTarget) ? resolvedTarget : snapshot.children[resolvedTarget];\n    }\n    if (!targetActorRef) {\n      throw new Error(`Unable to send event to actor '${resolvedTarget}' from machine '${snapshot.machine.id}'.`);\n    }\n  } else {\n    targetActorRef = resolvedTarget || actorScope.self;\n  }\n  return [snapshot, {\n    to: targetActorRef,\n    event: resolvedEvent,\n    id,\n    delay: resolvedDelay\n  }];\n}\nfunction retryResolveSendTo(_, snapshot, params) {\n  if (typeof params.to === 'string') {\n    params.to = snapshot.children[params.to];\n  }\n}\nfunction executeSendTo(actorScope, params) {\n  // this forms an outgoing events queue\n  // thanks to that the recipient actors are able to read the *updated* snapshot value of the sender\n  actorScope.defer(() => {\n    const {\n      to,\n      event,\n      delay,\n      id\n    } = params;\n    if (typeof delay === 'number') {\n      actorScope.system.scheduler.schedule(actorScope.self, to, event, delay, id);\n      return;\n    }\n    actorScope.system._relay(actorScope.self,\n    // at this point, in a deferred task, it should already be mutated by retryResolveSendTo\n    // if it initially started as a string\n    to, event.type === XSTATE_ERROR ? createErrorActorEvent(actorScope.self.id, event.data) : event);\n  });\n}\n/**\n * Sends an event to an actor.\n *\n * @param actor The `ActorRef` to send the event to.\n * @param event The event to send, or an expression that evaluates to the event\n *   to send\n * @param options Send action options\n *\n *   - `id` - The unique send event identifier (used with `cancel()`).\n *   - `delay` - The number of milliseconds to delay the sending of the event.\n */\nfunction sendTo(to, eventOrExpr, options) {\n  if (executingCustomAction) {\n    console.warn('Custom actions should not call `raise()` directly, as it is not imperative. See https://stately.ai/docs/actions#built-in-actions for more details.');\n  }\n  function sendTo(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  sendTo.type = 'xsnapshot.sendTo';\n  sendTo.to = to;\n  sendTo.event = eventOrExpr;\n  sendTo.id = options?.id;\n  sendTo.delay = options?.delay;\n  sendTo.resolve = resolveSendTo;\n  sendTo.retryResolve = retryResolveSendTo;\n  sendTo.execute = executeSendTo;\n  return sendTo;\n}\n\n/**\n * Sends an event to this machine's parent.\n *\n * @param event The event to send to the parent machine.\n * @param options Options to pass into the send event.\n */\nfunction sendParent(event, options) {\n  return sendTo(SpecialTargets.Parent, event, options);\n}\n/**\n * Forwards (sends) an event to the `target` actor.\n *\n * @param target The target actor to forward the event to.\n * @param options Options to pass into the send action creator.\n */\nfunction forwardTo(target, options) {\n  if ((!target || typeof target === 'function')) {\n    const originalTarget = target;\n    target = (...args) => {\n      const resolvedTarget = typeof originalTarget === 'function' ? originalTarget(...args) : originalTarget;\n      if (!resolvedTarget) {\n        throw new Error(`Attempted to forward event to undefined actor. This risks an infinite loop in the sender.`);\n      }\n      return resolvedTarget;\n    };\n  }\n  return sendTo(target, ({\n    event\n  }) => event, options);\n}\n\nfunction resolveEnqueueActions(actorScope, snapshot, args, actionParams, {\n  collect\n}) {\n  const actions = [];\n  const enqueue = function enqueue(action) {\n    actions.push(action);\n  };\n  enqueue.assign = (...args) => {\n    actions.push(assign(...args));\n  };\n  enqueue.cancel = (...args) => {\n    actions.push(cancel(...args));\n  };\n  enqueue.raise = (...args) => {\n    // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)\n    // then it fails to typecheck that because `...args` use `string` in place of `TDelay`\n    actions.push(raise(...args));\n  };\n  enqueue.sendTo = (...args) => {\n    // for some reason it fails to infer `TDelay` from `...args` here and picks its default (`never`)\n    // then it fails to typecheck that because `...args` use `string` in place of `TDelay\n    actions.push(sendTo(...args));\n  };\n  enqueue.sendParent = (...args) => {\n    actions.push(sendParent(...args));\n  };\n  enqueue.spawnChild = (...args) => {\n    actions.push(spawnChild(...args));\n  };\n  enqueue.stopChild = (...args) => {\n    actions.push(stopChild(...args));\n  };\n  enqueue.emit = (...args) => {\n    actions.push(emit(...args));\n  };\n  collect({\n    context: args.context,\n    event: args.event,\n    enqueue,\n    check: guard => evaluateGuard(guard, snapshot.context, args.event, snapshot),\n    self: actorScope.self,\n    system: actorScope.system\n  }, actionParams);\n  return [snapshot, undefined, actions];\n}\n/**\n * Creates an action object that will execute actions that are queued by the\n * `enqueue(action)` function.\n *\n * @example\n *\n * ```ts\n * import { createMachine, enqueueActions } from 'xstate';\n *\n * const machine = createMachine({\n *   entry: enqueueActions(({ enqueue, check }) => {\n *     enqueue.assign({ count: 0 });\n *\n *     if (check('someGuard')) {\n *       enqueue.assign({ count: 1 });\n *     }\n *\n *     enqueue('someAction');\n *   })\n * });\n * ```\n */\nfunction enqueueActions(collect) {\n  function enqueueActions(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  enqueueActions.type = 'xstate.enqueueActions';\n  enqueueActions.collect = collect;\n  enqueueActions.resolve = resolveEnqueueActions;\n  return enqueueActions;\n}\n\nfunction resolveLog(_, snapshot, actionArgs, actionParams, {\n  value,\n  label\n}) {\n  return [snapshot, {\n    value: typeof value === 'function' ? value(actionArgs, actionParams) : value,\n    label\n  }];\n}\nfunction executeLog({\n  logger\n}, {\n  value,\n  label\n}) {\n  if (label) {\n    logger(label, value);\n  } else {\n    logger(value);\n  }\n}\n/**\n * @param expr The expression function to evaluate which will be logged. Takes\n *   in 2 arguments:\n *\n *   - `ctx` - the current state context\n *   - `event` - the event that caused this action to be executed.\n *\n * @param label The label to give to the logged expression.\n */\nfunction log(value = ({\n  context,\n  event\n}) => ({\n  context,\n  event\n}), label) {\n  function log(args, params) {\n    {\n      throw new Error(`This isn't supposed to be called`);\n    }\n  }\n  log.type = 'xstate.log';\n  log.value = value;\n  log.label = label;\n  log.resolve = resolveLog;\n  log.execute = executeLog;\n  return log;\n}\n\nexport { SpecialTargets as S, assign as a, enqueueActions as b, sendTo as c, emit as e, forwardTo as f, log as l, sendParent as s };\n", "export { createEmptyActor, fromCallback, fromEventObservable, fromObservable, fromPromise, fromTransition } from '../actors/dist/xstate-actors.development.esm.js';\nimport { t as toArray, S as STATE_DELIMITER, m as mapValues, f as formatTransitions, a as toTransitionConfigArray, b as formatTransition, N as NULL_EVENT, e as evaluateGuard, c as createInvokeId, g as getDelayedTransitions, d as formatInitialTransition, h as getCandidates, r as resolveStateValue, i as getAllStateNodes, j as getStateNodes, k as createMachineSnapshot, l as isInFinalState, n as macrostep, o as transitionNode, p as resolveActionsAndContext, q as createInitEvent, s as microstep, u as getInitialStateNodes, v as toStatePath, w as isStateId, x as getStateNodeByPath, y as getPersistedSnapshot, z as resolveReferencedActor, A as createActor, $ as $$ACTOR_TYPE } from './raise-5ea71f04.development.esm.js';\nexport { B as Actor, I as __unsafe_getAllOwnEventDescriptors, D as and, M as cancel, A as createActor, j as getStateNodes, C as interpret, H as isMachineSnapshot, J as matchesState, E as not, F as or, K as pathToStateValue, O as raise, P as spawnChild, G as stateIn, Q as stop, R as stopChild, L as toObserver } from './raise-5ea71f04.development.esm.js';\nimport { a as assign } from './log-38475d87.development.esm.js';\nexport { S as SpecialTargets, a as assign, e as emit, b as enqueueActions, f as forwardTo, l as log, s as sendParent, c as sendTo } from './log-38475d87.development.esm.js';\nimport '../dev/dist/xstate-dev.development.esm.js';\n\n/**\n * Asserts that the given event object is of the specified type or types. Throws\n * an error if the event object is not of the specified types.\n *\n * @example\n *\n * ```ts\n * // ...\n * entry: ({ event }) => {\n *   assertEvent(event, 'doNothing');\n *   // event is { type: 'doNothing' }\n * },\n * // ...\n * exit: ({ event }) => {\n *   assertEvent(event, 'greet');\n *   // event is { type: 'greet'; message: string }\n *\n *   assertEvent(event, ['greet', 'notify']);\n *   // event is { type: 'greet'; message: string }\n *   // or { type: 'notify'; message: string; level: 'info' | 'error' }\n * },\n * ```\n */\nfunction assertEvent(event, type) {\n  const types = toArray(type);\n  if (!types.includes(event.type)) {\n    const typesText = types.length === 1 ? `type \"${types[0]}\"` : `one of types \"${types.join('\", \"')}\"`;\n    throw new Error(`Expected event ${JSON.stringify(event)} to have ${typesText}`);\n  }\n}\n\nconst cache = new WeakMap();\nfunction memo(object, key, fn) {\n  let memoizedData = cache.get(object);\n  if (!memoizedData) {\n    memoizedData = {\n      [key]: fn()\n    };\n    cache.set(object, memoizedData);\n  } else if (!(key in memoizedData)) {\n    memoizedData[key] = fn();\n  }\n  return memoizedData[key];\n}\n\nconst EMPTY_OBJECT = {};\nconst toSerializableAction = action => {\n  if (typeof action === 'string') {\n    return {\n      type: action\n    };\n  }\n  if (typeof action === 'function') {\n    if ('resolve' in action) {\n      return {\n        type: action.type\n      };\n    }\n    return {\n      type: action.name\n    };\n  }\n  return action;\n};\nclass StateNode {\n  constructor(/** The raw config used to create the machine. */\n  config, options) {\n    this.config = config;\n    /**\n     * The relative key of the state node, which represents its location in the\n     * overall state value.\n     */\n    this.key = void 0;\n    /** The unique ID of the state node. */\n    this.id = void 0;\n    /**\n     * The type of this state node:\n     *\n     * - `'atomic'` - no child state nodes\n     * - `'compound'` - nested child state nodes (XOR)\n     * - `'parallel'` - orthogonal nested child state nodes (AND)\n     * - `'history'` - history state node\n     * - `'final'` - final state node\n     */\n    this.type = void 0;\n    /** The string path from the root machine node to this node. */\n    this.path = void 0;\n    /** The child state nodes. */\n    this.states = void 0;\n    /**\n     * The type of history on this state node. Can be:\n     *\n     * - `'shallow'` - recalls only top-level historical state value\n     * - `'deep'` - recalls historical state value at all levels\n     */\n    this.history = void 0;\n    /** The action(s) to be executed upon entering the state node. */\n    this.entry = void 0;\n    /** The action(s) to be executed upon exiting the state node. */\n    this.exit = void 0;\n    /** The parent state node. */\n    this.parent = void 0;\n    /** The root machine node. */\n    this.machine = void 0;\n    /**\n     * The meta data associated with this state node, which will be returned in\n     * State instances.\n     */\n    this.meta = void 0;\n    /**\n     * The output data sent with the \"xstate.done.state._id_\" event if this is a\n     * final state node.\n     */\n    this.output = void 0;\n    /**\n     * The order this state node appears. Corresponds to the implicit document\n     * order.\n     */\n    this.order = -1;\n    this.description = void 0;\n    this.tags = [];\n    this.transitions = void 0;\n    this.always = void 0;\n    this.parent = options._parent;\n    this.key = options._key;\n    this.machine = options._machine;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.id = this.config.id || [this.machine.id, ...this.path].join(STATE_DELIMITER);\n    this.type = this.config.type || (this.config.states && Object.keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n    this.description = this.config.description;\n    this.order = this.machine.idMap.size;\n    this.machine.idMap.set(this.id, this);\n    this.states = this.config.states ? mapValues(this.config.states, (stateConfig, key) => {\n      const stateNode = new StateNode(stateConfig, {\n        _parent: this,\n        _key: key,\n        _machine: this.machine\n      });\n      return stateNode;\n    }) : EMPTY_OBJECT;\n    if (this.type === 'compound' && !this.config.initial) {\n      throw new Error(`No initial state specified for compound state node \"#${this.id}\". Try adding { initial: \"${Object.keys(this.states)[0]}\" } to the state config.`);\n    }\n\n    // History config\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this.entry = toArray(this.config.entry).slice();\n    this.exit = toArray(this.config.exit).slice();\n    this.meta = this.config.meta;\n    this.output = this.type === 'final' || !this.parent ? this.config.output : undefined;\n    this.tags = toArray(config.tags).slice();\n  }\n\n  /** @internal */\n  _initialize() {\n    this.transitions = formatTransitions(this);\n    if (this.config.always) {\n      this.always = toTransitionConfigArray(this.config.always).map(t => formatTransition(this, NULL_EVENT, t));\n    }\n    Object.keys(this.states).forEach(key => {\n      this.states[key]._initialize();\n    });\n  }\n\n  /** The well-structured state node definition. */\n  get definition() {\n    return {\n      id: this.id,\n      key: this.key,\n      version: this.machine.version,\n      type: this.type,\n      initial: this.initial ? {\n        target: this.initial.target,\n        source: this,\n        actions: this.initial.actions.map(toSerializableAction),\n        eventType: null,\n        reenter: false,\n        toJSON: () => ({\n          target: this.initial.target.map(t => `#${t.id}`),\n          source: `#${this.id}`,\n          actions: this.initial.actions.map(toSerializableAction),\n          eventType: null\n        })\n      } : undefined,\n      history: this.history,\n      states: mapValues(this.states, state => {\n        return state.definition;\n      }),\n      on: this.on,\n      transitions: [...this.transitions.values()].flat().map(t => ({\n        ...t,\n        actions: t.actions.map(toSerializableAction)\n      })),\n      entry: this.entry.map(toSerializableAction),\n      exit: this.exit.map(toSerializableAction),\n      meta: this.meta,\n      order: this.order || -1,\n      output: this.output,\n      invoke: this.invoke,\n      description: this.description,\n      tags: this.tags\n    };\n  }\n\n  /** @internal */\n  toJSON() {\n    return this.definition;\n  }\n\n  /** The logic invoked as actors by this state node. */\n  get invoke() {\n    return memo(this, 'invoke', () => toArray(this.config.invoke).map((invokeConfig, i) => {\n      const {\n        src,\n        systemId\n      } = invokeConfig;\n      const resolvedId = invokeConfig.id ?? createInvokeId(this.id, i);\n      const resolvedSrc = typeof src === 'string' ? src : `xstate.invoke.${createInvokeId(this.id, i)}`;\n      return {\n        ...invokeConfig,\n        src: resolvedSrc,\n        id: resolvedId,\n        systemId: systemId,\n        toJSON() {\n          const {\n            onDone,\n            onError,\n            ...invokeDefValues\n          } = invokeConfig;\n          return {\n            ...invokeDefValues,\n            type: 'xstate.invoke',\n            src: resolvedSrc,\n            id: resolvedId\n          };\n        }\n      };\n    }));\n  }\n\n  /** The mapping of events to transitions. */\n  get on() {\n    return memo(this, 'on', () => {\n      const transitions = this.transitions;\n      return [...transitions].flatMap(([descriptor, t]) => t.map(t => [descriptor, t])).reduce((map, [descriptor, transition]) => {\n        map[descriptor] = map[descriptor] || [];\n        map[descriptor].push(transition);\n        return map;\n      }, {});\n    });\n  }\n  get after() {\n    return memo(this, 'delayedTransitions', () => getDelayedTransitions(this));\n  }\n  get initial() {\n    return memo(this, 'initial', () => formatInitialTransition(this, this.config.initial));\n  }\n\n  /** @internal */\n  next(snapshot, event) {\n    const eventType = event.type;\n    const actions = [];\n    let selectedTransition;\n    const candidates = memo(this, `candidates-${eventType}`, () => getCandidates(this, eventType));\n    for (const candidate of candidates) {\n      const {\n        guard\n      } = candidate;\n      const resolvedContext = snapshot.context;\n      let guardPassed = false;\n      try {\n        guardPassed = !guard || evaluateGuard(guard, resolvedContext, event, snapshot);\n      } catch (err) {\n        const guardType = typeof guard === 'string' ? guard : typeof guard === 'object' ? guard.type : undefined;\n        throw new Error(`Unable to evaluate guard ${guardType ? `'${guardType}' ` : ''}in transition for event '${eventType}' in state node '${this.id}':\\n${err.message}`);\n      }\n      if (guardPassed) {\n        actions.push(...candidate.actions);\n        selectedTransition = candidate;\n        break;\n      }\n    }\n    return selectedTransition ? [selectedTransition] : undefined;\n  }\n\n  /** All the event types accepted by this state node and its descendants. */\n  get events() {\n    return memo(this, 'events', () => {\n      const {\n        states\n      } = this;\n      const events = new Set(this.ownEvents);\n      if (states) {\n        for (const stateId of Object.keys(states)) {\n          const state = states[stateId];\n          if (state.states) {\n            for (const event of state.events) {\n              events.add(`${event}`);\n            }\n          }\n        }\n      }\n      return Array.from(events);\n    });\n  }\n\n  /**\n   * All the events that have transitions directly from this state node.\n   *\n   * Excludes any inert events.\n   */\n  get ownEvents() {\n    const events = new Set([...this.transitions.keys()].filter(descriptor => {\n      return this.transitions.get(descriptor).some(transition => !(!transition.target && !transition.actions.length && !transition.reenter));\n    }));\n    return Array.from(events);\n  }\n}\n\nconst STATE_IDENTIFIER = '#';\nclass StateMachine {\n  constructor(/** The raw config used to create the machine. */\n  config, implementations) {\n    this.config = config;\n    /** The machine's own version. */\n    this.version = void 0;\n    this.schemas = void 0;\n    this.implementations = void 0;\n    /** @internal */\n    this.__xstatenode = true;\n    /** @internal */\n    this.idMap = new Map();\n    this.root = void 0;\n    this.id = void 0;\n    this.states = void 0;\n    this.events = void 0;\n    this.id = config.id || '(machine)';\n    this.implementations = {\n      actors: implementations?.actors ?? {},\n      actions: implementations?.actions ?? {},\n      delays: implementations?.delays ?? {},\n      guards: implementations?.guards ?? {}\n    };\n    this.version = this.config.version;\n    this.schemas = this.config.schemas;\n    this.transition = this.transition.bind(this);\n    this.getInitialSnapshot = this.getInitialSnapshot.bind(this);\n    this.getPersistedSnapshot = this.getPersistedSnapshot.bind(this);\n    this.restoreSnapshot = this.restoreSnapshot.bind(this);\n    this.start = this.start.bind(this);\n    this.root = new StateNode(config, {\n      _key: this.id,\n      _machine: this\n    });\n    this.root._initialize();\n    this.states = this.root.states; // TODO: remove!\n    this.events = this.root.events;\n    if (!('output' in this.root) && Object.values(this.states).some(state => state.type === 'final' && 'output' in state)) {\n      console.warn('Missing `machine.output` declaration (top-level final state with output detected)');\n    }\n  }\n\n  /**\n   * Clones this state machine with the provided implementations and merges the\n   * `context` (if provided).\n   *\n   * @param implementations Options (`actions`, `guards`, `actors`, `delays`,\n   *   `context`) to recursively merge with the existing options.\n   * @returns A new `StateMachine` instance with the provided implementations.\n   */\n  provide(implementations) {\n    const {\n      actions,\n      guards,\n      actors,\n      delays\n    } = this.implementations;\n    return new StateMachine(this.config, {\n      actions: {\n        ...actions,\n        ...implementations.actions\n      },\n      guards: {\n        ...guards,\n        ...implementations.guards\n      },\n      actors: {\n        ...actors,\n        ...implementations.actors\n      },\n      delays: {\n        ...delays,\n        ...implementations.delays\n      }\n    });\n  }\n  resolveState(config) {\n    const resolvedStateValue = resolveStateValue(this.root, config.value);\n    const nodeSet = getAllStateNodes(getStateNodes(this.root, resolvedStateValue));\n    return createMachineSnapshot({\n      _nodes: [...nodeSet],\n      context: config.context || {},\n      children: {},\n      status: isInFinalState(nodeSet, this.root) ? 'done' : config.status || 'active',\n      output: config.output,\n      error: config.error,\n      historyValue: config.historyValue\n    }, this);\n  }\n\n  /**\n   * Determines the next snapshot given the current `snapshot` and received\n   * `event`. Calculates a full macrostep from all microsteps.\n   *\n   * @param snapshot The current snapshot\n   * @param event The received event\n   */\n  transition(snapshot, event, actorScope) {\n    return macrostep(snapshot, event, actorScope).snapshot;\n  }\n\n  /**\n   * Determines the next state given the current `state` and `event`. Calculates\n   * a microstep.\n   *\n   * @param state The current state\n   * @param event The received event\n   */\n  microstep(snapshot, event, actorScope) {\n    return macrostep(snapshot, event, actorScope).microstates;\n  }\n  getTransitionData(snapshot, event) {\n    return transitionNode(this.root, snapshot.value, snapshot, event) || [];\n  }\n\n  /**\n   * The initial state _before_ evaluating any microsteps. This \"pre-initial\"\n   * state is provided to initial actions executed in the initial state.\n   */\n  getPreInitialState(actorScope, initEvent, internalQueue) {\n    const {\n      context\n    } = this.config;\n    const preInitial = createMachineSnapshot({\n      context: typeof context !== 'function' && context ? context : {},\n      _nodes: [this.root],\n      children: {},\n      status: 'active'\n    }, this);\n    if (typeof context === 'function') {\n      const assignment = ({\n        spawn,\n        event,\n        self\n      }) => context({\n        spawn,\n        input: event.input,\n        self\n      });\n      return resolveActionsAndContext(preInitial, initEvent, actorScope, [assign(assignment)], internalQueue);\n    }\n    return preInitial;\n  }\n\n  /**\n   * Returns the initial `State` instance, with reference to `self` as an\n   * `ActorRef`.\n   */\n  getInitialSnapshot(actorScope, input) {\n    const initEvent = createInitEvent(input); // TODO: fix;\n    const internalQueue = [];\n    const preInitialState = this.getPreInitialState(actorScope, initEvent, internalQueue);\n    const nextState = microstep([{\n      target: [...getInitialStateNodes(this.root)],\n      source: this.root,\n      reenter: true,\n      actions: [],\n      eventType: null,\n      toJSON: null // TODO: fix\n    }], preInitialState, actorScope, initEvent, true, internalQueue);\n    const {\n      snapshot: macroState\n    } = macrostep(nextState, initEvent, actorScope, internalQueue);\n    return macroState;\n  }\n  start(snapshot) {\n    Object.values(snapshot.children).forEach(child => {\n      if (child.getSnapshot().status === 'active') {\n        child.start();\n      }\n    });\n  }\n  getStateNodeById(stateId) {\n    const fullPath = toStatePath(stateId);\n    const relativePath = fullPath.slice(1);\n    const resolvedStateId = isStateId(fullPath[0]) ? fullPath[0].slice(STATE_IDENTIFIER.length) : fullPath[0];\n    const stateNode = this.idMap.get(resolvedStateId);\n    if (!stateNode) {\n      throw new Error(`Child state node '#${resolvedStateId}' does not exist on machine '${this.id}'`);\n    }\n    return getStateNodeByPath(stateNode, relativePath);\n  }\n  get definition() {\n    return this.root.definition;\n  }\n  toJSON() {\n    return this.definition;\n  }\n  getPersistedSnapshot(snapshot, options) {\n    return getPersistedSnapshot(snapshot, options);\n  }\n  restoreSnapshot(snapshot, _actorScope) {\n    const children = {};\n    const snapshotChildren = snapshot.children;\n    Object.keys(snapshotChildren).forEach(actorId => {\n      const actorData = snapshotChildren[actorId];\n      const childState = actorData.snapshot;\n      const src = actorData.src;\n      const logic = typeof src === 'string' ? resolveReferencedActor(this, src) : src;\n      if (!logic) {\n        return;\n      }\n      const actorRef = createActor(logic, {\n        id: actorId,\n        parent: _actorScope.self,\n        syncSnapshot: actorData.syncSnapshot,\n        snapshot: childState,\n        src,\n        systemId: actorData.systemId\n      });\n      children[actorId] = actorRef;\n    });\n    const restoredSnapshot = createMachineSnapshot({\n      ...snapshot,\n      children,\n      _nodes: Array.from(getAllStateNodes(getStateNodes(this.root, snapshot.value)))\n    }, this);\n    let seen = new Set();\n    function reviveContext(contextPart, children) {\n      if (seen.has(contextPart)) {\n        return;\n      }\n      seen.add(contextPart);\n      for (let key in contextPart) {\n        const value = contextPart[key];\n        if (value && typeof value === 'object') {\n          if ('xstate$$type' in value && value.xstate$$type === $$ACTOR_TYPE) {\n            contextPart[key] = children[value.id];\n            continue;\n          }\n          reviveContext(value, children);\n        }\n      }\n    }\n    reviveContext(restoredSnapshot.context, children);\n    return restoredSnapshot;\n  }\n}\n\n// this is not 100% accurate since we can't make parallel regions required in the result\n// `TTestValue` doesn't encode this information anyhow for us to be able to do that\n// this is fine for most practical use cases anyway though\n\n/**\n * Creates a state machine (statechart) with the given configuration.\n *\n * The state machine represents the pure logic of a state machine actor.\n *\n * @example\n *\n * ```ts\n * import { createMachine } from 'xstate';\n *\n * const lightMachine = createMachine({\n *   id: 'light',\n *   initial: 'green',\n *   states: {\n *     green: {\n *       on: {\n *         TIMER: { target: 'yellow' }\n *       }\n *     },\n *     yellow: {\n *       on: {\n *         TIMER: { target: 'red' }\n *       }\n *     },\n *     red: {\n *       on: {\n *         TIMER: { target: 'green' }\n *       }\n *     }\n *   }\n * });\n *\n * const lightActor = createActor(lightMachine);\n * lightActor.start();\n *\n * lightActor.send({ type: 'TIMER' });\n * ```\n *\n * @param config The state machine configuration.\n * @param options DEPRECATED: use `setup({ ... })` or `machine.provide({ ... })`\n *   to provide machine implementations instead.\n */\nfunction createMachine(config, implementations) {\n  return new StateMachine(config, implementations);\n}\n\n/** @internal */\nfunction createInertActorScope(actorLogic) {\n  const self = createActor(actorLogic);\n  const inertActorScope = {\n    self,\n    defer: () => {},\n    id: '',\n    logger: () => {},\n    sessionId: '',\n    stopChild: () => {},\n    system: self.system,\n    emit: () => {}\n  };\n  return inertActorScope;\n}\nfunction getInitialSnapshot(actorLogic, ...[input]) {\n  const actorScope = createInertActorScope(actorLogic);\n  return actorLogic.getInitialSnapshot(actorScope, input);\n}\n\n/**\n * Determines the next snapshot for the given `actorLogic` based on the given\n * `snapshot` and `event`.\n *\n * If the `snapshot` is `undefined`, the initial snapshot of the `actorLogic` is\n * used.\n *\n * @example\n *\n * ```ts\n * import { getNextSnapshot } from 'xstate';\n * import { trafficLightMachine } from './trafficLightMachine.ts';\n *\n * const nextSnapshot = getNextSnapshot(\n *   trafficLightMachine, // actor logic\n *   undefined, // snapshot (or initial state if undefined)\n *   { type: 'TIMER' }\n * ); // event object\n *\n * console.log(nextSnapshot.value);\n * // => 'yellow'\n *\n * const nextSnapshot2 = getNextSnapshot(\n *   trafficLightMachine, // actor logic\n *   nextSnapshot, // snapshot\n *   { type: 'TIMER' }\n * ); // event object\n *\n * console.log(nextSnapshot2.value);\n * // =>'red'\n * ```\n */\nfunction getNextSnapshot(actorLogic, snapshot, event) {\n  const inertActorScope = createInertActorScope(actorLogic);\n  inertActorScope.self._snapshot = snapshot;\n  return actorLogic.transition(snapshot, event, inertActorScope);\n}\n\n// at the moment we allow extra actors - ones that are not specified by `children`\n// this could be reconsidered in the future\n\nfunction setup({\n  schemas,\n  actors,\n  actions,\n  guards,\n  delays\n}) {\n  return {\n    createMachine: config => createMachine({\n      ...config,\n      schemas\n    }, {\n      actors,\n      actions,\n      guards,\n      delays\n    })\n  };\n}\n\nclass SimulatedClock {\n  constructor() {\n    this.timeouts = new Map();\n    this._now = 0;\n    this._id = 0;\n    this._flushing = false;\n    this._flushingInvalidated = false;\n  }\n  now() {\n    return this._now;\n  }\n  getId() {\n    return this._id++;\n  }\n  setTimeout(fn, timeout) {\n    this._flushingInvalidated = this._flushing;\n    const id = this.getId();\n    this.timeouts.set(id, {\n      start: this.now(),\n      timeout,\n      fn\n    });\n    return id;\n  }\n  clearTimeout(id) {\n    this._flushingInvalidated = this._flushing;\n    this.timeouts.delete(id);\n  }\n  set(time) {\n    if (this._now > time) {\n      throw new Error('Unable to travel back in time');\n    }\n    this._now = time;\n    this.flushTimeouts();\n  }\n  flushTimeouts() {\n    if (this._flushing) {\n      this._flushingInvalidated = true;\n      return;\n    }\n    this._flushing = true;\n    const sorted = [...this.timeouts].sort(([_idA, timeoutA], [_idB, timeoutB]) => {\n      const endA = timeoutA.start + timeoutA.timeout;\n      const endB = timeoutB.start + timeoutB.timeout;\n      return endB > endA ? -1 : 1;\n    });\n    for (const [id, timeout] of sorted) {\n      if (this._flushingInvalidated) {\n        this._flushingInvalidated = false;\n        this._flushing = false;\n        this.flushTimeouts();\n        return;\n      }\n      if (this.now() - timeout.start >= timeout.timeout) {\n        this.timeouts.delete(id);\n        timeout.fn.call(null);\n      }\n    }\n    this._flushing = false;\n  }\n  increment(ms) {\n    this._now += ms;\n    this.flushTimeouts();\n  }\n}\n\n/**\n * Returns a promise that resolves to the `output` of the actor when it is done.\n *\n * @example\n *\n * ```ts\n * const machine = createMachine({\n *   // ...\n *   output: {\n *     count: 42\n *   }\n * });\n *\n * const actor = createActor(machine);\n *\n * actor.start();\n *\n * const output = await toPromise(actor);\n *\n * console.log(output);\n * // logs { count: 42 }\n * ```\n */\nfunction toPromise(actor) {\n  return new Promise((resolve, reject) => {\n    actor.subscribe({\n      complete: () => {\n        resolve(actor.getSnapshot().output);\n      },\n      error: reject\n    });\n  });\n}\n\nconst defaultWaitForOptions = {\n  timeout: Infinity // much more than 10 seconds\n};\n\n/**\n * Subscribes to an actor ref and waits for its emitted value to satisfy a\n * predicate, and then resolves with that value. Will throw if the desired state\n * is not reached after an optional timeout. (defaults to Infinity).\n *\n * @example\n *\n * ```js\n * const state = await waitFor(someService, (state) => {\n *   return state.hasTag('loaded');\n * });\n *\n * state.hasTag('loaded'); // true\n * ```\n *\n * @param actorRef The actor ref to subscribe to\n * @param predicate Determines if a value matches the condition to wait for\n * @param options\n * @returns A promise that eventually resolves to the emitted value that matches\n *   the condition\n */\nfunction waitFor(actorRef, predicate, options) {\n  const resolvedOptions = {\n    ...defaultWaitForOptions,\n    ...options\n  };\n  return new Promise((res, rej) => {\n    const {\n      signal\n    } = resolvedOptions;\n    if (signal?.aborted) {\n      rej(signal.reason);\n      return;\n    }\n    let done = false;\n    if (resolvedOptions.timeout < 0) {\n      console.error('`timeout` passed to `waitFor` is negative and it will reject its internal promise immediately.');\n    }\n    const handle = resolvedOptions.timeout === Infinity ? undefined : setTimeout(() => {\n      dispose();\n      rej(new Error(`Timeout of ${resolvedOptions.timeout} ms exceeded`));\n    }, resolvedOptions.timeout);\n    const dispose = () => {\n      clearTimeout(handle);\n      done = true;\n      sub?.unsubscribe();\n      if (abortListener) {\n        signal.removeEventListener('abort', abortListener);\n      }\n    };\n    function checkEmitted(emitted) {\n      if (predicate(emitted)) {\n        dispose();\n        res(emitted);\n      }\n    }\n\n    /**\n     * If the `signal` option is provided, this will be the listener for its\n     * `abort` event\n     */\n    let abortListener;\n    let sub; // avoid TDZ when disposing synchronously\n\n    // See if the current snapshot already matches the predicate\n    checkEmitted(actorRef.getSnapshot());\n    if (done) {\n      return;\n    }\n\n    // only define the `abortListener` if the `signal` option is provided\n    if (signal) {\n      abortListener = () => {\n        dispose();\n        // XState does not \"own\" the signal, so we should reject with its reason (if any)\n        rej(signal.reason);\n      };\n      signal.addEventListener('abort', abortListener);\n    }\n    sub = actorRef.subscribe({\n      next: checkEmitted,\n      error: err => {\n        dispose();\n        rej(err);\n      },\n      complete: () => {\n        dispose();\n        rej(new Error(`Actor terminated without satisfying predicate`));\n      }\n    });\n    if (done) {\n      sub.unsubscribe();\n    }\n  });\n}\n\nexport { SimulatedClock, StateMachine, StateNode, assertEvent, createMachine, getInitialSnapshot, getNextSnapshot, setup, toPromise, waitFor };\n", "export const arraysAreEqual = (a, b) => a.length === b.length && a.every((element, index) => element === b[index]);\n", "import { arraysAreEqual } from \"./arraysAreEqual.js\";\nexport const headsAreSame = (a, b) => {\n    return arraysAreEqual(a, b);\n};\n", "/* c8 ignore start */\n/**\n * If `promise` is resolved before `t` ms elapse, the timeout is cleared and the result of the\n * promise is returned. If the timeout ends first, a `TimeoutError` is thrown.\n */\nexport const withTimeout = async (promise, t) => {\n    let timeoutId;\n    const timeoutPromise = new Promise((_, reject) => {\n        timeoutId = setTimeout(() => reject(new TimeoutError(`withTimeout: timed out after ${t}ms`)), t);\n    });\n    try {\n        return await Promise.race([promise, timeoutPromise]);\n    }\n    finally {\n        clearTimeout(timeoutId);\n    }\n};\nexport class TimeoutError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"TimeoutError\";\n    }\n}\n/* c8 ignore end */\n", "// TYPE GUARDS\nexport const isRepoMessage = (message) => isSyncMessage(message) ||\n    isEphemeralMessage(message) ||\n    isRequestMessage(message) ||\n    isDocumentUnavailableMessage(message) ||\n    isRemoteSubscriptionControlMessage(message) ||\n    isRemoteHeadsChanged(message);\n// prettier-ignore\nexport const isDocumentUnavailableMessage = (msg) => msg.type === \"doc-unavailable\";\nexport const isRequestMessage = (msg) => msg.type === \"request\";\nexport const isSyncMessage = (msg) => msg.type === \"sync\";\nexport const isEphemeralMessage = (msg) => msg.type === \"ephemeral\";\n// prettier-ignore\nexport const isRemoteSubscriptionControlMessage = (msg) => msg.type === \"remote-subscription-change\";\nexport const isRemoteHeadsChanged = (msg) => msg.type === \"remote-heads-changed\";\n", "import { next as Automerge } from \"@automerge/automerge/slim\";\nimport debug from \"debug\";\nimport { EventEmitter } from \"eventemitter3\";\nimport { generateAutomergeUrl, interpretAsDocumentId, parseAutomergeUrl, } from \"./AutomergeUrl.js\";\nimport { DocHandle } from \"./DocHandle.js\";\nimport { RemoteHeadsSubscriptions } from \"./RemoteHeadsSubscriptions.js\";\nimport { headsAreSame } from \"./helpers/headsAreSame.js\";\nimport { throttle } from \"./helpers/throttle.js\";\nimport { NetworkSubsystem } from \"./network/NetworkSubsystem.js\";\nimport { StorageSubsystem } from \"./storage/StorageSubsystem.js\";\nimport { CollectionSynchronizer } from \"./synchronizer/CollectionSynchronizer.js\";\n/** A Repo is a collection of documents with networking, syncing, and storage capabilities. */\n/** The `Repo` is the main entry point of this library\n *\n * @remarks\n * To construct a `Repo` you will need an {@link StorageAdapter} and one or\n * more {@link NetworkAdapter}s. Once you have a `Repo` you can use it to\n * obtain {@link DocHandle}s.\n */\nexport class Repo extends EventEmitter {\n    #log;\n    /** @hidden */\n    networkSubsystem;\n    /** @hidden */\n    storageSubsystem;\n    /** The debounce rate is adjustable on the repo. */\n    /** @hidden */\n    saveDebounceRate = 100;\n    #handleCache = {};\n    #synchronizer;\n    /** By default, we share generously with all peers. */\n    /** @hidden */\n    sharePolicy = async () => true;\n    /** maps peer id to to persistence information (storageId, isEphemeral), access by collection synchronizer  */\n    /** @hidden */\n    peerMetadataByPeerId = {};\n    #remoteHeadsSubscriptions = new RemoteHeadsSubscriptions();\n    #remoteHeadsGossipingEnabled = false;\n    constructor({ storage, network = [], peerId, sharePolicy, isEphemeral = storage === undefined, enableRemoteHeadsGossiping = false, } = {}) {\n        super();\n        this.#remoteHeadsGossipingEnabled = enableRemoteHeadsGossiping;\n        this.#log = debug(`automerge-repo:repo`);\n        this.sharePolicy = sharePolicy ?? this.sharePolicy;\n        // DOC COLLECTION\n        // The `document` event is fired by the DocCollection any time we create a new document or look\n        // up a document by ID. We listen for it in order to wire up storage and network synchronization.\n        this.on(\"document\", async ({ handle, isNew }) => {\n            if (storageSubsystem) {\n                // Save when the document changes, but no more often than saveDebounceRate.\n                const saveFn = ({ handle, doc, }) => {\n                    void storageSubsystem.saveDoc(handle.documentId, doc);\n                };\n                handle.on(\"heads-changed\", throttle(saveFn, this.saveDebounceRate));\n                if (isNew) {\n                    // this is a new document, immediately save it\n                    await storageSubsystem.saveDoc(handle.documentId, handle.docSync());\n                }\n                else {\n                    // Try to load from disk\n                    const loadedDoc = await storageSubsystem.loadDoc(handle.documentId);\n                    if (loadedDoc) {\n                        handle.update(() => loadedDoc);\n                    }\n                }\n            }\n            handle.on(\"unavailable\", () => {\n                this.#log(\"document unavailable\", { documentId: handle.documentId });\n                this.emit(\"unavailable-document\", {\n                    documentId: handle.documentId,\n                });\n            });\n            if (this.networkSubsystem.isReady()) {\n                handle.request();\n            }\n            else {\n                handle.awaitNetwork();\n                this.networkSubsystem\n                    .whenReady()\n                    .then(() => {\n                    handle.networkReady();\n                })\n                    .catch(err => {\n                    this.#log(\"error waiting for network\", { err });\n                });\n            }\n            // Register the document with the synchronizer. This advertises our interest in the document.\n            this.#synchronizer.addDocument(handle.documentId);\n        });\n        this.on(\"delete-document\", ({ documentId }) => {\n            // TODO Pass the delete on to the network\n            // synchronizer.removeDocument(documentId)\n            if (storageSubsystem) {\n                storageSubsystem.removeDoc(documentId).catch(err => {\n                    this.#log(\"error deleting document\", { documentId, err });\n                });\n            }\n        });\n        // SYNCHRONIZER\n        // The synchronizer uses the network subsystem to keep documents in sync with peers.\n        this.#synchronizer = new CollectionSynchronizer(this);\n        // When the synchronizer emits messages, send them to peers\n        this.#synchronizer.on(\"message\", message => {\n            this.#log(`sending ${message.type} message to ${message.targetId}`);\n            networkSubsystem.send(message);\n        });\n        if (this.#remoteHeadsGossipingEnabled) {\n            this.#synchronizer.on(\"open-doc\", ({ peerId, documentId }) => {\n                this.#remoteHeadsSubscriptions.subscribePeerToDoc(peerId, documentId);\n            });\n        }\n        // STORAGE\n        // The storage subsystem has access to some form of persistence, and deals with save and loading documents.\n        const storageSubsystem = storage ? new StorageSubsystem(storage) : undefined;\n        this.storageSubsystem = storageSubsystem;\n        // NETWORK\n        // The network subsystem deals with sending and receiving messages to and from peers.\n        const myPeerMetadata = (async () => ({\n            storageId: await storageSubsystem?.id(),\n            isEphemeral,\n        }))();\n        const networkSubsystem = new NetworkSubsystem(network, peerId, myPeerMetadata);\n        this.networkSubsystem = networkSubsystem;\n        // When we get a new peer, register it with the synchronizer\n        networkSubsystem.on(\"peer\", async ({ peerId, peerMetadata }) => {\n            this.#log(\"peer connected\", { peerId });\n            if (peerMetadata) {\n                this.peerMetadataByPeerId[peerId] = { ...peerMetadata };\n            }\n            this.sharePolicy(peerId)\n                .then(shouldShare => {\n                if (shouldShare && this.#remoteHeadsGossipingEnabled) {\n                    this.#remoteHeadsSubscriptions.addGenerousPeer(peerId);\n                }\n            })\n                .catch(err => {\n                console.log(\"error in share policy\", { err });\n            });\n            this.#synchronizer.addPeer(peerId);\n        });\n        // When a peer disconnects, remove it from the synchronizer\n        networkSubsystem.on(\"peer-disconnected\", ({ peerId }) => {\n            this.#synchronizer.removePeer(peerId);\n            this.#remoteHeadsSubscriptions.removePeer(peerId);\n        });\n        // Handle incoming messages\n        networkSubsystem.on(\"message\", async (msg) => {\n            this.#receiveMessage(msg);\n        });\n        this.#synchronizer.on(\"sync-state\", message => {\n            this.#saveSyncState(message);\n            const handle = this.#handleCache[message.documentId];\n            const { storageId } = this.peerMetadataByPeerId[message.peerId] || {};\n            if (!storageId) {\n                return;\n            }\n            const heads = handle.getRemoteHeads(storageId);\n            const haveHeadsChanged = message.syncState.theirHeads &&\n                (!heads || !headsAreSame(heads, message.syncState.theirHeads));\n            if (haveHeadsChanged && message.syncState.theirHeads) {\n                handle.setRemoteHeads(storageId, message.syncState.theirHeads);\n                if (storageId && this.#remoteHeadsGossipingEnabled) {\n                    this.#remoteHeadsSubscriptions.handleImmediateRemoteHeadsChanged(message.documentId, storageId, message.syncState.theirHeads);\n                }\n            }\n        });\n        if (this.#remoteHeadsGossipingEnabled) {\n            this.#remoteHeadsSubscriptions.on(\"notify-remote-heads\", message => {\n                this.networkSubsystem.send({\n                    type: \"remote-heads-changed\",\n                    targetId: message.targetId,\n                    documentId: message.documentId,\n                    newHeads: {\n                        [message.storageId]: {\n                            heads: message.heads,\n                            timestamp: message.timestamp,\n                        },\n                    },\n                });\n            });\n            this.#remoteHeadsSubscriptions.on(\"change-remote-subs\", message => {\n                this.#log(\"change-remote-subs\", message);\n                for (const peer of message.peers) {\n                    this.networkSubsystem.send({\n                        type: \"remote-subscription-change\",\n                        targetId: peer,\n                        add: message.add,\n                        remove: message.remove,\n                    });\n                }\n            });\n            this.#remoteHeadsSubscriptions.on(\"remote-heads-changed\", message => {\n                const handle = this.#handleCache[message.documentId];\n                handle.setRemoteHeads(message.storageId, message.remoteHeads);\n            });\n        }\n    }\n    #receiveMessage(message) {\n        switch (message.type) {\n            case \"remote-subscription-change\":\n                if (this.#remoteHeadsGossipingEnabled) {\n                    this.#remoteHeadsSubscriptions.handleControlMessage(message);\n                }\n                break;\n            case \"remote-heads-changed\":\n                if (this.#remoteHeadsGossipingEnabled) {\n                    this.#remoteHeadsSubscriptions.handleRemoteHeads(message);\n                }\n                break;\n            case \"sync\":\n            case \"request\":\n            case \"ephemeral\":\n            case \"doc-unavailable\":\n                this.#synchronizer.receiveMessage(message).catch(err => {\n                    console.log(\"error receiving message\", { err });\n                });\n        }\n    }\n    #throttledSaveSyncStateHandlers = {};\n    /** saves sync state throttled per storage id, if a peer doesn't have a storage id it's sync state is not persisted */\n    #saveSyncState(payload) {\n        if (!this.storageSubsystem) {\n            return;\n        }\n        const { storageId, isEphemeral } = this.peerMetadataByPeerId[payload.peerId] || {};\n        if (!storageId || isEphemeral) {\n            return;\n        }\n        let handler = this.#throttledSaveSyncStateHandlers[storageId];\n        if (!handler) {\n            handler = this.#throttledSaveSyncStateHandlers[storageId] = throttle(({ documentId, syncState }) => {\n                void this.storageSubsystem.saveSyncState(documentId, storageId, syncState);\n            }, this.saveDebounceRate);\n        }\n        handler(payload);\n    }\n    /** Returns an existing handle if we have it; creates one otherwise. */\n    #getHandle({ documentId, isNew, initialValue, }) {\n        // If we have the handle cached, return it\n        if (this.#handleCache[documentId])\n            return this.#handleCache[documentId];\n        // If not, create a new handle, cache it, and return it\n        if (!documentId)\n            throw new Error(`Invalid documentId ${documentId}`);\n        const handle = new DocHandle(documentId, { isNew, initialValue });\n        this.#handleCache[documentId] = handle;\n        return handle;\n    }\n    /** Returns all the handles we have cached. */\n    get handles() {\n        return this.#handleCache;\n    }\n    /** Returns a list of all connected peer ids */\n    get peers() {\n        return this.#synchronizer.peers;\n    }\n    getStorageIdOfPeer(peerId) {\n        return this.peerMetadataByPeerId[peerId]?.storageId;\n    }\n    /**\n     * Creates a new document and returns a handle to it. The initial value of the document is an\n     * empty object `{}` unless an initial value is provided. Its documentId is generated by the\n     * system. we emit a `document` event to advertise interest in the document.\n     */\n    create(initialValue) {\n        // Generate a new UUID and store it in the buffer\n        const { documentId } = parseAutomergeUrl(generateAutomergeUrl());\n        const handle = this.#getHandle({\n            documentId,\n            isNew: true,\n            initialValue,\n        });\n        this.emit(\"document\", { handle, isNew: true });\n        return handle;\n    }\n    /** Create a new DocHandle by cloning the history of an existing DocHandle.\n     *\n     * @param clonedHandle - The handle to clone\n     *\n     * @remarks This is a wrapper around the `clone` function in the Automerge library.\n     * The new `DocHandle` will have a new URL but will share history with the original,\n     * which means that changes made to the cloned handle can be sensibly merged back\n     * into the original.\n     *\n     * Any peers this `Repo` is connected to for whom `sharePolicy` returns `true` will\n     * be notified of the newly created DocHandle.\n     *\n     * @throws if the cloned handle is not yet ready or if\n     * `clonedHandle.docSync()` returns `undefined` (i.e. the handle is unavailable).\n     */\n    clone(clonedHandle) {\n        if (!clonedHandle.isReady()) {\n            throw new Error(`Cloned handle is not yet in ready state.\n        (Try await handle.waitForReady() first.)`);\n        }\n        const sourceDoc = clonedHandle.docSync();\n        if (!sourceDoc) {\n            throw new Error(\"Cloned handle doesn't have a document.\");\n        }\n        const handle = this.create();\n        handle.update(() => {\n            // we replace the document with the new cloned one\n            return Automerge.clone(sourceDoc);\n        });\n        return handle;\n    }\n    /**\n     * Retrieves a document by id. It gets data from the local system, but also emits a `document`\n     * event to advertise interest in the document.\n     */\n    find(\n    /** The url or documentId of the handle to retrieve */\n    id) {\n        const documentId = interpretAsDocumentId(id);\n        // If we have the handle cached, return it\n        if (this.#handleCache[documentId]) {\n            if (this.#handleCache[documentId].isUnavailable()) {\n                // this ensures that the event fires after the handle has been returned\n                setTimeout(() => {\n                    this.#handleCache[documentId].emit(\"unavailable\", {\n                        handle: this.#handleCache[documentId],\n                    });\n                });\n            }\n            return this.#handleCache[documentId];\n        }\n        const handle = this.#getHandle({\n            documentId,\n            isNew: false,\n        });\n        this.emit(\"document\", { handle, isNew: false });\n        return handle;\n    }\n    delete(\n    /** The url or documentId of the handle to delete */\n    id) {\n        const documentId = interpretAsDocumentId(id);\n        const handle = this.#getHandle({ documentId, isNew: false });\n        handle.delete();\n        delete this.#handleCache[documentId];\n        this.emit(\"delete-document\", { documentId });\n    }\n    /**\n     * Exports a document to a binary format.\n     * @param id - The url or documentId of the handle to export\n     *\n     * @returns Promise<Uint8Array | undefined> - A Promise containing the binary document,\n     * or undefined if the document is unavailable.\n     */\n    async export(id) {\n        const documentId = interpretAsDocumentId(id);\n        const handle = this.#getHandle({ documentId, isNew: false });\n        const doc = await handle.doc();\n        if (!doc)\n            return undefined;\n        return Automerge.save(doc);\n    }\n    /**\n     * Imports document binary into the repo.\n     * @param binary - The binary to import\n     */\n    import(binary) {\n        const doc = Automerge.load(binary);\n        const handle = this.create();\n        handle.update(() => {\n            return Automerge.clone(doc);\n        });\n        return handle;\n    }\n    subscribeToRemotes = (remotes) => {\n        if (this.#remoteHeadsGossipingEnabled) {\n            this.#log(\"subscribeToRemotes\", { remotes });\n            this.#remoteHeadsSubscriptions.subscribeToRemotes(remotes);\n        }\n        else {\n            this.#log(\"WARN: subscribeToRemotes called but remote heads gossiping is not enabled\");\n        }\n    };\n    storageId = async () => {\n        if (!this.storageSubsystem) {\n            return undefined;\n        }\n        else {\n            return this.storageSubsystem.id();\n        }\n    };\n    /**\n     * Writes Documents to a disk.\n     * @hidden this API is experimental and may change.\n     * @param documents - if provided, only writes the specified documents.\n     * @returns Promise<void>\n     */\n    async flush(documents) {\n        if (!this.storageSubsystem) {\n            return;\n        }\n        const handles = documents\n            ? documents.map(id => this.#handleCache[id])\n            : Object.values(this.#handleCache);\n        await Promise.all(handles.map(async (handle) => {\n            const doc = handle.docSync();\n            if (!doc) {\n                return;\n            }\n            return this.storageSubsystem.saveDoc(handle.documentId, doc);\n        }));\n    }\n}\n", "import { EventEmitter } from \"eventemitter3\";\nimport debug from \"debug\";\nexport class RemoteHeadsSubscriptions extends EventEmitter {\n    // Storage IDs we have received remote heads from\n    #knownHeads = new Map();\n    // Storage IDs we have subscribed to via Repo.subscribeToRemoteHeads\n    #ourSubscriptions = new Set();\n    // Storage IDs other peers have subscribed to by sending us a control message\n    #theirSubscriptions = new Map();\n    // Peers we will always share remote heads with even if they are not subscribed\n    #generousPeers = new Set();\n    // Documents each peer has open, we need this information so we only send remote heads of documents that the peer knows\n    #subscribedDocsByPeer = new Map();\n    #log = debug(\"automerge-repo:remote-heads-subscriptions\");\n    subscribeToRemotes(remotes) {\n        this.#log(\"subscribeToRemotes\", remotes);\n        const remotesToAdd = [];\n        for (const remote of remotes) {\n            if (!this.#ourSubscriptions.has(remote)) {\n                this.#ourSubscriptions.add(remote);\n                remotesToAdd.push(remote);\n            }\n        }\n        if (remotesToAdd.length > 0) {\n            this.emit(\"change-remote-subs\", {\n                add: remotesToAdd,\n                peers: Array.from(this.#generousPeers),\n            });\n        }\n    }\n    unsubscribeFromRemotes(remotes) {\n        this.#log(\"subscribeToRemotes\", remotes);\n        const remotesToRemove = [];\n        for (const remote of remotes) {\n            if (this.#ourSubscriptions.has(remote)) {\n                this.#ourSubscriptions.delete(remote);\n                if (!this.#theirSubscriptions.has(remote)) {\n                    remotesToRemove.push(remote);\n                }\n            }\n        }\n        if (remotesToRemove.length > 0) {\n            this.emit(\"change-remote-subs\", {\n                remove: remotesToRemove,\n                peers: Array.from(this.#generousPeers),\n            });\n        }\n    }\n    handleControlMessage(control) {\n        const remotesToAdd = [];\n        const remotesToRemove = [];\n        const addedRemotesWeKnow = [];\n        this.#log(\"handleControlMessage\", control);\n        if (control.add) {\n            for (const remote of control.add) {\n                let theirSubs = this.#theirSubscriptions.get(remote);\n                if (this.#ourSubscriptions.has(remote) || theirSubs) {\n                    addedRemotesWeKnow.push(remote);\n                }\n                if (!theirSubs) {\n                    theirSubs = new Set();\n                    this.#theirSubscriptions.set(remote, theirSubs);\n                    if (!this.#ourSubscriptions.has(remote)) {\n                        remotesToAdd.push(remote);\n                    }\n                }\n                theirSubs.add(control.senderId);\n            }\n        }\n        if (control.remove) {\n            for (const remote of control.remove) {\n                const theirSubs = this.#theirSubscriptions.get(remote);\n                if (theirSubs) {\n                    theirSubs.delete(control.senderId);\n                    // if no one is subscribed anymore remove remote\n                    if (theirSubs.size == 0 && !this.#ourSubscriptions.has(remote)) {\n                        remotesToRemove.push(remote);\n                    }\n                }\n            }\n        }\n        if (remotesToAdd.length > 0 || remotesToRemove.length > 0) {\n            this.emit(\"change-remote-subs\", {\n                peers: Array.from(this.#generousPeers),\n                add: remotesToAdd,\n                remove: remotesToRemove,\n            });\n        }\n        // send all our stored heads of documents the peer knows for the remotes they've added\n        for (const remote of addedRemotesWeKnow) {\n            const subscribedDocs = this.#subscribedDocsByPeer.get(control.senderId);\n            if (subscribedDocs) {\n                for (const documentId of subscribedDocs) {\n                    const knownHeads = this.#knownHeads.get(documentId);\n                    if (!knownHeads) {\n                        continue;\n                    }\n                    const lastHeads = knownHeads.get(remote);\n                    if (lastHeads) {\n                        this.emit(\"notify-remote-heads\", {\n                            targetId: control.senderId,\n                            documentId,\n                            heads: lastHeads.heads,\n                            timestamp: lastHeads.timestamp,\n                            storageId: remote,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    /** A peer we are not directly connected to has changed their heads */\n    handleRemoteHeads(msg) {\n        this.#log(\"handleRemoteHeads\", msg);\n        const changedHeads = this.#changedHeads(msg);\n        // Emit a remote-heads-changed event to update local dochandles\n        for (const event of changedHeads) {\n            if (this.#ourSubscriptions.has(event.storageId)) {\n                this.emit(\"remote-heads-changed\", event);\n            }\n        }\n        // Notify generous peers of these changes regardless of if they are subscribed to us\n        for (const event of changedHeads) {\n            for (const peer of this.#generousPeers) {\n                // don't emit event to sender if sender is a generous peer\n                if (peer === msg.senderId) {\n                    continue;\n                }\n                this.emit(\"notify-remote-heads\", {\n                    targetId: peer,\n                    documentId: event.documentId,\n                    heads: event.remoteHeads,\n                    timestamp: event.timestamp,\n                    storageId: event.storageId,\n                });\n            }\n        }\n        // Notify subscribers of these changes\n        for (const event of changedHeads) {\n            const theirSubs = this.#theirSubscriptions.get(event.storageId);\n            if (theirSubs) {\n                for (const peerId of theirSubs) {\n                    if (this.#isPeerSubscribedToDoc(peerId, event.documentId)) {\n                        this.emit(\"notify-remote-heads\", {\n                            targetId: peerId,\n                            documentId: event.documentId,\n                            heads: event.remoteHeads,\n                            timestamp: event.timestamp,\n                            storageId: event.storageId,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    /** A peer we are directly connected to has updated their heads */\n    handleImmediateRemoteHeadsChanged(documentId, storageId, heads) {\n        this.#log(\"handleLocalHeadsChanged\", documentId, storageId, heads);\n        const remote = this.#knownHeads.get(documentId);\n        const timestamp = Date.now();\n        if (!remote) {\n            this.#knownHeads.set(documentId, new Map([[storageId, { heads, timestamp }]]));\n        }\n        else {\n            const docRemote = remote.get(storageId);\n            if (!docRemote || docRemote.timestamp < Date.now()) {\n                remote.set(storageId, { heads, timestamp: Date.now() });\n            }\n        }\n        const theirSubs = this.#theirSubscriptions.get(storageId);\n        if (theirSubs) {\n            for (const peerId of theirSubs) {\n                if (this.#isPeerSubscribedToDoc(peerId, documentId)) {\n                    this.emit(\"notify-remote-heads\", {\n                        targetId: peerId,\n                        documentId: documentId,\n                        heads: heads,\n                        timestamp: timestamp,\n                        storageId: storageId,\n                    });\n                }\n            }\n        }\n    }\n    addGenerousPeer(peerId) {\n        this.#log(\"addGenerousPeer\", peerId);\n        this.#generousPeers.add(peerId);\n        if (this.#ourSubscriptions.size > 0) {\n            this.emit(\"change-remote-subs\", {\n                add: Array.from(this.#ourSubscriptions),\n                peers: [peerId],\n            });\n        }\n        for (const [documentId, remote] of this.#knownHeads) {\n            for (const [storageId, { heads, timestamp }] of remote) {\n                this.emit(\"notify-remote-heads\", {\n                    targetId: peerId,\n                    documentId: documentId,\n                    heads: heads,\n                    timestamp: timestamp,\n                    storageId: storageId,\n                });\n            }\n        }\n    }\n    removePeer(peerId) {\n        this.#log(\"removePeer\", peerId);\n        const remotesToRemove = [];\n        this.#generousPeers.delete(peerId);\n        this.#subscribedDocsByPeer.delete(peerId);\n        for (const [storageId, peerIds] of this.#theirSubscriptions) {\n            if (peerIds.has(peerId)) {\n                peerIds.delete(peerId);\n                if (peerIds.size == 0) {\n                    remotesToRemove.push(storageId);\n                    this.#theirSubscriptions.delete(storageId);\n                }\n            }\n        }\n        if (remotesToRemove.length > 0) {\n            this.emit(\"change-remote-subs\", {\n                remove: remotesToRemove,\n                peers: Array.from(this.#generousPeers),\n            });\n        }\n    }\n    subscribePeerToDoc(peerId, documentId) {\n        let subscribedDocs = this.#subscribedDocsByPeer.get(peerId);\n        if (!subscribedDocs) {\n            subscribedDocs = new Set();\n            this.#subscribedDocsByPeer.set(peerId, subscribedDocs);\n        }\n        subscribedDocs.add(documentId);\n        const remoteHeads = this.#knownHeads.get(documentId);\n        if (remoteHeads) {\n            for (const [storageId, lastHeads] of remoteHeads) {\n                const subscribedPeers = this.#theirSubscriptions.get(storageId);\n                if (subscribedPeers && subscribedPeers.has(peerId)) {\n                    this.emit(\"notify-remote-heads\", {\n                        targetId: peerId,\n                        documentId,\n                        heads: lastHeads.heads,\n                        timestamp: lastHeads.timestamp,\n                        storageId,\n                    });\n                }\n            }\n        }\n    }\n    #isPeerSubscribedToDoc(peerId, documentId) {\n        const subscribedDocs = this.#subscribedDocsByPeer.get(peerId);\n        return subscribedDocs && subscribedDocs.has(documentId);\n    }\n    /** Returns the (document, storageId) pairs which have changed after processing msg */\n    #changedHeads(msg) {\n        const changedHeads = [];\n        const { documentId, newHeads } = msg;\n        for (const [storageId, { heads, timestamp }] of Object.entries(newHeads)) {\n            if (!this.#ourSubscriptions.has(storageId) &&\n                !this.#theirSubscriptions.has(storageId)) {\n                continue;\n            }\n            let remote = this.#knownHeads.get(documentId);\n            if (!remote) {\n                remote = new Map();\n                this.#knownHeads.set(documentId, remote);\n            }\n            const docRemote = remote.get(storageId);\n            if (docRemote && docRemote.timestamp >= timestamp) {\n                continue;\n            }\n            else {\n                remote.set(storageId, { timestamp, heads });\n                changedHeads.push({\n                    documentId,\n                    storageId: storageId,\n                    remoteHeads: heads,\n                    timestamp,\n                });\n            }\n        }\n        return changedHeads;\n    }\n}\n", "/** Throttle\n * Returns a function with a built in throttle timer that runs after `delay` ms.\n *\n * This function differs from a conventional `throttle` in that it ensures the final\n * call will also execute and delays sending the first one until `delay` ms to allow\n * additional work to accumulate.\n *\n * Here's a diagram:\n *\n * calls +----++++++-----++----\n * dlay  ^--v ^--v^--v   ^--v\n * execs ---+----+---+------+--\n *\n * The goal in this design is to create batches of changes without flooding\n * communication or storage systems while still feeling responsive.\n * (By default we communicate at 10hz / every 100ms.)\n *\n * Note that the args go inside the parameter and you should be careful not to\n * recreate the function on each usage. (In React, see useMemo().)\n *\n *\n * Example usage:\n * const callback = debounce((ev) => { doSomethingExpensiveOrOccasional() }, 100)\n * target.addEventListener('frequent-event', callback);\n *\n */\nexport const throttle = (fn, delay) => {\n    let lastCall = Date.now();\n    let wait;\n    let timeout;\n    return function (...args) {\n        wait = lastCall + delay - Date.now();\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            fn(...args);\n            lastCall = Date.now();\n        }, wait);\n    };\n};\n", "import debug from \"debug\";\nimport { EventEmitter } from \"eventemitter3\";\nimport { isEphemeralMessage, isRepoMessage, } from \"./messages.js\";\nconst getEphemeralMessageSource = (message) => `${message.senderId}:${message.sessionId}`;\nexport class NetworkSubsystem extends EventEmitter {\n    peerId;\n    peerMetadata;\n    #log;\n    #adaptersByPeer = {};\n    #count = 0;\n    #sessionId = Math.random().toString(36).slice(2);\n    #ephemeralSessionCounts = {};\n    #readyAdapterCount = 0;\n    #adapters = [];\n    constructor(adapters, peerId = randomPeerId(), peerMetadata) {\n        super();\n        this.peerId = peerId;\n        this.peerMetadata = peerMetadata;\n        this.#log = debug(`automerge-repo:network:${this.peerId}`);\n        adapters.forEach(a => this.addNetworkAdapter(a));\n    }\n    addNetworkAdapter(networkAdapter) {\n        this.#adapters.push(networkAdapter);\n        networkAdapter.once(\"ready\", () => {\n            this.#readyAdapterCount++;\n            this.#log(\"Adapters ready: \", this.#readyAdapterCount, \"/\", this.#adapters.length);\n            if (this.#readyAdapterCount === this.#adapters.length) {\n                this.emit(\"ready\");\n            }\n        });\n        networkAdapter.on(\"peer-candidate\", ({ peerId, peerMetadata }) => {\n            this.#log(`peer candidate: ${peerId} `);\n            // TODO: This is where authentication would happen\n            if (!this.#adaptersByPeer[peerId]) {\n                // TODO: handle losing a server here\n                this.#adaptersByPeer[peerId] = networkAdapter;\n            }\n            this.emit(\"peer\", { peerId, peerMetadata });\n        });\n        networkAdapter.on(\"peer-disconnected\", ({ peerId }) => {\n            this.#log(`peer disconnected: ${peerId} `);\n            delete this.#adaptersByPeer[peerId];\n            this.emit(\"peer-disconnected\", { peerId });\n        });\n        networkAdapter.on(\"message\", msg => {\n            if (!isRepoMessage(msg)) {\n                this.#log(`invalid message: ${JSON.stringify(msg)}`);\n                return;\n            }\n            this.#log(`message from ${msg.senderId}`);\n            if (isEphemeralMessage(msg)) {\n                const source = getEphemeralMessageSource(msg);\n                if (this.#ephemeralSessionCounts[source] === undefined ||\n                    msg.count > this.#ephemeralSessionCounts[source]) {\n                    this.#ephemeralSessionCounts[source] = msg.count;\n                    this.emit(\"message\", msg);\n                }\n                return;\n            }\n            this.emit(\"message\", msg);\n        });\n        networkAdapter.on(\"close\", () => {\n            this.#log(\"adapter closed\");\n            Object.entries(this.#adaptersByPeer).forEach(([peerId, other]) => {\n                if (other === networkAdapter) {\n                    delete this.#adaptersByPeer[peerId];\n                }\n            });\n        });\n        this.peerMetadata\n            .then(peerMetadata => {\n            networkAdapter.connect(this.peerId, peerMetadata);\n        })\n            .catch(err => {\n            this.#log(\"error connecting to network\", err);\n        });\n    }\n    send(message) {\n        const peer = this.#adaptersByPeer[message.targetId];\n        if (!peer) {\n            this.#log(`Tried to send message but peer not found: ${message.targetId}`);\n            return;\n        }\n        /** Messages come in without a senderId and other required information; this is where we make\n         * sure they have everything they need.\n         */\n        const prepareMessage = (message) => {\n            if (message.type === \"ephemeral\") {\n                if (\"count\" in message) {\n                    // existing ephemeral message from another peer; pass on without changes\n                    return message;\n                }\n                else {\n                    // new ephemeral message from us; add our senderId as well as a counter and session id\n                    return {\n                        ...message,\n                        count: ++this.#count,\n                        sessionId: this.#sessionId,\n                        senderId: this.peerId,\n                    };\n                }\n            }\n            else {\n                // other message type; just add our senderId\n                return {\n                    ...message,\n                    senderId: this.peerId,\n                };\n            }\n        };\n        const outbound = prepareMessage(message);\n        this.#log(\"sending message %o\", outbound);\n        peer.send(outbound);\n    }\n    isReady = () => {\n        return this.#readyAdapterCount === this.#adapters.length;\n    };\n    whenReady = async () => {\n        if (this.isReady()) {\n            return;\n        }\n        else {\n            return new Promise(resolve => {\n                this.once(\"ready\", () => {\n                    resolve();\n                });\n            });\n        }\n    };\n}\nfunction randomPeerId() {\n    return `user-${Math.round(Math.random() * 100000)}`;\n}\n", "import * as A from \"@automerge/automerge/slim/next\";\nimport debug from \"debug\";\nimport { headsAreSame } from \"../helpers/headsAreSame.js\";\nimport { mergeArrays } from \"../helpers/mergeArrays.js\";\nimport { keyHash, headsHash } from \"./keyHash.js\";\nimport { chunkTypeFromKey } from \"./chunkTypeFromKey.js\";\nimport * as Uuid from \"uuid\";\n/**\n * The storage subsystem is responsible for saving and loading Automerge documents to and from\n * storage adapter. It also provides a generic key/value storage interface for other uses.\n */\nexport class StorageSubsystem {\n    /** The storage adapter to use for saving and loading documents */\n    #storageAdapter;\n    /** Record of the latest heads we've loaded or saved for each document  */\n    #storedHeads = new Map();\n    /** Metadata on the chunks we've already loaded for each document */\n    #chunkInfos = new Map();\n    /** Flag to avoid compacting when a compaction is already underway */\n    #compacting = false;\n    #log = debug(`automerge-repo:storage-subsystem`);\n    constructor(storageAdapter) {\n        this.#storageAdapter = storageAdapter;\n    }\n    async id() {\n        const storedId = await this.#storageAdapter.load([\"storage-adapter-id\"]);\n        let id;\n        if (storedId) {\n            id = new TextDecoder().decode(storedId);\n        }\n        else {\n            id = Uuid.v4();\n            await this.#storageAdapter.save([\"storage-adapter-id\"], new TextEncoder().encode(id));\n        }\n        return id;\n    }\n    // ARBITRARY KEY/VALUE STORAGE\n    // The `load`, `save`, and `remove` methods are for generic key/value storage, as opposed to\n    // Automerge documents. For example, they're used by the LocalFirstAuthProvider to persist the\n    // encrypted team graph that encodes group membership and permissions.\n    //\n    // The namespace parameter is to prevent collisions with other users of the storage subsystem.\n    // Typically this will be the name of the plug-in, adapter, or other system that is using it. For\n    // example, the LocalFirstAuthProvider uses the namespace `LocalFirstAuthProvider`.\n    /** Loads a value from storage. */\n    async load(\n    /** Namespace to prevent collisions with other users of the storage subsystem. */\n    namespace, \n    /** Key to load. Typically a UUID or other unique identifier, but could be any string. */\n    key) {\n        const storageKey = [namespace, key];\n        return await this.#storageAdapter.load(storageKey);\n    }\n    /** Saves a value in storage. */\n    async save(\n    /** Namespace to prevent collisions with other users of the storage subsystem. */\n    namespace, \n    /** Key to load. Typically a UUID or other unique identifier, but could be any string. */\n    key, \n    /** Data to save, as a binary blob. */\n    data) {\n        const storageKey = [namespace, key];\n        await this.#storageAdapter.save(storageKey, data);\n    }\n    /** Removes a value from storage. */\n    async remove(\n    /** Namespace to prevent collisions with other users of the storage subsystem. */\n    namespace, \n    /** Key to remove. Typically a UUID or other unique identifier, but could be any string. */\n    key) {\n        const storageKey = [namespace, key];\n        await this.#storageAdapter.remove(storageKey);\n    }\n    // AUTOMERGE DOCUMENT STORAGE\n    /**\n     * Loads the Automerge document with the given ID from storage.\n     */\n    async loadDoc(documentId) {\n        // Load all the chunks for this document\n        const chunks = await this.#storageAdapter.loadRange([documentId]);\n        const binaries = [];\n        const chunkInfos = [];\n        for (const chunk of chunks) {\n            // chunks might have been deleted in the interim\n            if (chunk.data === undefined)\n                continue;\n            const chunkType = chunkTypeFromKey(chunk.key);\n            if (chunkType == null)\n                continue;\n            chunkInfos.push({\n                key: chunk.key,\n                type: chunkType,\n                size: chunk.data.length,\n            });\n            binaries.push(chunk.data);\n        }\n        this.#chunkInfos.set(documentId, chunkInfos);\n        // Merge the chunks into a single binary\n        const binary = mergeArrays(binaries);\n        if (binary.length === 0)\n            return null;\n        // Load into an Automerge document\n        const newDoc = A.loadIncremental(A.init(), binary);\n        // Record the latest heads for the document\n        this.#storedHeads.set(documentId, A.getHeads(newDoc));\n        return newDoc;\n    }\n    /**\n     * Saves the provided Automerge document to storage.\n     *\n     * @remarks\n     * Under the hood this makes incremental saves until the incremental size is greater than the\n     * snapshot size, at which point the document is compacted into a single snapshot.\n     */\n    async saveDoc(documentId, doc) {\n        // Don't bother saving if the document hasn't changed\n        if (!this.#shouldSave(documentId, doc))\n            return;\n        const sourceChunks = this.#chunkInfos.get(documentId) ?? [];\n        if (this.#shouldCompact(sourceChunks)) {\n            await this.#saveTotal(documentId, doc, sourceChunks);\n        }\n        else {\n            await this.#saveIncremental(documentId, doc);\n        }\n        this.#storedHeads.set(documentId, A.getHeads(doc));\n    }\n    /**\n     * Removes the Automerge document with the given ID from storage\n     */\n    async removeDoc(documentId) {\n        await this.#storageAdapter.removeRange([documentId, \"snapshot\"]);\n        await this.#storageAdapter.removeRange([documentId, \"incremental\"]);\n        await this.#storageAdapter.removeRange([documentId, \"sync-state\"]);\n    }\n    /**\n     * Saves just the incremental changes since the last save.\n     */\n    async #saveIncremental(documentId, doc) {\n        const binary = A.saveSince(doc, this.#storedHeads.get(documentId) ?? []);\n        if (binary && binary.length > 0) {\n            const key = [documentId, \"incremental\", keyHash(binary)];\n            this.#log(`Saving incremental ${key} for document ${documentId}`);\n            await this.#storageAdapter.save(key, binary);\n            if (!this.#chunkInfos.has(documentId)) {\n                this.#chunkInfos.set(documentId, []);\n            }\n            this.#chunkInfos.get(documentId).push({\n                key,\n                type: \"incremental\",\n                size: binary.length,\n            });\n            this.#storedHeads.set(documentId, A.getHeads(doc));\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    /**\n     * Compacts the document storage into a single shapshot.\n     */\n    async #saveTotal(documentId, doc, sourceChunks) {\n        this.#compacting = true;\n        const binary = A.save(doc);\n        const snapshotHash = headsHash(A.getHeads(doc));\n        const key = [documentId, \"snapshot\", snapshotHash];\n        const oldKeys = new Set(sourceChunks.map(c => c.key).filter(k => k[2] !== snapshotHash));\n        this.#log(`Saving snapshot ${key} for document ${documentId}`);\n        this.#log(`deleting old chunks ${Array.from(oldKeys)}`);\n        await this.#storageAdapter.save(key, binary);\n        for (const key of oldKeys) {\n            await this.#storageAdapter.remove(key);\n        }\n        const newChunkInfos = this.#chunkInfos.get(documentId)?.filter(c => !oldKeys.has(c.key)) ?? [];\n        newChunkInfos.push({ key, type: \"snapshot\", size: binary.length });\n        this.#chunkInfos.set(documentId, newChunkInfos);\n        this.#compacting = false;\n    }\n    async loadSyncState(documentId, storageId) {\n        const key = [documentId, \"sync-state\", storageId];\n        const loaded = await this.#storageAdapter.load(key);\n        return loaded ? A.decodeSyncState(loaded) : undefined;\n    }\n    async saveSyncState(documentId, storageId, syncState) {\n        const key = [documentId, \"sync-state\", storageId];\n        await this.#storageAdapter.save(key, A.encodeSyncState(syncState));\n    }\n    /**\n     * Returns true if the document has changed since the last time it was saved.\n     */\n    #shouldSave(documentId, doc) {\n        const oldHeads = this.#storedHeads.get(documentId);\n        if (!oldHeads) {\n            // we haven't saved this document before\n            return true;\n        }\n        const newHeads = A.getHeads(doc);\n        if (headsAreSame(newHeads, oldHeads)) {\n            // the document hasn't changed\n            return false;\n        }\n        return true; // the document has changed\n    }\n    /**\n     * We only compact if the incremental size is greater than the snapshot size.\n     */\n    #shouldCompact(sourceChunks) {\n        if (this.#compacting)\n            return false;\n        let snapshotSize = 0;\n        let incrementalSize = 0;\n        for (const chunk of sourceChunks) {\n            if (chunk.type === \"snapshot\") {\n                snapshotSize += chunk.size;\n            }\n            else {\n                incrementalSize += chunk.size;\n            }\n        }\n        // if the file is currently small, don't worry, just compact\n        // this might seem a bit arbitrary (1k is arbitrary) but is designed to ensure compaction\n        // for documents with only a single large change on top of an empty (or nearly empty) document\n        // for example: imported NPM modules, images, etc.\n        // if we have even more incrementals (so far) than the snapshot, compact\n        return snapshotSize < 1024 || incrementalSize >= snapshotSize;\n    }\n}\n", "export function mergeArrays(myArrays) {\n    // Get the total length of all arrays.\n    let length = 0;\n    myArrays.forEach(item => {\n        length += item.length;\n    });\n    // Create a new array with total length and merge all source arrays.\n    const mergedArray = new Uint8Array(length);\n    let offset = 0;\n    myArrays.forEach(item => {\n        mergedArray.set(item, offset);\n        offset += item.length;\n    });\n    return mergedArray;\n}\n", "import * as sha256 from \"fast-sha256\";\nimport { mergeArrays } from \"../helpers/mergeArrays.js\";\nexport function keyHash(binary) {\n    // calculate hash\n    const hash = sha256.hash(binary);\n    return bufferToHexString(hash);\n}\nexport function headsHash(heads) {\n    const encoder = new TextEncoder();\n    const headsbinary = mergeArrays(heads.map((h) => encoder.encode(h)));\n    return keyHash(headsbinary);\n}\nfunction bufferToHexString(data) {\n    return Array.from(data, byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\n", "/**\n * Keys for storing Automerge documents are of the form:\n * ```ts\n * [documentId, \"snapshot\", hash]  // OR\n * [documentId, \"incremental\", hash]\n * ```\n * This function returns the chunk type (\"snapshot\" or \"incremental\") if the key is in one of these\n * forms.\n */\nexport function chunkTypeFromKey(key) {\n    if (key.length < 2)\n        return null;\n    const chunkTypeStr = key[key.length - 2]; // next-to-last element in key\n    if (chunkTypeStr === \"snapshot\" || chunkTypeStr === \"incremental\") {\n        return chunkTypeStr;\n    }\n    return null;\n}\n", "import debug from \"debug\";\nimport { stringifyAutomergeUrl } from \"../AutomergeUrl.js\";\nimport { DocSynchronizer } from \"./DocSynchronizer.js\";\nimport { Synchronizer } from \"./Synchronizer.js\";\nconst log = debug(\"automerge-repo:collectionsync\");\n/** A CollectionSynchronizer is responsible for synchronizing a DocCollection with peers. */\nexport class CollectionSynchronizer extends Synchronizer {\n    repo;\n    /** The set of peers we are connected with */\n    #peers = new Set();\n    /** A map of documentIds to their synchronizers */\n    #docSynchronizers = {};\n    /** Used to determine if the document is know to the Collection and a synchronizer exists or is being set up */\n    #docSetUp = {};\n    constructor(repo) {\n        super();\n        this.repo = repo;\n    }\n    /** Returns a synchronizer for the given document, creating one if it doesn't already exist.  */\n    #fetchDocSynchronizer(documentId) {\n        if (!this.#docSynchronizers[documentId]) {\n            const handle = this.repo.find(stringifyAutomergeUrl({ documentId }));\n            this.#docSynchronizers[documentId] = this.#initDocSynchronizer(handle);\n        }\n        return this.#docSynchronizers[documentId];\n    }\n    /** Creates a new docSynchronizer and sets it up to propagate messages */\n    #initDocSynchronizer(handle) {\n        const docSynchronizer = new DocSynchronizer({\n            handle,\n            onLoadSyncState: async (peerId) => {\n                if (!this.repo.storageSubsystem) {\n                    return;\n                }\n                const { storageId, isEphemeral } = this.repo.peerMetadataByPeerId[peerId] || {};\n                if (!storageId || isEphemeral) {\n                    return;\n                }\n                return this.repo.storageSubsystem.loadSyncState(handle.documentId, storageId);\n            },\n        });\n        docSynchronizer.on(\"message\", event => this.emit(\"message\", event));\n        docSynchronizer.on(\"open-doc\", event => this.emit(\"open-doc\", event));\n        docSynchronizer.on(\"sync-state\", event => this.emit(\"sync-state\", event));\n        return docSynchronizer;\n    }\n    /** returns an array of peerIds that we share this document generously with */\n    async #documentGenerousPeers(documentId) {\n        const peers = Array.from(this.#peers);\n        const generousPeers = [];\n        for (const peerId of peers) {\n            const okToShare = await this.repo.sharePolicy(peerId, documentId);\n            if (okToShare)\n                generousPeers.push(peerId);\n        }\n        return generousPeers;\n    }\n    // PUBLIC\n    /**\n     * When we receive a sync message for a document we haven't got in memory, we\n     * register it with the repo and start synchronizing\n     */\n    async receiveMessage(message) {\n        log(`onSyncMessage: ${message.senderId}, ${message.documentId}, ${\"data\" in message ? message.data.byteLength + \"bytes\" : \"\"}`);\n        const documentId = message.documentId;\n        if (!documentId) {\n            throw new Error(\"received a message with an invalid documentId\");\n        }\n        this.#docSetUp[documentId] = true;\n        const docSynchronizer = this.#fetchDocSynchronizer(documentId);\n        docSynchronizer.receiveMessage(message);\n        // Initiate sync with any new peers\n        const peers = await this.#documentGenerousPeers(documentId);\n        docSynchronizer.beginSync(peers.filter(peerId => !docSynchronizer.hasPeer(peerId)));\n    }\n    /**\n     * Starts synchronizing the given document with all peers that we share it generously with.\n     */\n    addDocument(documentId) {\n        // HACK: this is a hack to prevent us from adding the same document twice\n        if (this.#docSetUp[documentId]) {\n            return;\n        }\n        const docSynchronizer = this.#fetchDocSynchronizer(documentId);\n        void this.#documentGenerousPeers(documentId).then(peers => {\n            docSynchronizer.beginSync(peers);\n        });\n    }\n    // TODO: implement this\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removeDocument(documentId) {\n        throw new Error(\"not implemented\");\n    }\n    /** Adds a peer and maybe starts synchronizing with them */\n    addPeer(peerId) {\n        log(`adding ${peerId} & synchronizing with them`);\n        if (this.#peers.has(peerId)) {\n            return;\n        }\n        this.#peers.add(peerId);\n        for (const docSynchronizer of Object.values(this.#docSynchronizers)) {\n            const { documentId } = docSynchronizer;\n            void this.repo.sharePolicy(peerId, documentId).then(okToShare => {\n                if (okToShare)\n                    docSynchronizer.beginSync([peerId]);\n            });\n        }\n    }\n    /** Removes a peer and stops synchronizing with them */\n    removePeer(peerId) {\n        log(`removing peer ${peerId}`);\n        this.#peers.delete(peerId);\n        for (const docSynchronizer of Object.values(this.#docSynchronizers)) {\n            docSynchronizer.endSync(peerId);\n        }\n    }\n    /** Returns a list of all connected peer ids */\n    get peers() {\n        return Array.from(this.#peers);\n    }\n}\n", "import * as A from \"@automerge/automerge/slim/next\";\nimport { decode } from \"cbor-x\";\nimport debug from \"debug\";\nimport { READY, REQUESTING, UNAVAILABLE, } from \"../DocHandle.js\";\nimport { isRequestMessage, } from \"../network/messages.js\";\nimport { Synchronizer } from \"./Synchronizer.js\";\nimport { throttle } from \"../helpers/throttle.js\";\n/**\n * DocSynchronizer takes a handle to an Automerge document, and receives & dispatches sync messages\n * to bring it inline with all other peers' versions.\n */\nexport class DocSynchronizer extends Synchronizer {\n    #log;\n    syncDebounceRate = 100;\n    /** Active peers */\n    #peers = [];\n    #pendingSyncStateCallbacks = {};\n    #peerDocumentStatuses = {};\n    /** Sync state for each peer we've communicated with (including inactive peers) */\n    #syncStates = {};\n    #pendingSyncMessages = [];\n    #syncStarted = false;\n    #handle;\n    #onLoadSyncState;\n    constructor({ handle, onLoadSyncState }) {\n        super();\n        this.#handle = handle;\n        this.#onLoadSyncState =\n            onLoadSyncState ?? (() => Promise.resolve(undefined));\n        const docId = handle.documentId.slice(0, 5);\n        this.#log = debug(`automerge-repo:docsync:${docId}`);\n        handle.on(\"change\", throttle(() => this.#syncWithPeers(), this.syncDebounceRate));\n        handle.on(\"ephemeral-message-outbound\", payload => this.#broadcastToPeers(payload));\n        // Process pending sync messages immediately after the handle becomes ready.\n        void (async () => {\n            await handle.doc([READY, REQUESTING]);\n            this.#processAllPendingSyncMessages();\n        })();\n    }\n    get peerStates() {\n        return this.#peerDocumentStatuses;\n    }\n    get documentId() {\n        return this.#handle.documentId;\n    }\n    /// PRIVATE\n    async #syncWithPeers() {\n        this.#log(`syncWithPeers`);\n        const doc = await this.#handle.doc();\n        if (doc === undefined)\n            return;\n        this.#peers.forEach(peerId => this.#sendSyncMessage(peerId, doc));\n    }\n    async #broadcastToPeers({ data, }) {\n        this.#log(`broadcastToPeers`, this.#peers);\n        this.#peers.forEach(peerId => this.#sendEphemeralMessage(peerId, data));\n    }\n    #sendEphemeralMessage(peerId, data) {\n        this.#log(`sendEphemeralMessage ->${peerId}`);\n        const message = {\n            type: \"ephemeral\",\n            targetId: peerId,\n            documentId: this.#handle.documentId,\n            data,\n        };\n        this.emit(\"message\", message);\n    }\n    #withSyncState(peerId, callback) {\n        this.#addPeer(peerId);\n        if (!(peerId in this.#peerDocumentStatuses)) {\n            this.#peerDocumentStatuses[peerId] = \"unknown\";\n        }\n        const syncState = this.#syncStates[peerId];\n        if (syncState) {\n            callback(syncState);\n            return;\n        }\n        let pendingCallbacks = this.#pendingSyncStateCallbacks[peerId];\n        if (!pendingCallbacks) {\n            this.#onLoadSyncState(peerId)\n                .then(syncState => {\n                this.#initSyncState(peerId, syncState ?? A.initSyncState());\n            })\n                .catch(err => {\n                this.#log(`Error loading sync state for ${peerId}: ${err}`);\n            });\n            pendingCallbacks = this.#pendingSyncStateCallbacks[peerId] = [];\n        }\n        pendingCallbacks.push(callback);\n    }\n    #addPeer(peerId) {\n        if (!this.#peers.includes(peerId)) {\n            this.#peers.push(peerId);\n            this.emit(\"open-doc\", { documentId: this.documentId, peerId });\n        }\n    }\n    #initSyncState(peerId, syncState) {\n        const pendingCallbacks = this.#pendingSyncStateCallbacks[peerId];\n        if (pendingCallbacks) {\n            for (const callback of pendingCallbacks) {\n                callback(syncState);\n            }\n        }\n        delete this.#pendingSyncStateCallbacks[peerId];\n        this.#syncStates[peerId] = syncState;\n    }\n    #setSyncState(peerId, syncState) {\n        this.#syncStates[peerId] = syncState;\n        this.emit(\"sync-state\", {\n            peerId,\n            syncState,\n            documentId: this.#handle.documentId,\n        });\n    }\n    #sendSyncMessage(peerId, doc) {\n        this.#log(`sendSyncMessage ->${peerId}`);\n        this.#withSyncState(peerId, syncState => {\n            const [newSyncState, message] = A.generateSyncMessage(doc, syncState);\n            if (message) {\n                this.#setSyncState(peerId, newSyncState);\n                const isNew = A.getHeads(doc).length === 0;\n                if (!this.#handle.isReady() &&\n                    isNew &&\n                    newSyncState.sharedHeads.length === 0 &&\n                    !Object.values(this.#peerDocumentStatuses).includes(\"has\") &&\n                    this.#peerDocumentStatuses[peerId] === \"unknown\") {\n                    // we don't have the document (or access to it), so we request it\n                    this.emit(\"message\", {\n                        type: \"request\",\n                        targetId: peerId,\n                        documentId: this.#handle.documentId,\n                        data: message,\n                    });\n                }\n                else {\n                    this.emit(\"message\", {\n                        type: \"sync\",\n                        targetId: peerId,\n                        data: message,\n                        documentId: this.#handle.documentId,\n                    });\n                }\n                // if we have sent heads, then the peer now has or will have the document\n                if (!isNew) {\n                    this.#peerDocumentStatuses[peerId] = \"has\";\n                }\n            }\n        });\n    }\n    /// PUBLIC\n    hasPeer(peerId) {\n        return this.#peers.includes(peerId);\n    }\n    beginSync(peerIds) {\n        const noPeersWithDocument = peerIds.every(peerId => this.#peerDocumentStatuses[peerId] in [\"unavailable\", \"wants\"]);\n        // At this point if we don't have anything in our storage, we need to use an empty doc to sync\n        // with; but we don't want to surface that state to the front end\n        const docPromise = this.#handle\n            .doc([READY, REQUESTING, UNAVAILABLE])\n            .then(doc => {\n            // we register out peers first, then say that sync has started\n            this.#syncStarted = true;\n            this.#checkDocUnavailable();\n            const wasUnavailable = doc === undefined;\n            if (wasUnavailable && noPeersWithDocument) {\n                return;\n            }\n            // If the doc is unavailable we still need a blank document to generate\n            // the sync message from\n            return doc ?? A.init();\n        });\n        this.#log(`beginSync: ${peerIds.join(\", \")}`);\n        peerIds.forEach(peerId => {\n            this.#withSyncState(peerId, syncState => {\n                // HACK: if we have a sync state already, we round-trip it through the encoding system to make\n                // sure state is preserved. This prevents an infinite loop caused by failed attempts to send\n                // messages during disconnection.\n                // TODO: cover that case with a test and remove this hack\n                const reparsedSyncState = A.decodeSyncState(A.encodeSyncState(syncState));\n                this.#setSyncState(peerId, reparsedSyncState);\n                docPromise\n                    .then(doc => {\n                    if (doc) {\n                        this.#sendSyncMessage(peerId, doc);\n                    }\n                })\n                    .catch(err => {\n                    this.#log(`Error loading doc for ${peerId}: ${err}`);\n                });\n            });\n        });\n    }\n    endSync(peerId) {\n        this.#log(`removing peer ${peerId}`);\n        this.#peers = this.#peers.filter(p => p !== peerId);\n    }\n    receiveMessage(message) {\n        switch (message.type) {\n            case \"sync\":\n            case \"request\":\n                this.receiveSyncMessage(message);\n                break;\n            case \"ephemeral\":\n                this.receiveEphemeralMessage(message);\n                break;\n            case \"doc-unavailable\":\n                this.#peerDocumentStatuses[message.senderId] = \"unavailable\";\n                this.#checkDocUnavailable();\n                break;\n            default:\n                throw new Error(`unknown message type: ${message}`);\n        }\n    }\n    receiveEphemeralMessage(message) {\n        if (message.documentId !== this.#handle.documentId)\n            throw new Error(`channelId doesn't match documentId`);\n        const { senderId, data } = message;\n        const contents = decode(new Uint8Array(data));\n        this.#handle.emit(\"ephemeral-message\", {\n            handle: this.#handle,\n            senderId,\n            message: contents,\n        });\n        this.#peers.forEach(peerId => {\n            if (peerId === senderId)\n                return;\n            this.emit(\"message\", {\n                ...message,\n                targetId: peerId,\n            });\n        });\n    }\n    receiveSyncMessage(message) {\n        if (message.documentId !== this.#handle.documentId)\n            throw new Error(`channelId doesn't match documentId`);\n        // We need to block receiving the syncMessages until we've checked local storage\n        if (!this.#handle.inState([READY, REQUESTING, UNAVAILABLE])) {\n            this.#pendingSyncMessages.push({ message, received: new Date() });\n            return;\n        }\n        this.#processAllPendingSyncMessages();\n        this.#processSyncMessage(message);\n    }\n    #processSyncMessage(message) {\n        if (isRequestMessage(message)) {\n            this.#peerDocumentStatuses[message.senderId] = \"wants\";\n        }\n        this.#checkDocUnavailable();\n        // if the message has heads, then the peer has the document\n        if (A.decodeSyncMessage(message.data).heads.length > 0) {\n            this.#peerDocumentStatuses[message.senderId] = \"has\";\n        }\n        this.#withSyncState(message.senderId, syncState => {\n            this.#handle.update(doc => {\n                const [newDoc, newSyncState] = A.receiveSyncMessage(doc, syncState, message.data);\n                this.#setSyncState(message.senderId, newSyncState);\n                // respond to just this peer (as required)\n                this.#sendSyncMessage(message.senderId, doc);\n                return newDoc;\n            });\n            this.#checkDocUnavailable();\n        });\n    }\n    #checkDocUnavailable() {\n        // if we know none of the peers have the document, tell all our peers that we don't either\n        if (this.#syncStarted &&\n            this.#handle.inState([REQUESTING]) &&\n            this.#peers.every(peerId => this.#peerDocumentStatuses[peerId] === \"unavailable\" ||\n                this.#peerDocumentStatuses[peerId] === \"wants\")) {\n            this.#peers\n                .filter(peerId => this.#peerDocumentStatuses[peerId] === \"wants\")\n                .forEach(peerId => {\n                const message = {\n                    type: \"doc-unavailable\",\n                    documentId: this.#handle.documentId,\n                    targetId: peerId,\n                };\n                this.emit(\"message\", message);\n            });\n            this.#handle.unavailable();\n        }\n    }\n    #processAllPendingSyncMessages() {\n        for (const message of this.#pendingSyncMessages) {\n            this.#processSyncMessage(message.message);\n        }\n        this.#pendingSyncMessages = [];\n    }\n}\n", "import { EventEmitter } from \"eventemitter3\";\nexport class Synchronizer extends EventEmitter {\n}\n", "/* c8 ignore start */\nimport { EventEmitter } from \"eventemitter3\";\n/** An interface representing some way to connect to other peers\n *\n * @remarks\n * The {@link Repo} uses one or more `NetworkAdapter`s to connect to other peers.\n * Because the network may take some time to be ready the {@link Repo} will wait\n * until the adapter emits a `ready` event before it starts trying to use it\n *\n * This utility class can be used as a base to build a custom network adapter. It\n * is most useful as a simple way to add the necessary event emitter functionality\n */\nexport class NetworkAdapter extends EventEmitter {\n    peerId;\n    peerMetadata;\n}\n", "/** A storage adapter represents some way of storing binary data for a {@link Repo}\n * @deprecated use {@link StorageAdapterInterface}\n *\n * @remarks\n * `StorageAdapter`s provide a key/value storage interface. The keys are arrays of strings\n * ({@link StorageKey}) and the values are binary blobs.\n */\nexport class StorageAdapter {\n}\n"],
  "mappings": "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",
  "names": ["hash", "diff", "view", "dataView", "view", "encode", "i", "j", "decode", "encode", "decode", "sha256", "setup", "hash", "debug", "self", "save", "EventEmitter", "emit", "require_sha256", "exports", "sha256", "Hash", "from", "HMAC", "hash", "hmac", "bs58check", "decode", "encode", "i", "structure", "read", "target", "Buffer", "position", "bundledStrings", "referenceMap", "packedObjectMap", "sharedPackedObjectMap", "sharedValues", "packedValues", "encode", "options", "maxBytes", "isLittleEndianMachine", "Buffer", "encode", "decode", "self", "target", "src", "target", "ProcessingStatus", "defaultOptions", "err", "cancel", "src", "spawnChild", "stop", "target", "actions", "event", "getMeta", "toJSON", "can", "hasTag", "matches", "self", "raise", "src", "assign", "SpecialTargets", "src", "t", "STATE_IDENTIFIER", "self", "children", "EventEmitter", "debug", "doc", "encode", "import_debug", "import_debug", "_log", "EventEmitter", "debug", "import_debug", "_log", "EventEmitter", "debug", "message", "import_debug", "hash", "_log", "debug", "key", "import_debug", "import_debug", "EventEmitter", "_log", "debug", "syncState", "log", "debug", "_peers", "_log", "EventEmitter", "debug", "handle", "peerId", "EventEmitter"]
}
