{
  "version": 3,
  "sources": ["../../node_modules/@automerge/automerge-repo-storage-indexeddb/dist/index.js"],
  "sourcesContent": ["/**\n * This module provides a storage adapter for IndexedDB.\n *\n * @packageDocumentation\n */\nexport class IndexedDBStorageAdapter {\n    database;\n    store;\n    dbPromise;\n    /** Create a new {@link IndexedDBStorageAdapter}.\n     * @param database - The name of the database to use. Defaults to \"automerge\".\n     * @param store - The name of the object store to use. Defaults to \"documents\".\n     */\n    constructor(database = \"automerge\", store = \"documents\") {\n        this.database = database;\n        this.store = store;\n        this.dbPromise = this.createDatabasePromise();\n    }\n    createDatabasePromise() {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.database, 1);\n            request.onerror = () => {\n                reject(request.error);\n            };\n            request.onupgradeneeded = event => {\n                const db = event.target.result;\n                db.createObjectStore(this.store);\n            };\n            request.onsuccess = event => {\n                const db = event.target.result;\n                resolve(db);\n            };\n        });\n    }\n    async load(keyArray) {\n        const db = await this.dbPromise;\n        const transaction = db.transaction(this.store);\n        const objectStore = transaction.objectStore(this.store);\n        const request = objectStore.get(keyArray);\n        return new Promise((resolve, reject) => {\n            transaction.onerror = () => {\n                reject(request.error);\n            };\n            request.onsuccess = event => {\n                const result = event.target.result;\n                if (result && typeof result === \"object\" && \"binary\" in result) {\n                    resolve(result.binary);\n                }\n                else {\n                    resolve(undefined);\n                }\n            };\n        });\n    }\n    async save(keyArray, binary) {\n        const db = await this.dbPromise;\n        const transaction = db.transaction(this.store, \"readwrite\");\n        const objectStore = transaction.objectStore(this.store);\n        objectStore.put({ key: keyArray, binary: binary }, keyArray);\n        return new Promise((resolve, reject) => {\n            transaction.onerror = () => {\n                reject(transaction.error);\n            };\n            transaction.oncomplete = () => {\n                resolve();\n            };\n        });\n    }\n    async remove(keyArray) {\n        const db = await this.dbPromise;\n        const transaction = db.transaction(this.store, \"readwrite\");\n        const objectStore = transaction.objectStore(this.store);\n        objectStore.delete(keyArray);\n        return new Promise((resolve, reject) => {\n            transaction.onerror = () => {\n                reject(transaction.error);\n            };\n            transaction.oncomplete = () => {\n                resolve();\n            };\n        });\n    }\n    async loadRange(keyPrefix) {\n        const db = await this.dbPromise;\n        const lowerBound = keyPrefix;\n        const upperBound = [...keyPrefix, \"\\uffff\"];\n        const range = IDBKeyRange.bound(lowerBound, upperBound);\n        const transaction = db.transaction(this.store);\n        const objectStore = transaction.objectStore(this.store);\n        const request = objectStore.openCursor(range);\n        const result = [];\n        return new Promise((resolve, reject) => {\n            transaction.onerror = () => {\n                reject(request.error);\n            };\n            request.onsuccess = event => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    result.push({\n                        data: cursor.value.binary,\n                        key: cursor.key,\n                    });\n                    cursor.continue();\n                }\n                else {\n                    resolve(result);\n                }\n            };\n        });\n    }\n    async removeRange(keyPrefix) {\n        const db = await this.dbPromise;\n        const lowerBound = keyPrefix;\n        const upperBound = [...keyPrefix, \"\\uffff\"];\n        const range = IDBKeyRange.bound(lowerBound, upperBound);\n        const transaction = db.transaction(this.store, \"readwrite\");\n        const objectStore = transaction.objectStore(this.store);\n        objectStore.delete(range);\n        return new Promise((resolve, reject) => {\n            transaction.onerror = () => {\n                reject(transaction.error);\n            };\n            transaction.oncomplete = () => {\n                resolve();\n            };\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
