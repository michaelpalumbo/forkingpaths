
// DO NOT EDIT THIS FILE. IT IS AUTOMATICALLY GENERATED BY device2component.js

import React, { useState, useEffect, useRef } from 'react';
import Draggable from 'react-draggable';
import AudioNodeManager from '../AudioNodeManager';

function AudioOut({ id, audioContext, onRemove, deviceFile, rnbo, handleJackClick, updateCablePosition }) {
  const [rnboDevice, setRnboDevice] = useState(null);
  const [values, setValues] = useState({})
  const [position, setPosition] = useState({ x: 50, y: 50 }); // Initial position
  const outputJackRef = useRef(null);
  const inputJackRef = useRef(null);
  const isLoadedRef = useRef(false); // useRef to track if RNBO device has already been loaded
  const speakerDeviceRef = useRef(null); // Move the ref declaration here


  // set params
  

  const gainNodeRef = useRef(null);
  const analyserRef = useRef(null);
  const [volumeLevel, setVolumeLevel] = useState(0); // State for VU meter

    useEffect(() => {
        if (!audioContext) return;

        // Create a GainNode for the speaker
        const gainNode = audioContext.createGain();
        gainNode.gain.value = 1.0; // Set gain to max

        // Create an AnalyserNode for visual feedback
        const analyserNode = audioContext.createAnalyser();
        analyserNode.fftSize = 256; // Set FFT size
        const bufferLength = analyserNode.frequencyBinCount;
        const dataArray = new Uint8Array(bufferLength);

        // Connect GainNode to AnalyserNode and then to the audio output
        gainNode.connect(analyserNode);
        analyserNode.connect(audioContext.destination);

        // Register the GainNode as an AudioNode in AudioNodeManager
        AudioNodeManager.registerNode(id, gainNode);
        console.log(`Speaker node registered as AudioNode: ${id}`);

        gainNodeRef.current = gainNode;
        analyserRef.current = analyserNode;

        // Animation loop to update the VU meter
        const updateVolume = () => {
        analyserNode.getByteTimeDomainData(dataArray);

        // Calculate peak-to-peak amplitude
        let min = 255, max = 0;
        for (let i = 0; i < bufferLength; i++) {
            const value = dataArray[i];
            if (value < min) min = value;
            if (value > max) max = value;
        }
        const amplitude = max - min;

        // Map amplitude to volume level (0-100)
        const mappedVolume = Math.min((amplitude / 255) * 100, 100);
        setVolumeLevel(mappedVolume);

        requestAnimationFrame(updateVolume);
        };

        updateVolume(); // Start animation loop

        return () => {
        // Unregister node and disconnect when the component unmounts
        AudioNodeManager.unregisterNode(id);
        gainNode.disconnect();
        analyserNode.disconnect();
        };
    }, [audioContext, id]);


  // Handler to click an input jack
  const handleInputClick = (event) => {
    const rect = event.target.getBoundingClientRect();
    const endX = rect.left + rect.width / 2;
    const endY = rect.top + rect.height / 2;

    if (typeof handleJackClick === 'function') {
      handleJackClick(id, 0, 'input', { x: endX, y: endY });
    }
  };

  // handle module repositioning. the connection manager will use this to update cable positioning
  const handleDrag = (e, data) => {
    setPosition({ x: data.x, y: data.y });

    // Update jack positions during dragging
    if (outputJackRef.current) {
      const rect = outputJackRef.current.getBoundingClientRect();
      updateCablePosition(id, 0, 'output', { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 });
    }

    if (inputJackRef.current) {
      const rect = inputJackRef.current.getBoundingClientRect();
      updateCablePosition(id, 0, 'input', { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 });
    }
  };

  return (

  <Draggable 
    position={position}
    onDrag={handleDrag}
    cancel="input, select">
    <div style={{
        width: '100px',
        height: '100px',
        border: '2px solid black',
        borderRadius: '10px',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'relative',
        backgroundColor: '#eee',
        color: 'black'
      }}>
      <p>AUDIO OUT</p>

      <div
          style={{
            width: `${volumeLevel}%`,
            height: '100%',
            backgroundColor: 'green',
            transition: 'width 0.1s',
          }}
        />
      <div style={{ marginBottom: '20px', fontWeight: 'bold' }}>Input</div>

      {/* Visual input jack */}
      {/* Interactive Input Jack */}
      <div
        ref={inputJackRef}
        style={{
          width: '20px',
          height: '20px',
          borderRadius: '50%',
          backgroundColor: 'blue',
          position: 'absolute',
          bottom: '5px',
          left: 'calc(50% - 10px)', // Center the jack horizontally
          cursor: 'pointer',
        }}
        title="Input"
        onMouseUp={handleInputClick} // Complete connection on mouseup
      />
    </div>
  </Draggable>
        
  );
}

export default AudioOut;
